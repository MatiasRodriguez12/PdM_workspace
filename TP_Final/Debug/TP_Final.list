
TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003764  08003764  00013764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003830  08003830  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003838  08003838  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08003840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          0000009c  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099f5  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e2b  00000000  00000000  00029af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0002b928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000750  00000000  00000000  0002c158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026caf  00000000  00000000  0002c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f95b  00000000  00000000  00053557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e241d  00000000  00000000  00062eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001452cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021f4  00000000  00000000  00145320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800374c 	.word	0x0800374c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	0800374c 	.word	0x0800374c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <debounceFSM_init>:

/*debounceFSM_init
 *Se encarga de asignar el estado inicial en la MEF utilizada para validación de pulsaciones.
 *Por defecto, se asigna estado BUTTON_UP como inicial
 *Se inicializa las estructuras para toma de tiempo y validación de pulsaciones*/
void debounceFSM_init(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	StateBU=BUTTON_UP;
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <debounceFSM_init+0x24>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
	StateBD=BUTTON_UP;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <debounceFSM_init+0x28>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	delayInit(&delayButtonBU,TIME_VALID_PUSH);
 80005b4:	2128      	movs	r1, #40	; 0x28
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <debounceFSM_init+0x2c>)
 80005b8:	f000 f952 	bl	8000860 <delayInit>
	delayInit(&delayButtonBD,TIME_VALID_PUSH);
 80005bc:	2128      	movs	r1, #40	; 0x28
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <debounceFSM_init+0x30>)
 80005c0:	f000 f94e 	bl	8000860 <delayInit>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000010c 	.word	0x2000010c
 80005cc:	2000010d 	.word	0x2000010d
 80005d0:	200000f4 	.word	0x200000f4
 80005d4:	20000100 	.word	0x20000100

080005d8 <debounceFSM_update>:

/*debounceFSM_update
 *Verifica el estado del pulsador y actualiza el estado de la MEF
 *
 *Parametro: PULSADOR_UP/PULSADOR_DOWN*/
void debounceFSM_update(uint8_t pulsador){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]

	uint8_t buttonSel=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
	//Verifica valor de parametro de entrada, el cual indica que pulsador se debe analizar (BU o BD).
	if (pulsador==PULSADOR_UP){
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d106      	bne.n	80005fa <debounceFSM_update+0x22>
		buttonState=StateBU;
 80005ec:	4b72      	ldr	r3, [pc, #456]	; (80007b8 <debounceFSM_update+0x1e0>)
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b72      	ldr	r3, [pc, #456]	; (80007bc <debounceFSM_update+0x1e4>)
 80005f2:	701a      	strb	r2, [r3, #0]
		buttonSel=PULSADOR_UP;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	e00d      	b.n	8000616 <debounceFSM_update+0x3e>
	}
	else if (pulsador==PULSADOR_DOWN){
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d106      	bne.n	800060e <debounceFSM_update+0x36>
		buttonState=StateBD;
 8000600:	4b6f      	ldr	r3, [pc, #444]	; (80007c0 <debounceFSM_update+0x1e8>)
 8000602:	781a      	ldrb	r2, [r3, #0]
 8000604:	4b6d      	ldr	r3, [pc, #436]	; (80007bc <debounceFSM_update+0x1e4>)
 8000606:	701a      	strb	r2, [r3, #0]
		buttonSel=PULSADOR_DOWN;
 8000608:	2301      	movs	r3, #1
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e003      	b.n	8000616 <debounceFSM_update+0x3e>
	}
	else{
		/*En caso de error en parametro, enciende LED1 de manera permanente*/
		while(1){
			BSP_LED_On(LED1);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fdca 	bl	80011a8 <BSP_LED_On>
 8000614:	e7fb      	b.n	800060e <debounceFSM_update+0x36>
		}
	}

	switch (buttonState){
 8000616:	4b69      	ldr	r3, [pc, #420]	; (80007bc <debounceFSM_update+0x1e4>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b03      	cmp	r3, #3
 800061c:	f200 80c4 	bhi.w	80007a8 <debounceFSM_update+0x1d0>
 8000620:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <debounceFSM_update+0x50>)
 8000622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000626:	bf00      	nop
 8000628:	08000639 	.word	0x08000639
 800062c:	08000681 	.word	0x08000681
 8000630:	080006f1 	.word	0x080006f1
 8000634:	0800073f 	.word	0x0800073f
		 * Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_FALLING.
		 * En estas condiciones, inicia al contador para validación.
		 * Si detecta que el pulsador no se encuentra presionado, mantiene la MEF en estado BUTTON_UP. */
		case BUTTON_UP:
			/*Analiza BU.*/
			if(buttonSel==PULSADOR_UP){
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d110      	bne.n	8000660 <debounceFSM_update+0x88>
				if(BSP_PB_GetState(BUTTON_USER)){
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fe22 	bl	8001288 <BSP_PB_GetState>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d006      	beq.n	8000658 <debounceFSM_update+0x80>
					delayRead(&delayButtonBU);
 800064a:	485e      	ldr	r0, [pc, #376]	; (80007c4 <debounceFSM_update+0x1ec>)
 800064c:	f000 f926 	bl	800089c <delayRead>
					StateBU=BUTTON_FALLING;
 8000650:	4b59      	ldr	r3, [pc, #356]	; (80007b8 <debounceFSM_update+0x1e0>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
				else{
					StateBD=BUTTON_UP;
				}
			}

		break;
 8000656:	e0aa      	b.n	80007ae <debounceFSM_update+0x1d6>
					StateBU=BUTTON_UP;
 8000658:	4b57      	ldr	r3, [pc, #348]	; (80007b8 <debounceFSM_update+0x1e0>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
		break;
 800065e:	e0a6      	b.n	80007ae <debounceFSM_update+0x1d6>
				if(gpioButton_Read()){
 8000660:	f000 fc16 	bl	8000e90 <gpioButton_Read>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <debounceFSM_update+0xa0>
					delayRead(&delayButtonBD);
 800066a:	4857      	ldr	r0, [pc, #348]	; (80007c8 <debounceFSM_update+0x1f0>)
 800066c:	f000 f916 	bl	800089c <delayRead>
					StateBD=BUTTON_FALLING;
 8000670:	4b53      	ldr	r3, [pc, #332]	; (80007c0 <debounceFSM_update+0x1e8>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
		break;
 8000676:	e09a      	b.n	80007ae <debounceFSM_update+0x1d6>
					StateBD=BUTTON_UP;
 8000678:	4b51      	ldr	r3, [pc, #324]	; (80007c0 <debounceFSM_update+0x1e8>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
		break;
 800067e:	e096      	b.n	80007ae <debounceFSM_update+0x1d6>
		* Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_DOWN (pulsación detectada).
		* A su vez, llama a la funcion buttonPressed indicar dicha pulsacion.
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_UP (pulsación no válida). */
		case BUTTON_FALLING:
			/*Analiza BU.*/
			if(buttonSel==PULSADOR_UP){
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d11a      	bne.n	80006bc <debounceFSM_update+0xe4>
				if (delayRead(&delayButtonBU)){
 8000686:	484f      	ldr	r0, [pc, #316]	; (80007c4 <debounceFSM_update+0x1ec>)
 8000688:	f000 f908 	bl	800089c <delayRead>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d010      	beq.n	80006b4 <debounceFSM_update+0xdc>
					if(BSP_PB_GetState(BUTTON_USER)){
 8000692:	2000      	movs	r0, #0
 8000694:	f000 fdf8 	bl	8001288 <BSP_PB_GetState>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d006      	beq.n	80006ac <debounceFSM_update+0xd4>
						StateBU=BUTTON_DOWN;
 800069e:	4b46      	ldr	r3, [pc, #280]	; (80007b8 <debounceFSM_update+0x1e0>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	701a      	strb	r2, [r3, #0]
						buttonPressed(PULSADOR_UP);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 f891 	bl	80007cc <buttonPressed>
				else{
					StateBD=BUTTON_FALLING;
				}
			}

		break;
 80006aa:	e080      	b.n	80007ae <debounceFSM_update+0x1d6>
						StateBU=BUTTON_UP;
 80006ac:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <debounceFSM_update+0x1e0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
		break;
 80006b2:	e07c      	b.n	80007ae <debounceFSM_update+0x1d6>
					StateBU=BUTTON_FALLING;
 80006b4:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <debounceFSM_update+0x1e0>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
		break;
 80006ba:	e078      	b.n	80007ae <debounceFSM_update+0x1d6>
				if (delayRead(&delayButtonBD)){
 80006bc:	4842      	ldr	r0, [pc, #264]	; (80007c8 <debounceFSM_update+0x1f0>)
 80006be:	f000 f8ed 	bl	800089c <delayRead>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00f      	beq.n	80006e8 <debounceFSM_update+0x110>
					if(gpioButton_Read()){
 80006c8:	f000 fbe2 	bl	8000e90 <gpioButton_Read>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <debounceFSM_update+0x108>
						StateBD=BUTTON_DOWN;
 80006d2:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <debounceFSM_update+0x1e8>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	701a      	strb	r2, [r3, #0]
						buttonPressed(PULSADOR_DOWN);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 f877 	bl	80007cc <buttonPressed>
		break;
 80006de:	e066      	b.n	80007ae <debounceFSM_update+0x1d6>
						StateBD=BUTTON_UP;
 80006e0:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <debounceFSM_update+0x1e8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
		break;
 80006e6:	e062      	b.n	80007ae <debounceFSM_update+0x1d6>
					StateBD=BUTTON_FALLING;
 80006e8:	4b35      	ldr	r3, [pc, #212]	; (80007c0 <debounceFSM_update+0x1e8>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
		break;
 80006ee:	e05e      	b.n	80007ae <debounceFSM_update+0x1d6>
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_RAISING.
		* En estas condiciones, inicia al contador para validación.
		* Si detecta que el pulsador se encuentra presionado, mantiene la MEF en estado BUTTON_DOWN. */
		case BUTTON_DOWN:
			/*Analiza BU.*/
			if(buttonSel==PULSADOR_UP){
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d110      	bne.n	8000718 <debounceFSM_update+0x140>
				if(!BSP_PB_GetState(BUTTON_USER)){
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 fdc6 	bl	8001288 <BSP_PB_GetState>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d106      	bne.n	8000710 <debounceFSM_update+0x138>
					delayRead(&delayButtonBU);
 8000702:	4830      	ldr	r0, [pc, #192]	; (80007c4 <debounceFSM_update+0x1ec>)
 8000704:	f000 f8ca 	bl	800089c <delayRead>
					StateBU=BUTTON_RAISING;
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <debounceFSM_update+0x1e0>)
 800070a:	2203      	movs	r2, #3
 800070c:	701a      	strb	r2, [r3, #0]
				else{
					StateBD=BUTTON_DOWN;
				}
			}

		break;
 800070e:	e04e      	b.n	80007ae <debounceFSM_update+0x1d6>
					StateBU=BUTTON_DOWN;
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <debounceFSM_update+0x1e0>)
 8000712:	2202      	movs	r2, #2
 8000714:	701a      	strb	r2, [r3, #0]
		break;
 8000716:	e04a      	b.n	80007ae <debounceFSM_update+0x1d6>
				if(!gpioButton_Read()){
 8000718:	f000 fbba 	bl	8000e90 <gpioButton_Read>
 800071c:	4603      	mov	r3, r0
 800071e:	f083 0301 	eor.w	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <debounceFSM_update+0x15e>
					delayRead(&delayButtonBD);
 8000728:	4827      	ldr	r0, [pc, #156]	; (80007c8 <debounceFSM_update+0x1f0>)
 800072a:	f000 f8b7 	bl	800089c <delayRead>
					StateBD=BUTTON_RAISING;
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <debounceFSM_update+0x1e8>)
 8000730:	2203      	movs	r2, #3
 8000732:	701a      	strb	r2, [r3, #0]
		break;
 8000734:	e03b      	b.n	80007ae <debounceFSM_update+0x1d6>
					StateBD=BUTTON_DOWN;
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <debounceFSM_update+0x1e8>)
 8000738:	2202      	movs	r2, #2
 800073a:	701a      	strb	r2, [r3, #0]
		break;
 800073c:	e037      	b.n	80007ae <debounceFSM_update+0x1d6>
		* Verifica que se cumpla el retardo de tiempo para validar una pulsación.
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_UP (pulsador liberado).
		* Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_DOWN (liberación no válida). */
		case BUTTON_RAISING:
			/*Analiza BU.*/
			if(buttonSel==PULSADOR_UP){
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d117      	bne.n	8000774 <debounceFSM_update+0x19c>
				if (delayRead(&delayButtonBU)){
 8000744:	481f      	ldr	r0, [pc, #124]	; (80007c4 <debounceFSM_update+0x1ec>)
 8000746:	f000 f8a9 	bl	800089c <delayRead>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00d      	beq.n	800076c <debounceFSM_update+0x194>
					if(!BSP_PB_GetState(BUTTON_USER)){
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fd99 	bl	8001288 <BSP_PB_GetState>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d103      	bne.n	8000764 <debounceFSM_update+0x18c>
						StateBU=BUTTON_UP;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <debounceFSM_update+0x1e0>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
				}
				else{
					StateBD=BUTTON_RAISING;
				}
			}
		break;
 8000762:	e024      	b.n	80007ae <debounceFSM_update+0x1d6>
						StateBU=BUTTON_DOWN;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <debounceFSM_update+0x1e0>)
 8000766:	2202      	movs	r2, #2
 8000768:	701a      	strb	r2, [r3, #0]
		break;
 800076a:	e020      	b.n	80007ae <debounceFSM_update+0x1d6>
					StateBU=BUTTON_RAISING;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <debounceFSM_update+0x1e0>)
 800076e:	2203      	movs	r2, #3
 8000770:	701a      	strb	r2, [r3, #0]
		break;
 8000772:	e01c      	b.n	80007ae <debounceFSM_update+0x1d6>
				if (delayRead(&delayButtonBD)){
 8000774:	4814      	ldr	r0, [pc, #80]	; (80007c8 <debounceFSM_update+0x1f0>)
 8000776:	f000 f891 	bl	800089c <delayRead>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00f      	beq.n	80007a0 <debounceFSM_update+0x1c8>
					if(!gpioButton_Read()){
 8000780:	f000 fb86 	bl	8000e90 <gpioButton_Read>
 8000784:	4603      	mov	r3, r0
 8000786:	f083 0301 	eor.w	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <debounceFSM_update+0x1c0>
						StateBD=BUTTON_UP;
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <debounceFSM_update+0x1e8>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
		break;
 8000796:	e00a      	b.n	80007ae <debounceFSM_update+0x1d6>
						StateBD=BUTTON_DOWN;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <debounceFSM_update+0x1e8>)
 800079a:	2202      	movs	r2, #2
 800079c:	701a      	strb	r2, [r3, #0]
		break;
 800079e:	e006      	b.n	80007ae <debounceFSM_update+0x1d6>
					StateBD=BUTTON_RAISING;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <debounceFSM_update+0x1e8>)
 80007a2:	2203      	movs	r2, #3
 80007a4:	701a      	strb	r2, [r3, #0]
		break;
 80007a6:	e002      	b.n	80007ae <debounceFSM_update+0x1d6>

		/*Por default, vuelve al estado inicial*/
		default:
			debounceFSM_init();
 80007a8:	f7ff fefc 	bl	80005a4 <debounceFSM_init>
		break;
 80007ac:	bf00      	nop
	}

}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000010c 	.word	0x2000010c
 80007bc:	2000010e 	.word	0x2000010e
 80007c0:	2000010d 	.word	0x2000010d
 80007c4:	200000f4 	.word	0x200000f4
 80007c8:	20000100 	.word	0x20000100

080007cc <buttonPressed>:

/*buttonPressed
 *Función que indica que boton fue presionado.
 *Asigna un valor booleano TRUE a las variables buttonUPPress o buttonDOWNPress, segun corresponda. */
static void buttonPressed(uint8_t button) {
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	if(button==PULSADOR_UP){
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d103      	bne.n	80007e4 <buttonPressed+0x18>
		buttonUPPress=true;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <buttonPressed+0x2c>)
 80007de:	2201      	movs	r2, #1
 80007e0:	701a      	strb	r2, [r3, #0]
	}
	else{
		buttonDOWNPress=true;
	}
}
 80007e2:	e002      	b.n	80007ea <buttonPressed+0x1e>
		buttonDOWNPress=true;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <buttonPressed+0x30>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	200000f0 	.word	0x200000f0
 80007fc:	200000f1 	.word	0x200000f1

08000800 <readKeyUP>:


/*readKeyUP
 *Función booleana que devuelve una copia del valor de la variable buttonUPPress.
 *Si dicha variable posee valor lógico TRUE, la reinicializa a FALSE.*/
bool_t readKeyUP(void){
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
	bool_t buttonStateAux;

	if (buttonUPPress==true){
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <readKeyUP+0x2c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d005      	beq.n	800081a <readKeyUP+0x1a>
		buttonStateAux=true;
 800080e:	2301      	movs	r3, #1
 8000810:	71fb      	strb	r3, [r7, #7]
		buttonUPPress=false;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <readKeyUP+0x2c>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	e001      	b.n	800081e <readKeyUP+0x1e>
	}
	else{
		buttonStateAux=false;
 800081a:	2300      	movs	r3, #0
 800081c:	71fb      	strb	r3, [r7, #7]
	}
	return buttonStateAux;
 800081e:	79fb      	ldrb	r3, [r7, #7]
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	200000f0 	.word	0x200000f0

08000830 <readKeyDOWN>:

/*readKeyDOWN
 *Función booleana que devuelve una copia del valor de la variable buttonDOWNPress.
 *Si dicha variable posee valor lógico TRUE, la reinicializa a FALSE.*/
bool_t readKeyDOWN(void){
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
	bool_t buttonStateAux;

	if (buttonDOWNPress==true){
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <readKeyDOWN+0x2c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d005      	beq.n	800084a <readKeyDOWN+0x1a>
		buttonStateAux=true;
 800083e:	2301      	movs	r3, #1
 8000840:	71fb      	strb	r3, [r7, #7]
		buttonDOWNPress=false;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <readKeyDOWN+0x2c>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	e001      	b.n	800084e <readKeyDOWN+0x1e>
	}
	else{
		buttonStateAux=false;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]
	}
	return buttonStateAux;
 800084e:	79fb      	ldrb	r3, [r7, #7]
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	200000f1 	.word	0x200000f1

08000860 <delayInit>:

#include "API_delay.h"

/*DelayInit:
 *Inicializa la estructura para los retardos no bloqueantes.*/
void delayInit( delay_t * delay, tick_t duration ){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
	/*Verifica si los parametros introducidos son los adecuados.
	 *Almacena el valor de retardo en el parametro duration. */
	if (delay!=NULL && duration>0 && duration<MAX_DURATION){
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00e      	beq.n	800088e <delayInit+0x2e>
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00b      	beq.n	800088e <delayInit+0x2e>
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	f247 522f 	movw	r2, #29999	; 0x752f
 800087c:	4293      	cmp	r3, r2
 800087e:	d806      	bhi.n	800088e <delayInit+0x2e>
		delay->duration=duration;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	605a      	str	r2, [r3, #4]
		delay->running=false;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2200      	movs	r2, #0
 800088a:	721a      	strb	r2, [r3, #8]
	/*En caso de error, enciende LED1 de manera permanente*/
		while(1){
			BSP_LED_On(LED1);
		}
	}
}
 800088c:	e003      	b.n	8000896 <delayInit+0x36>
			BSP_LED_On(LED1);
 800088e:	2000      	movs	r0, #0
 8000890:	f000 fc8a 	bl	80011a8 <BSP_LED_On>
 8000894:	e7fb      	b.n	800088e <delayInit+0x2e>
}
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <delayRead>:

/*DelayRead:
 *Función que inicializa la cuenta de tiempo.*/
bool_t delayRead( delay_t * delay ){
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	tick_t currentTime;
	bool_t completedTime=false;
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]

	/*Verifica si los parametros introducidos son los adecuados.
	 *Toma una marca de tiempo e inicia la cuenta.
	 *Devuelve un valor booleano TRUE si el tiempo transcurrido es mayor al almacenado en "duration".*/
	if (delay != NULL){
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d025      	beq.n	80008fa <delayRead+0x5e>
		if (delay->running==false){
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7a1b      	ldrb	r3, [r3, #8]
 80008b2:	f083 0301 	eor.w	r3, r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00a      	beq.n	80008d2 <delayRead+0x36>
			delay->startTime=HAL_GetTick();
 80008bc:	f000 fdf4 	bl	80014a8 <HAL_GetTick>
 80008c0:	4602      	mov	r2, r0
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	601a      	str	r2, [r3, #0]
			delay->running=true;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2201      	movs	r2, #1
 80008ca:	721a      	strb	r2, [r3, #8]
			completedTime=false;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	e017      	b.n	8000902 <delayRead+0x66>
		}
		else{
			currentTime=HAL_GetTick();
 80008d2:	f000 fde9 	bl	80014a8 <HAL_GetTick>
 80008d6:	60b8      	str	r0, [r7, #8]
			if (currentTime - delay->startTime >= delay->duration){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	68ba      	ldr	r2, [r7, #8]
 80008de:	1ad2      	subs	r2, r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d305      	bcc.n	80008f4 <delayRead+0x58>
				completedTime=true;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
				delay->running=false;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	721a      	strb	r2, [r3, #8]
 80008f2:	e006      	b.n	8000902 <delayRead+0x66>
			}
			else{
				completedTime=false;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e003      	b.n	8000902 <delayRead+0x66>
		}
	}
	else {
		while(1){
	/*En caso de error, enciende LED1 de manera permanente.*/
			BSP_LED_On(LED1);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f000 fc54 	bl	80011a8 <BSP_LED_On>
 8000900:	e7fb      	b.n	80008fa <delayRead+0x5e>
		}
	}
	return completedTime;
 8000902:	7bfb      	ldrb	r3, [r7, #15]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <displayFSM_init>:
/*displayFSM_init().
 *Funcion que inicializa la MEF de display.
 *A su vez, inicializa la UART.
 *Si inicia correctamente, setea LED 2 y asigna al estado 0 como estado inicial de la MEF de display.
 *Envia mensaje por UART indicando el estado inicial de la MEF.*/
void displayFSM_init(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	if(uartInit()){
 8000910:	f000 fb5a 	bl	8000fc8 <uartInit>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d00a      	beq.n	8000930 <displayFSM_init+0x24>
		BSP_LED_On(LED2);
 800091a:	2001      	movs	r0, #1
 800091c:	f000 fc44 	bl	80011a8 <BSP_LED_On>
		stateDisplay=State_0;
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <displayFSM_init+0x28>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
		numeroDisplay=NRO_CERO;
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <displayFSM_init+0x2c>)
 8000928:	2277      	movs	r2, #119	; 0x77
 800092a:	701a      	strb	r2, [r3, #0]
		sendValueToUart();
 800092c:	f000 f9c8 	bl	8000cc0 <sendValueToUart>
	}
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000010f 	.word	0x2000010f
 8000938:	20000110 	.word	0x20000110

0800093c <displayFSM_update>:

/*displayFSM_update().
 *Función que actualiza el estado la MEF de display.*/
void displayFSM_update(void){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

	switch(stateDisplay){
 8000940:	4bb4      	ldr	r3, [pc, #720]	; (8000c14 <displayFSM_update+0x2d8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b09      	cmp	r3, #9
 8000946:	f200 8192 	bhi.w	8000c6e <displayFSM_update+0x332>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <displayFSM_update+0x14>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	08000979 	.word	0x08000979
 8000954:	080009c3 	.word	0x080009c3
 8000958:	08000a0d 	.word	0x08000a0d
 800095c:	08000a57 	.word	0x08000a57
 8000960:	08000aa1 	.word	0x08000aa1
 8000964:	08000aeb 	.word	0x08000aeb
 8000968:	08000b35 	.word	0x08000b35
 800096c:	08000b7f 	.word	0x08000b7f
 8000970:	08000bc9 	.word	0x08000bc9
 8000974:	08000c25 	.word	0x08000c25
		/*Si se detecta pulsación en boton UP, se avanza al estado 1.
		 *Si se detecta pulsación en boton DOWN, se retroce al estado 9.
		 *Si no se detecta pulsación alguna, se mantiene en estado 0.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_0:
			if(readKeyUP()){
 8000978:	f7ff ff42 	bl	8000800 <readKeyUP>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d009      	beq.n	8000996 <displayFSM_update+0x5a>
				stateDisplay=State_1;
 8000982:	4ba4      	ldr	r3, [pc, #656]	; (8000c14 <displayFSM_update+0x2d8>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_UNO;
 8000988:	4ba3      	ldr	r3, [pc, #652]	; (8000c18 <displayFSM_update+0x2dc>)
 800098a:	2244      	movs	r2, #68	; 0x44
 800098c:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 800098e:	4ba3      	ldr	r3, [pc, #652]	; (8000c1c <displayFSM_update+0x2e0>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_0;
				numeroDisplay=NRO_CERO;
			}
		break;
 8000994:	e16e      	b.n	8000c74 <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000996:	f7ff ff4b 	bl	8000830 <readKeyDOWN>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d009      	beq.n	80009b4 <displayFSM_update+0x78>
				stateDisplay=State_9;
 80009a0:	4b9c      	ldr	r3, [pc, #624]	; (8000c14 <displayFSM_update+0x2d8>)
 80009a2:	2209      	movs	r2, #9
 80009a4:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_NUEVE;
 80009a6:	4b9c      	ldr	r3, [pc, #624]	; (8000c18 <displayFSM_update+0x2dc>)
 80009a8:	227c      	movs	r2, #124	; 0x7c
 80009aa:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 80009ac:	4b9c      	ldr	r3, [pc, #624]	; (8000c20 <displayFSM_update+0x2e4>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
		break;
 80009b2:	e15f      	b.n	8000c74 <displayFSM_update+0x338>
				stateDisplay=State_0;
 80009b4:	4b97      	ldr	r3, [pc, #604]	; (8000c14 <displayFSM_update+0x2d8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CERO;
 80009ba:	4b97      	ldr	r3, [pc, #604]	; (8000c18 <displayFSM_update+0x2dc>)
 80009bc:	2277      	movs	r2, #119	; 0x77
 80009be:	701a      	strb	r2, [r3, #0]
		break;
 80009c0:	e158      	b.n	8000c74 <displayFSM_update+0x338>
		/*Si se detecta pulsación en boton UP, se avanza al estado 2.
		 *Si se detecta pulsación en boton DOWN, se retroce al estado 0.
		 *Si no se detecta pulsación alguna, se mantiene en estado 1.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_1:
			if(readKeyUP()){
 80009c2:	f7ff ff1d 	bl	8000800 <readKeyUP>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d009      	beq.n	80009e0 <displayFSM_update+0xa4>
				stateDisplay=State_2;
 80009cc:	4b91      	ldr	r3, [pc, #580]	; (8000c14 <displayFSM_update+0x2d8>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_DOS;
 80009d2:	4b91      	ldr	r3, [pc, #580]	; (8000c18 <displayFSM_update+0x2dc>)
 80009d4:	226b      	movs	r2, #107	; 0x6b
 80009d6:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 80009d8:	4b90      	ldr	r3, [pc, #576]	; (8000c1c <displayFSM_update+0x2e0>)
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_1;
				numeroDisplay=NRO_UNO;
			}
		break;
 80009de:	e149      	b.n	8000c74 <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 80009e0:	f7ff ff26 	bl	8000830 <readKeyDOWN>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d009      	beq.n	80009fe <displayFSM_update+0xc2>
				stateDisplay=State_0;
 80009ea:	4b8a      	ldr	r3, [pc, #552]	; (8000c14 <displayFSM_update+0x2d8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CERO;
 80009f0:	4b89      	ldr	r3, [pc, #548]	; (8000c18 <displayFSM_update+0x2dc>)
 80009f2:	2277      	movs	r2, #119	; 0x77
 80009f4:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 80009f6:	4b8a      	ldr	r3, [pc, #552]	; (8000c20 <displayFSM_update+0x2e4>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
		break;
 80009fc:	e13a      	b.n	8000c74 <displayFSM_update+0x338>
				stateDisplay=State_1;
 80009fe:	4b85      	ldr	r3, [pc, #532]	; (8000c14 <displayFSM_update+0x2d8>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_UNO;
 8000a04:	4b84      	ldr	r3, [pc, #528]	; (8000c18 <displayFSM_update+0x2dc>)
 8000a06:	2244      	movs	r2, #68	; 0x44
 8000a08:	701a      	strb	r2, [r3, #0]
		break;
 8000a0a:	e133      	b.n	8000c74 <displayFSM_update+0x338>
		/*Si se detecta pulsación en boton UP, se avanza al estado 3.
		 *Si se detecta pulsación en boton DOWN, se retroce al estado 1.
		 *Si no se detecta pulsación alguna, se mantiene en estado 2.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_2:
			if(readKeyUP()){
 8000a0c:	f7ff fef8 	bl	8000800 <readKeyUP>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d009      	beq.n	8000a2a <displayFSM_update+0xee>
				stateDisplay=State_3;
 8000a16:	4b7f      	ldr	r3, [pc, #508]	; (8000c14 <displayFSM_update+0x2d8>)
 8000a18:	2203      	movs	r2, #3
 8000a1a:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_TRES;
 8000a1c:	4b7e      	ldr	r3, [pc, #504]	; (8000c18 <displayFSM_update+0x2dc>)
 8000a1e:	226e      	movs	r2, #110	; 0x6e
 8000a20:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000a22:	4b7e      	ldr	r3, [pc, #504]	; (8000c1c <displayFSM_update+0x2e0>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_2;
				numeroDisplay=NRO_DOS;
			}
		break;
 8000a28:	e124      	b.n	8000c74 <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000a2a:	f7ff ff01 	bl	8000830 <readKeyDOWN>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d009      	beq.n	8000a48 <displayFSM_update+0x10c>
				stateDisplay=State_1;
 8000a34:	4b77      	ldr	r3, [pc, #476]	; (8000c14 <displayFSM_update+0x2d8>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_UNO;
 8000a3a:	4b77      	ldr	r3, [pc, #476]	; (8000c18 <displayFSM_update+0x2dc>)
 8000a3c:	2244      	movs	r2, #68	; 0x44
 8000a3e:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000a40:	4b77      	ldr	r3, [pc, #476]	; (8000c20 <displayFSM_update+0x2e4>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
		break;
 8000a46:	e115      	b.n	8000c74 <displayFSM_update+0x338>
				stateDisplay=State_2;
 8000a48:	4b72      	ldr	r3, [pc, #456]	; (8000c14 <displayFSM_update+0x2d8>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_DOS;
 8000a4e:	4b72      	ldr	r3, [pc, #456]	; (8000c18 <displayFSM_update+0x2dc>)
 8000a50:	226b      	movs	r2, #107	; 0x6b
 8000a52:	701a      	strb	r2, [r3, #0]
		break;
 8000a54:	e10e      	b.n	8000c74 <displayFSM_update+0x338>
		/*Si se detecta pulsación en boton UP, se avanza al estado 4.
		 *Si se detecta pulsación en boton DOWN, se retroce al estado 2.
		 *Si no se detecta pulsación alguna, se mantiene en estado 3.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_3:
			if(readKeyUP()){
 8000a56:	f7ff fed3 	bl	8000800 <readKeyUP>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d009      	beq.n	8000a74 <displayFSM_update+0x138>
				stateDisplay=State_4;
 8000a60:	4b6c      	ldr	r3, [pc, #432]	; (8000c14 <displayFSM_update+0x2d8>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CUATRO;
 8000a66:	4b6c      	ldr	r3, [pc, #432]	; (8000c18 <displayFSM_update+0x2dc>)
 8000a68:	225c      	movs	r2, #92	; 0x5c
 8000a6a:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000a6c:	4b6b      	ldr	r3, [pc, #428]	; (8000c1c <displayFSM_update+0x2e0>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_3;
				numeroDisplay=NRO_TRES;
			}
		break;
 8000a72:	e0ff      	b.n	8000c74 <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000a74:	f7ff fedc 	bl	8000830 <readKeyDOWN>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d009      	beq.n	8000a92 <displayFSM_update+0x156>
				stateDisplay=State_2;
 8000a7e:	4b65      	ldr	r3, [pc, #404]	; (8000c14 <displayFSM_update+0x2d8>)
 8000a80:	2202      	movs	r2, #2
 8000a82:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_DOS;
 8000a84:	4b64      	ldr	r3, [pc, #400]	; (8000c18 <displayFSM_update+0x2dc>)
 8000a86:	226b      	movs	r2, #107	; 0x6b
 8000a88:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000a8a:	4b65      	ldr	r3, [pc, #404]	; (8000c20 <displayFSM_update+0x2e4>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
		break;
 8000a90:	e0f0      	b.n	8000c74 <displayFSM_update+0x338>
				stateDisplay=State_3;
 8000a92:	4b60      	ldr	r3, [pc, #384]	; (8000c14 <displayFSM_update+0x2d8>)
 8000a94:	2203      	movs	r2, #3
 8000a96:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_TRES;
 8000a98:	4b5f      	ldr	r3, [pc, #380]	; (8000c18 <displayFSM_update+0x2dc>)
 8000a9a:	226e      	movs	r2, #110	; 0x6e
 8000a9c:	701a      	strb	r2, [r3, #0]
		break;
 8000a9e:	e0e9      	b.n	8000c74 <displayFSM_update+0x338>
		/*Si se detecta pulsación en boton UP, se avanza al estado 5.
		 *Si se detecta pulsación en boton DOWN, se retroce al estado 3.
		 *Si no se detecta pulsación alguna, se mantiene en estado 4.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_4:
			if(readKeyUP()){
 8000aa0:	f7ff feae 	bl	8000800 <readKeyUP>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d009      	beq.n	8000abe <displayFSM_update+0x182>
				stateDisplay=State_5;
 8000aaa:	4b5a      	ldr	r3, [pc, #360]	; (8000c14 <displayFSM_update+0x2d8>)
 8000aac:	2205      	movs	r2, #5
 8000aae:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CINCO;
 8000ab0:	4b59      	ldr	r3, [pc, #356]	; (8000c18 <displayFSM_update+0x2dc>)
 8000ab2:	223e      	movs	r2, #62	; 0x3e
 8000ab4:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000ab6:	4b59      	ldr	r3, [pc, #356]	; (8000c1c <displayFSM_update+0x2e0>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_4;
				numeroDisplay=NRO_CUATRO;
			}
		break;
 8000abc:	e0da      	b.n	8000c74 <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000abe:	f7ff feb7 	bl	8000830 <readKeyDOWN>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d009      	beq.n	8000adc <displayFSM_update+0x1a0>
				stateDisplay=State_3;
 8000ac8:	4b52      	ldr	r3, [pc, #328]	; (8000c14 <displayFSM_update+0x2d8>)
 8000aca:	2203      	movs	r2, #3
 8000acc:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_TRES;
 8000ace:	4b52      	ldr	r3, [pc, #328]	; (8000c18 <displayFSM_update+0x2dc>)
 8000ad0:	226e      	movs	r2, #110	; 0x6e
 8000ad2:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000ad4:	4b52      	ldr	r3, [pc, #328]	; (8000c20 <displayFSM_update+0x2e4>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
		break;
 8000ada:	e0cb      	b.n	8000c74 <displayFSM_update+0x338>
				stateDisplay=State_4;
 8000adc:	4b4d      	ldr	r3, [pc, #308]	; (8000c14 <displayFSM_update+0x2d8>)
 8000ade:	2204      	movs	r2, #4
 8000ae0:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CUATRO;
 8000ae2:	4b4d      	ldr	r3, [pc, #308]	; (8000c18 <displayFSM_update+0x2dc>)
 8000ae4:	225c      	movs	r2, #92	; 0x5c
 8000ae6:	701a      	strb	r2, [r3, #0]
		break;
 8000ae8:	e0c4      	b.n	8000c74 <displayFSM_update+0x338>
		/*Si se detecta pulsación en boton UP, se avanza al estado 6.
		 *Si se detecta pulsación en boton DOWN, se retroce al estado 4.
		 *Si no se detecta pulsación alguna, se mantiene en estado 5.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_5:
			if(readKeyUP()){
 8000aea:	f7ff fe89 	bl	8000800 <readKeyUP>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d009      	beq.n	8000b08 <displayFSM_update+0x1cc>
				stateDisplay=State_6;
 8000af4:	4b47      	ldr	r3, [pc, #284]	; (8000c14 <displayFSM_update+0x2d8>)
 8000af6:	2206      	movs	r2, #6
 8000af8:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SEIS;
 8000afa:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <displayFSM_update+0x2dc>)
 8000afc:	223f      	movs	r2, #63	; 0x3f
 8000afe:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000b00:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <displayFSM_update+0x2e0>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_5;
				numeroDisplay=NRO_CINCO;
			}
		break;
 8000b06:	e0b5      	b.n	8000c74 <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000b08:	f7ff fe92 	bl	8000830 <readKeyDOWN>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d009      	beq.n	8000b26 <displayFSM_update+0x1ea>
				stateDisplay=State_4;
 8000b12:	4b40      	ldr	r3, [pc, #256]	; (8000c14 <displayFSM_update+0x2d8>)
 8000b14:	2204      	movs	r2, #4
 8000b16:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CUATRO;
 8000b18:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <displayFSM_update+0x2dc>)
 8000b1a:	225c      	movs	r2, #92	; 0x5c
 8000b1c:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000b1e:	4b40      	ldr	r3, [pc, #256]	; (8000c20 <displayFSM_update+0x2e4>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
		break;
 8000b24:	e0a6      	b.n	8000c74 <displayFSM_update+0x338>
				stateDisplay=State_5;
 8000b26:	4b3b      	ldr	r3, [pc, #236]	; (8000c14 <displayFSM_update+0x2d8>)
 8000b28:	2205      	movs	r2, #5
 8000b2a:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CINCO;
 8000b2c:	4b3a      	ldr	r3, [pc, #232]	; (8000c18 <displayFSM_update+0x2dc>)
 8000b2e:	223e      	movs	r2, #62	; 0x3e
 8000b30:	701a      	strb	r2, [r3, #0]
		break;
 8000b32:	e09f      	b.n	8000c74 <displayFSM_update+0x338>
		/*Si se detecta pulsación en boton UP, se avanza al estado 7.
		 *Si se detecta pulsación en boton DOWN, se retroce al estado 5.
		 *Si no se detecta pulsación alguna, se mantiene en estado 6.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_6:
			if(readKeyUP()){
 8000b34:	f7ff fe64 	bl	8000800 <readKeyUP>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d009      	beq.n	8000b52 <displayFSM_update+0x216>
				stateDisplay=State_7;
 8000b3e:	4b35      	ldr	r3, [pc, #212]	; (8000c14 <displayFSM_update+0x2d8>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SIETE;
 8000b44:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <displayFSM_update+0x2dc>)
 8000b46:	2264      	movs	r2, #100	; 0x64
 8000b48:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000b4a:	4b34      	ldr	r3, [pc, #208]	; (8000c1c <displayFSM_update+0x2e0>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_6;
				numeroDisplay=NRO_SEIS;
			}
		break;
 8000b50:	e090      	b.n	8000c74 <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000b52:	f7ff fe6d 	bl	8000830 <readKeyDOWN>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d009      	beq.n	8000b70 <displayFSM_update+0x234>
				stateDisplay=State_5;
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <displayFSM_update+0x2d8>)
 8000b5e:	2205      	movs	r2, #5
 8000b60:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CINCO;
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <displayFSM_update+0x2dc>)
 8000b64:	223e      	movs	r2, #62	; 0x3e
 8000b66:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000b68:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <displayFSM_update+0x2e4>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
		break;
 8000b6e:	e081      	b.n	8000c74 <displayFSM_update+0x338>
				stateDisplay=State_6;
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <displayFSM_update+0x2d8>)
 8000b72:	2206      	movs	r2, #6
 8000b74:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SEIS;
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <displayFSM_update+0x2dc>)
 8000b78:	223f      	movs	r2, #63	; 0x3f
 8000b7a:	701a      	strb	r2, [r3, #0]
		break;
 8000b7c:	e07a      	b.n	8000c74 <displayFSM_update+0x338>
		/*Si se detecta pulsación en boton UP, se avanza al estado 8.
		 *Si se detecta pulsación en boton DOWN, se retroce al estado 6.
		 *Si no se detecta pulsación alguna, se mantiene en estado 7.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_7:
			if(readKeyUP()){
 8000b7e:	f7ff fe3f 	bl	8000800 <readKeyUP>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d009      	beq.n	8000b9c <displayFSM_update+0x260>
				stateDisplay=State_8;
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <displayFSM_update+0x2d8>)
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_OCHO;
 8000b8e:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <displayFSM_update+0x2dc>)
 8000b90:	227f      	movs	r2, #127	; 0x7f
 8000b92:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000b94:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <displayFSM_update+0x2e0>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_7;
				numeroDisplay=NRO_SIETE;
			}
		break;
 8000b9a:	e06b      	b.n	8000c74 <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000b9c:	f7ff fe48 	bl	8000830 <readKeyDOWN>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d009      	beq.n	8000bba <displayFSM_update+0x27e>
				stateDisplay=State_6;
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <displayFSM_update+0x2d8>)
 8000ba8:	2206      	movs	r2, #6
 8000baa:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SEIS;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <displayFSM_update+0x2dc>)
 8000bae:	223f      	movs	r2, #63	; 0x3f
 8000bb0:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <displayFSM_update+0x2e4>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
		break;
 8000bb8:	e05c      	b.n	8000c74 <displayFSM_update+0x338>
				stateDisplay=State_7;
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <displayFSM_update+0x2d8>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SIETE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <displayFSM_update+0x2dc>)
 8000bc2:	2264      	movs	r2, #100	; 0x64
 8000bc4:	701a      	strb	r2, [r3, #0]
		break;
 8000bc6:	e055      	b.n	8000c74 <displayFSM_update+0x338>
		/*Si se detecta pulsación en boton UP, se avanza al estado 9.
		 *Si se detecta pulsación en boton DOWN, se retroce al estado 7.
		 *Si no se detecta pulsación alguna, se mantiene en estado 8.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_8:
			if(readKeyUP()){
 8000bc8:	f7ff fe1a 	bl	8000800 <readKeyUP>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d009      	beq.n	8000be6 <displayFSM_update+0x2aa>
				stateDisplay=State_9;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <displayFSM_update+0x2d8>)
 8000bd4:	2209      	movs	r2, #9
 8000bd6:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_NUEVE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <displayFSM_update+0x2dc>)
 8000bda:	227c      	movs	r2, #124	; 0x7c
 8000bdc:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <displayFSM_update+0x2e0>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_8;
				numeroDisplay=NRO_OCHO;
			}
		break;
 8000be4:	e046      	b.n	8000c74 <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000be6:	f7ff fe23 	bl	8000830 <readKeyDOWN>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d009      	beq.n	8000c04 <displayFSM_update+0x2c8>
				stateDisplay=State_7;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <displayFSM_update+0x2d8>)
 8000bf2:	2207      	movs	r2, #7
 8000bf4:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SIETE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <displayFSM_update+0x2dc>)
 8000bf8:	2264      	movs	r2, #100	; 0x64
 8000bfa:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <displayFSM_update+0x2e4>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
		break;
 8000c02:	e037      	b.n	8000c74 <displayFSM_update+0x338>
				stateDisplay=State_8;
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <displayFSM_update+0x2d8>)
 8000c06:	2208      	movs	r2, #8
 8000c08:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_OCHO;
 8000c0a:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <displayFSM_update+0x2dc>)
 8000c0c:	227f      	movs	r2, #127	; 0x7f
 8000c0e:	701a      	strb	r2, [r3, #0]
		break;
 8000c10:	e030      	b.n	8000c74 <displayFSM_update+0x338>
 8000c12:	bf00      	nop
 8000c14:	2000010f 	.word	0x2000010f
 8000c18:	20000110 	.word	0x20000110
 8000c1c:	20000111 	.word	0x20000111
 8000c20:	20000112 	.word	0x20000112
		/*Si se detecta pulsación en boton UP, se avanza al estado 0.
		 *Si se detecta pulsación en boton DOWN, se retroce al estado 8.
		 *Si no se detecta pulsación alguna, se mantiene en estado 9.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_9:
			if(readKeyUP()){
 8000c24:	f7ff fdec 	bl	8000800 <readKeyUP>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d009      	beq.n	8000c42 <displayFSM_update+0x306>
				stateDisplay=State_0;
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <displayFSM_update+0x33c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CERO;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <displayFSM_update+0x340>)
 8000c36:	2277      	movs	r2, #119	; 0x77
 8000c38:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <displayFSM_update+0x344>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_9;
				numeroDisplay=NRO_NUEVE;
			}
		break;
 8000c40:	e018      	b.n	8000c74 <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000c42:	f7ff fdf5 	bl	8000830 <readKeyDOWN>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d009      	beq.n	8000c60 <displayFSM_update+0x324>
				stateDisplay=State_8;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <displayFSM_update+0x33c>)
 8000c4e:	2208      	movs	r2, #8
 8000c50:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_OCHO;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <displayFSM_update+0x340>)
 8000c54:	227f      	movs	r2, #127	; 0x7f
 8000c56:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <displayFSM_update+0x348>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
		break;
 8000c5e:	e009      	b.n	8000c74 <displayFSM_update+0x338>
				stateDisplay=State_9;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <displayFSM_update+0x33c>)
 8000c62:	2209      	movs	r2, #9
 8000c64:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_NUEVE;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <displayFSM_update+0x340>)
 8000c68:	227c      	movs	r2, #124	; 0x7c
 8000c6a:	701a      	strb	r2, [r3, #0]
		break;
 8000c6c:	e002      	b.n	8000c74 <displayFSM_update+0x338>

		/*Por default, se retorna la MEF a su estado inicial.*/
		default:
		displayFSM_init();
 8000c6e:	f7ff fe4d 	bl	800090c <displayFSM_init>
		break;
 8000c72:	bf00      	nop
	}
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000010f 	.word	0x2000010f
 8000c7c:	20000110 	.word	0x20000110
 8000c80:	20000111 	.word	0x20000111
 8000c84:	20000112 	.word	0x20000112

08000c88 <getStateDisplay>:

/*getStateDisplay()
 *Función que devuelve una copia del array de estados de los puertos GPIO.
 *Si detecta que existió pulsación alguna, llama a la función sendValueToUart() para comunicarlo por UART.*/
uint8_t getStateDisplay(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t representacionNumero;
	if(displayUP==true || displayDOWN==true){
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <getStateDisplay+0x2c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d103      	bne.n	8000c9e <getStateDisplay+0x16>
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <getStateDisplay+0x30>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <getStateDisplay+0x1a>
		sendValueToUart();
 8000c9e:	f000 f80f 	bl	8000cc0 <sendValueToUart>
	}
	representacionNumero = numeroDisplay;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <getStateDisplay+0x34>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
	return representacionNumero;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000111 	.word	0x20000111
 8000cb8:	20000112 	.word	0x20000112
 8000cbc:	20000110 	.word	0x20000110

08000cc0 <sendValueToUart>:

/*sendValueToUart()
 *Función privada que comunica por UART la pulsación detectada.
 *Indica que boton fue presionado, junto con el valor expresado en el display.*/
static void sendValueToUart(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
	uint8_t numero[NRO_CARACTERES_ESTADO]={};
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	80bb      	strh	r3, [r7, #4]
	if (displayUP==true){
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <sendValueToUart+0x58>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <sendValueToUart+0x1e>
		uartSendString((uint8_t*)BUpress);
 8000cd2:	4812      	ldr	r0, [pc, #72]	; (8000d1c <sendValueToUart+0x5c>)
 8000cd4:	f000 fa02 	bl	80010dc <uartSendString>
		displayUP =false;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <sendValueToUart+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
	}
	if(displayDOWN==true){
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <sendValueToUart+0x60>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <sendValueToUart+0x32>
		uartSendString((uint8_t*)BDpress);
 8000ce6:	480f      	ldr	r0, [pc, #60]	; (8000d24 <sendValueToUart+0x64>)
 8000ce8:	f000 f9f8 	bl	80010dc <uartSendString>
		displayDOWN=false;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <sendValueToUart+0x60>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*) numero, "%d",(int) stateDisplay);
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <sendValueToUart+0x68>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	490c      	ldr	r1, [pc, #48]	; (8000d2c <sendValueToUart+0x6c>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 f8b7 	bl	8002e70 <siprintf>
	uartSendString((uint8_t*)nuevoValor);
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <sendValueToUart+0x70>)
 8000d04:	f000 f9ea 	bl	80010dc <uartSendString>
	uartSendString((uint8_t*)numero);
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f9e6 	bl	80010dc <uartSendString>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000111 	.word	0x20000111
 8000d1c:	2000001c 	.word	0x2000001c
 8000d20:	20000112 	.word	0x20000112
 8000d24:	20000038 	.word	0x20000038
 8000d28:	2000010f 	.word	0x2000010f
 8000d2c:	08003764 	.word	0x08003764
 8000d30:	20000000 	.word	0x20000000

08000d34 <gpioDisplay_init>:
#include "API_display.h"
#include "API_gpio.h"

/*gpioDisplay_init():
 *Configura los puertos D0 a D6 como salidas.*/
void gpioDisplay_init(void){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpioInit={0};
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]

	/*Habilita clocks para los puertos E,F y G.*/
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <gpioDisplay_init+0xf0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a34      	ldr	r2, [pc, #208]	; (8000e24 <gpioDisplay_init+0xf0>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <gpioDisplay_init+0xf0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <gpioDisplay_init+0xf0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a2d      	ldr	r2, [pc, #180]	; (8000e24 <gpioDisplay_init+0xf0>)
 8000d70:	f043 0320 	orr.w	r3, r3, #32
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <gpioDisplay_init+0xf0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0320 	and.w	r3, r3, #32
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <gpioDisplay_init+0xf0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <gpioDisplay_init+0xf0>)
 8000d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <gpioDisplay_init+0xf0>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

	/*Configuración de los pines D3, D5 y D6 (ubicados en puerto E) como salidas.*/
	gpioInit.Pin = (D3_PIN | D5_PIN | D6_PIN);
 8000d9e:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000da2:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode= GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(D3_PORT, &gpioInit);
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	4619      	mov	r1, r3
 8000db6:	481c      	ldr	r0, [pc, #112]	; (8000e28 <gpioDisplay_init+0xf4>)
 8000db8:	f000 fc94 	bl	80016e4 <HAL_GPIO_Init>

	/*Configuración de los pines D2 y D4 (ubicados en puerto F) como salidas.*/
	gpioInit.Pin = (D2_PIN | D4_PIN);
 8000dbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dc0:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode= GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(D2_PORT, &gpioInit);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <gpioDisplay_init+0xf8>)
 8000dd6:	f000 fc85 	bl	80016e4 <HAL_GPIO_Init>

	/*Configuración de los pines D0 y D1 (ubicados en puerto G) como salidas.*/
	gpioInit.Pin = (D0_PIN | D1_PIN);
 8000dda:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000dde:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode= GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(D0_PORT, &gpioInit);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4619      	mov	r1, r3
 8000df2:	480f      	ldr	r0, [pc, #60]	; (8000e30 <gpioDisplay_init+0xfc>)
 8000df4:	f000 fc76 	bl	80016e4 <HAL_GPIO_Init>

	/*Pone en estado LOW a los pines antes nombrados*/
	HAL_GPIO_WritePin(D3_PORT,D3_PIN|D5_PIN| D6_PIN, LOW);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <gpioDisplay_init+0xf4>)
 8000e00:	f000 fe34 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_PORT,D2_PIN|D4_PIN, LOW);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000e0a:	4808      	ldr	r0, [pc, #32]	; (8000e2c <gpioDisplay_init+0xf8>)
 8000e0c:	f000 fe2e 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D0_PORT,D0_PIN|D1_PIN, LOW);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8000e16:	4806      	ldr	r0, [pc, #24]	; (8000e30 <gpioDisplay_init+0xfc>)
 8000e18:	f000 fe28 	bl	8001a6c <HAL_GPIO_WritePin>
}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40021400 	.word	0x40021400
 8000e30:	40021800 	.word	0x40021800

08000e34 <gpioButton_init>:

/*gpioButton_init():
 *Configura el puerto D15 como entrada.*/
void gpioButton_init(void){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpioButtonInit={0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]

	/*Habilita clock para el puerto B.*/
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <gpioButton_init+0x54>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <gpioButton_init+0x54>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <gpioButton_init+0x54>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]

	/*Configuracion del pin D15 como entrada.*/
	gpioButtonInit.Pin = (D15_PIN);
 8000e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e68:	607b      	str	r3, [r7, #4]
	gpioButtonInit.Mode= GPIO_MODE_INPUT;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
	gpioButtonInit.Pull = GPIO_PULLUP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
	gpioButtonInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(D15_PORT, &gpioButtonInit);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <gpioButton_init+0x58>)
 8000e7c:	f000 fc32 	bl	80016e4 <HAL_GPIO_Init>
}
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020400 	.word	0x40020400

08000e90 <gpioButton_Read>:

/*gpioButton_Read():
 *Función que devuelve el estado del interruptor externo (conectado en D15).
 *Si el pulsador esta presionado, devuelve un estado booleano TRUE.
 *Si el pulsador esta liberado, devuelve un estado booleano FALSE.*/
bool_t gpioButton_Read(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
	bool_t stateButton=false;
 8000e96:	2300      	movs	r3, #0
 8000e98:	71fb      	strb	r3, [r7, #7]

	/*Debido a la configuración del puerto D15 como entrada PULL UP, al presionarlo
	 *setea un estado BAJO al puerto D15.
	 *Para invertirlo a estado ALTO, se niega la instrucción HAL_GPIO_ReadPin() dentro del condicional IF.*/
	if(!HAL_GPIO_ReadPin(D15_PORT, D15_PIN)){
 8000e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9e:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <gpioButton_Read+0x30>)
 8000ea0:	f000 fdcc 	bl	8001a3c <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <gpioButton_Read+0x20>
		stateButton=true;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	e001      	b.n	8000eb4 <gpioButton_Read+0x24>
	}
	else{
		stateButton=false;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	71fb      	strb	r3, [r7, #7]
	}
	return stateButton;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <gpioDisplay_write>:

/*gpioDisplay_write():
 *Actualiza el estado de los puertos D0 a D6, generando la representación de numeros en el display.*/
void gpioDisplay_write(uint8_t valorDisplay){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t estadoLed[NUMERO_LEDS_DISPLAY];
	uint8_t representacion;

	/*Verifica si el parametro de entrada es el adecuado.*/
	if (valorDisplay == NRO_CERO || valorDisplay == NRO_UNO ||
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b77      	cmp	r3, #119	; 0x77
 8000ed2:	d01a      	beq.n	8000f0a <gpioDisplay_write+0x46>
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b44      	cmp	r3, #68	; 0x44
 8000ed8:	d017      	beq.n	8000f0a <gpioDisplay_write+0x46>
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b6b      	cmp	r3, #107	; 0x6b
 8000ede:	d014      	beq.n	8000f0a <gpioDisplay_write+0x46>
	    valorDisplay == NRO_DOS || valorDisplay == NRO_TRES ||
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b6e      	cmp	r3, #110	; 0x6e
 8000ee4:	d011      	beq.n	8000f0a <gpioDisplay_write+0x46>
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b5c      	cmp	r3, #92	; 0x5c
 8000eea:	d00e      	beq.n	8000f0a <gpioDisplay_write+0x46>
		valorDisplay == NRO_CUATRO || valorDisplay == NRO_CINCO ||
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b3e      	cmp	r3, #62	; 0x3e
 8000ef0:	d00b      	beq.n	8000f0a <gpioDisplay_write+0x46>
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef6:	d008      	beq.n	8000f0a <gpioDisplay_write+0x46>
		valorDisplay == NRO_SEIS || valorDisplay == NRO_SIETE ||
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d005      	beq.n	8000f0a <gpioDisplay_write+0x46>
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b7f      	cmp	r3, #127	; 0x7f
 8000f02:	d002      	beq.n	8000f0a <gpioDisplay_write+0x46>
		valorDisplay == NRO_OCHO || valorDisplay == NRO_NUEVE){
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b7c      	cmp	r3, #124	; 0x7c
 8000f08:	d104      	bne.n	8000f14 <gpioDisplay_write+0x50>
		representacion=valorDisplay;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	74fb      	strb	r3, [r7, #19]
		while(1){
			BSP_LED_On(LED1);
		}
	}

	for (int i=0;i<NUMERO_LEDS_DISPLAY;i++){
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e01b      	b.n	8000f4c <gpioDisplay_write+0x88>
			BSP_LED_On(LED1);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 f947 	bl	80011a8 <BSP_LED_On>
 8000f1a:	e7fb      	b.n	8000f14 <gpioDisplay_write+0x50>
		/*Se separa y analiza cada bit del array de entrada.
		 *Se genera un nuevo array en donde se almacena el estado que debera adquirir cada puerto GPIO de salida.
		 *Si el bit posee un valor 1, se le asigna estado HIGH.
		 *Si el bit posee un valor 0, se le asigna un estado LOW*/
		if((representacion>>i)&MASCARA_SEPARA_BITS){
 8000f1c:	7cfa      	ldrb	r2, [r7, #19]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	fa42 f303 	asr.w	r3, r2, r3
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d006      	beq.n	8000f3a <gpioDisplay_write+0x76>
			estadoLed[i]=HIGH;
 8000f2c:	f107 020c 	add.w	r2, r7, #12
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	4413      	add	r3, r2
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	e005      	b.n	8000f46 <gpioDisplay_write+0x82>
		}
		else{
			estadoLed[i]=LOW;
 8000f3a:	f107 020c 	add.w	r2, r7, #12
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	4413      	add	r3, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<NUMERO_LEDS_DISPLAY;i++){
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	dde4      	ble.n	8000f1c <gpioDisplay_write+0x58>
		}
	}

	/*Setea los estados de los puertos GPIO en HIGH o LOW, segun corresponda.*/
	HAL_GPIO_WritePin(D0_PORT, D0_PIN, 	estadoLed[0]);
 8000f52:	7b3b      	ldrb	r3, [r7, #12]
 8000f54:	461a      	mov	r2, r3
 8000f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5a:	4818      	ldr	r0, [pc, #96]	; (8000fbc <gpioDisplay_write+0xf8>)
 8000f5c:	f000 fd86 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_PORT, D1_PIN,	estadoLed[1]);
 8000f60:	7b7b      	ldrb	r3, [r7, #13]
 8000f62:	461a      	mov	r2, r3
 8000f64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f68:	4814      	ldr	r0, [pc, #80]	; (8000fbc <gpioDisplay_write+0xf8>)
 8000f6a:	f000 fd7f 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_PORT, D2_PIN, 	estadoLed[2]);
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	461a      	mov	r2, r3
 8000f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f76:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <gpioDisplay_write+0xfc>)
 8000f78:	f000 fd78 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_PORT, D3_PIN, 	estadoLed[3]);
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <gpioDisplay_write+0x100>)
 8000f86:	f000 fd71 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_PORT, D4_PIN, 	estadoLed[4]);
 8000f8a:	7c3b      	ldrb	r3, [r7, #16]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f92:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <gpioDisplay_write+0xfc>)
 8000f94:	f000 fd6a 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_PORT, D5_PIN, 	estadoLed[5]);
 8000f98:	7c7b      	ldrb	r3, [r7, #17]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <gpioDisplay_write+0x100>)
 8000fa2:	f000 fd63 	bl	8001a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_PORT, D6_PIN, 	estadoLed[6]);
 8000fa6:	7cbb      	ldrb	r3, [r7, #18]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <gpioDisplay_write+0x100>)
 8000fb0:	f000 fd5c 	bl	8001a6c <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021800 	.word	0x40021800
 8000fc0:	40021400 	.word	0x40021400
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <uartInit>:

/* uartInit:
 * Inicia la comunicación UART.
 * Envía mensaje indicando los parametros de su configuración.
 * Devuelve valor booleano TRUE si la iniciación fue exitosa.*/
bool_t uartInit(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
	 bool_t successfullInitialization=true;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]
	 uint8_t baudRateValue[NRO_CARACTERES_CONVERSION]={};
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	753b      	strb	r3, [r7, #20]
	 uint8_t wordLengthValue[NRO_CARACTERES_CONVERSION]={};
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	733b      	strb	r3, [r7, #12]
	 uint8_t StopBitsValue[NRO_CARACTERES_CONVERSION]={};
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	713b      	strb	r3, [r7, #4]
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8000fea:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <uartInit+0xec>)
 8000fec:	4a32      	ldr	r2, [pc, #200]	; (80010b8 <uartInit+0xf0>)
 8000fee:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = 9600;
 8000ff0:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <uartInit+0xec>)
 8000ff2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ff6:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <uartInit+0xec>)
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <uartInit+0xec>)
 8001000:	2201      	movs	r2, #1
 8001002:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <uartInit+0xec>)
 8001006:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800100a:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <uartInit+0xec>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <uartInit+0xec>)
 8001014:	220c      	movs	r2, #12
 8001016:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <uartInit+0xec>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800101e:	4825      	ldr	r0, [pc, #148]	; (80010b4 <uartInit+0xec>)
 8001020:	f001 fa80 	bl	8002524 <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <uartInit+0x68>
	  {
	    /* Initialization Error */
		successfullInitialization=false;
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]
	    while(1){
 800102e:	e7fe      	b.n	800102e <uartInit+0x66>
	    }

	  }

	  /*Función que convierte valor numérico a char.*/
	  sprintf((char*) baudRateValue, "%d",(int) UartHandle.Init.BaudRate);
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <uartInit+0xec>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	461a      	mov	r2, r3
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4920      	ldr	r1, [pc, #128]	; (80010bc <uartInit+0xf4>)
 800103c:	4618      	mov	r0, r3
 800103e:	f001 ff17 	bl	8002e70 <siprintf>
	  sprintf((char*) wordLengthValue, "%d",(int) UartHandle.Init.WordLength);
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <uartInit+0xec>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	461a      	mov	r2, r3
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	491b      	ldr	r1, [pc, #108]	; (80010bc <uartInit+0xf4>)
 800104e:	4618      	mov	r0, r3
 8001050:	f001 ff0e 	bl	8002e70 <siprintf>
	  sprintf((char*) StopBitsValue, "%d",(int) UartHandle.Init.StopBits);
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <uartInit+0xec>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	461a      	mov	r2, r3
 800105a:	463b      	mov	r3, r7
 800105c:	4917      	ldr	r1, [pc, #92]	; (80010bc <uartInit+0xf4>)
 800105e:	4618      	mov	r0, r3
 8001060:	f001 ff06 	bl	8002e70 <siprintf>

	  /*Se informa la configuración de los parametros UART.*/
	  uartSendString((uint8_t*)"Uart Iniciada\n\r");
 8001064:	4816      	ldr	r0, [pc, #88]	; (80010c0 <uartInit+0xf8>)
 8001066:	f000 f839 	bl	80010dc <uartSendString>
	  uartSendString((uint8_t*)"-----Parametros UART-----\n\r");
 800106a:	4816      	ldr	r0, [pc, #88]	; (80010c4 <uartInit+0xfc>)
 800106c:	f000 f836 	bl	80010dc <uartSendString>
	  uartSendString((uint8_t*)"\n\rBaud rate: ");
 8001070:	4815      	ldr	r0, [pc, #84]	; (80010c8 <uartInit+0x100>)
 8001072:	f000 f833 	bl	80010dc <uartSendString>
	  uartSendString((uint8_t*)baudRateValue);
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f82e 	bl	80010dc <uartSendString>
	  uartSendString((uint8_t*)"\n\rWord Length: ");
 8001080:	4812      	ldr	r0, [pc, #72]	; (80010cc <uartInit+0x104>)
 8001082:	f000 f82b 	bl	80010dc <uartSendString>
	  uartSendString((uint8_t*)wordLengthValue);
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f826 	bl	80010dc <uartSendString>
	  uartSendString((uint8_t*)"\n\rStop Bits: ");
 8001090:	480f      	ldr	r0, [pc, #60]	; (80010d0 <uartInit+0x108>)
 8001092:	f000 f823 	bl	80010dc <uartSendString>
	  uartSendString((uint8_t*)StopBitsValue);
 8001096:	463b      	mov	r3, r7
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f81f 	bl	80010dc <uartSendString>
	  uartSendString((uint8_t*)"\n\rParity: Odd");
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <uartInit+0x10c>)
 80010a0:	f000 f81c 	bl	80010dc <uartSendString>
	  uartSendString((uint8_t*)"\n\r");
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <uartInit+0x110>)
 80010a6:	f000 f819 	bl	80010dc <uartSendString>

	  return successfullInitialization;
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000114 	.word	0x20000114
 80010b8:	40004800 	.word	0x40004800
 80010bc:	08003768 	.word	0x08003768
 80010c0:	0800376c 	.word	0x0800376c
 80010c4:	0800377c 	.word	0x0800377c
 80010c8:	08003798 	.word	0x08003798
 80010cc:	080037a8 	.word	0x080037a8
 80010d0:	080037b8 	.word	0x080037b8
 80010d4:	080037c8 	.word	0x080037c8
 80010d8:	080037d8 	.word	0x080037d8

080010dc <uartSendString>:

/* uartSendString:
 * Función que envia un mensaje por UART.
 * Recibe un puntero a array como parametro, el cual contiene el mensaje a enviar.*/
void uartSendString(uint8_t * pstring){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UartHandle,(uint8_t*) pstring,strlen((const char*) pstring), TIME_OUT_UART);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff f883 	bl	80001f0 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <uartSendString+0x28>)
 80010f6:	f001 fa62 	bl	80025be <HAL_UART_Transmit>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000114 	.word	0x20000114

08001108 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10e      	bne.n	8001136 <BSP_LED_Init+0x2e>
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <BSP_LED_Init+0x94>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <BSP_LED_Init+0x94>)
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	6313      	str	r3, [r2, #48]	; 0x30
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <BSP_LED_Init+0x94>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	e00d      	b.n	8001152 <BSP_LED_Init+0x4a>
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <BSP_LED_Init+0x94>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a17      	ldr	r2, [pc, #92]	; (800119c <BSP_LED_Init+0x94>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <BSP_LED_Init+0x94>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <BSP_LED_Init+0x98>)
 8001156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001164:	2302      	movs	r3, #2
 8001166:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <BSP_LED_Init+0x9c>)
 800116c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001170:	f107 0214 	add.w	r2, r7, #20
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fab4 	bl	80016e4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <BSP_LED_Init+0x9c>)
 8001180:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <BSP_LED_Init+0x98>)
 8001188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	f000 fc6c 	bl	8001a6c <HAL_GPIO_WritePin>
}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	080037dc 	.word	0x080037dc
 80011a4:	20000054 	.word	0x20000054

080011a8 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <BSP_LED_On+0x2c>)
 80011b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <BSP_LED_On+0x30>)
 80011be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4619      	mov	r1, r3
 80011c6:	f000 fc51 	bl	8001a6c <HAL_GPIO_WritePin>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000054 	.word	0x20000054
 80011d8:	080037dc 	.word	0x080037dc

080011dc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <BSP_PB_Init+0xa4>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a22      	ldr	r2, [pc, #136]	; (8001280 <BSP_PB_Init+0xa4>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <BSP_PB_Init+0xa4>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d112      	bne.n	8001234 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800120e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001212:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001218:	2302      	movs	r3, #2
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4a18      	ldr	r2, [pc, #96]	; (8001284 <BSP_PB_Init+0xa8>)
 8001224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001228:	f107 020c 	add.w	r2, r7, #12
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fa58 	bl	80016e4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d11d      	bne.n	8001276 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800123a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001244:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001248:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <BSP_PB_Init+0xa8>)
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	f107 020c 	add.w	r2, r7, #12
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fa43 	bl	80016e4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800125e:	2328      	movs	r3, #40	; 0x28
 8001260:	b25b      	sxtb	r3, r3
 8001262:	2200      	movs	r2, #0
 8001264:	210f      	movs	r1, #15
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fa05 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800126c:	2328      	movs	r3, #40	; 0x28
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fa1c 	bl	80016ae <HAL_NVIC_EnableIRQ>
  }
}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	20000060 	.word	0x20000060

08001288 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <BSP_PB_GetState+0x28>)
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fbcb 	bl	8001a3c <HAL_GPIO_ReadPin>
 80012a6:	4603      	mov	r3, r0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000060 	.word	0x20000060

080012b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <SystemInit+0x60>)
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012be:	4a15      	ldr	r2, [pc, #84]	; (8001314 <SystemInit+0x60>)
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <SystemInit+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <SystemInit+0x64>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <SystemInit+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <SystemInit+0x64>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <SystemInit+0x64>)
 80012e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <SystemInit+0x64>)
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <SystemInit+0x68>)
 80012ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <SystemInit+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a08      	ldr	r2, [pc, #32]	; (8001318 <SystemInit+0x64>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <SystemInit+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SystemInit+0x60>)
 8001304:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001308:	609a      	str	r2, [r3, #8]
#endif
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	40023800 	.word	0x40023800
 800131c:	24003010 	.word	0x24003010

08001320 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001374:	f000 f884 	bl	8001480 <HAL_IncTick>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <_sbrk+0x5c>)
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <_sbrk+0x60>)
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <_sbrk+0x64>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <_sbrk+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d207      	bcs.n	80013bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ac:	f001 fd36 	bl	8002e1c <__errno>
 80013b0:	4603      	mov	r3, r0
 80013b2:	220c      	movs	r2, #12
 80013b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	e009      	b.n	80013d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <_sbrk+0x64>)
 80013cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20030000 	.word	0x20030000
 80013dc:	00000400 	.word	0x00000400
 80013e0:	20000158 	.word	0x20000158
 80013e4:	20000170 	.word	0x20000170

080013e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_Init+0x34>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_Init+0x34>)
 80013f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f6:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_Init+0x34>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_Init+0x34>)
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 f92b 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140a:	200f      	movs	r0, #15
 800140c:	f000 f808 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001410:	f000 fb98 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023c00 	.word	0x40023c00

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x54>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x58>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	fbb3 f3f1 	udiv	r3, r3, r1
 800143a:	fbb2 f3f3 	udiv	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f943 	bl	80016ca <HAL_SYSTICK_Config>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e00e      	b.n	800146c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d80a      	bhi.n	800146a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001454:	2200      	movs	r2, #0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f000 f90b 	bl	8001676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_InitTick+0x5c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000064 	.word	0x20000064
 8001478:	2000006c 	.word	0x2000006c
 800147c:	20000068 	.word	0x20000068

08001480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x20>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x24>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_IncTick+0x24>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	2000006c 	.word	0x2000006c
 80014a4:	2000015c 	.word	0x2000015c

080014a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_GetTick+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000015c 	.word	0x2000015c

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <__NVIC_EnableIRQ+0x38>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f7ff ff8e 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff29 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff3e 	bl	8001508 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff8e 	bl	80015b4 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5d 	bl	8001560 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff31 	bl	8001524 <__NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffa2 	bl	800161c <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e177      	b.n	80019f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8166 	bne.w	80019ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d005      	beq.n	8001736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001732:	2b02      	cmp	r3, #2
 8001734:	d130      	bne.n	8001798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 0201 	and.w	r2, r3, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d017      	beq.n	80017d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d123      	bne.n	8001828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	08da      	lsrs	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3208      	adds	r2, #8
 80017e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80c0 	beq.w	80019ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b66      	ldr	r3, [pc, #408]	; (8001a08 <HAL_GPIO_Init+0x324>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a65      	ldr	r2, [pc, #404]	; (8001a08 <HAL_GPIO_Init+0x324>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_GPIO_Init+0x324>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001886:	4a61      	ldr	r2, [pc, #388]	; (8001a0c <HAL_GPIO_Init+0x328>)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_GPIO_Init+0x32c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d037      	beq.n	8001922 <HAL_GPIO_Init+0x23e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a57      	ldr	r2, [pc, #348]	; (8001a14 <HAL_GPIO_Init+0x330>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d031      	beq.n	800191e <HAL_GPIO_Init+0x23a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a56      	ldr	r2, [pc, #344]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d02b      	beq.n	800191a <HAL_GPIO_Init+0x236>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a55      	ldr	r2, [pc, #340]	; (8001a1c <HAL_GPIO_Init+0x338>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d025      	beq.n	8001916 <HAL_GPIO_Init+0x232>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <HAL_GPIO_Init+0x33c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d01f      	beq.n	8001912 <HAL_GPIO_Init+0x22e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a53      	ldr	r2, [pc, #332]	; (8001a24 <HAL_GPIO_Init+0x340>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d019      	beq.n	800190e <HAL_GPIO_Init+0x22a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_GPIO_Init+0x344>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <HAL_GPIO_Init+0x226>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a51      	ldr	r2, [pc, #324]	; (8001a2c <HAL_GPIO_Init+0x348>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d00d      	beq.n	8001906 <HAL_GPIO_Init+0x222>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a50      	ldr	r2, [pc, #320]	; (8001a30 <HAL_GPIO_Init+0x34c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d007      	beq.n	8001902 <HAL_GPIO_Init+0x21e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <HAL_GPIO_Init+0x350>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_GPIO_Init+0x21a>
 80018fa:	2309      	movs	r3, #9
 80018fc:	e012      	b.n	8001924 <HAL_GPIO_Init+0x240>
 80018fe:	230a      	movs	r3, #10
 8001900:	e010      	b.n	8001924 <HAL_GPIO_Init+0x240>
 8001902:	2308      	movs	r3, #8
 8001904:	e00e      	b.n	8001924 <HAL_GPIO_Init+0x240>
 8001906:	2307      	movs	r3, #7
 8001908:	e00c      	b.n	8001924 <HAL_GPIO_Init+0x240>
 800190a:	2306      	movs	r3, #6
 800190c:	e00a      	b.n	8001924 <HAL_GPIO_Init+0x240>
 800190e:	2305      	movs	r3, #5
 8001910:	e008      	b.n	8001924 <HAL_GPIO_Init+0x240>
 8001912:	2304      	movs	r3, #4
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x240>
 8001916:	2303      	movs	r3, #3
 8001918:	e004      	b.n	8001924 <HAL_GPIO_Init+0x240>
 800191a:	2302      	movs	r3, #2
 800191c:	e002      	b.n	8001924 <HAL_GPIO_Init+0x240>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_GPIO_Init+0x240>
 8001922:	2300      	movs	r3, #0
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f002 0203 	and.w	r2, r2, #3
 800192a:	0092      	lsls	r2, r2, #2
 800192c:	4093      	lsls	r3, r2
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001934:	4935      	ldr	r1, [pc, #212]	; (8001a0c <HAL_GPIO_Init+0x328>)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_GPIO_Init+0x354>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001966:	4a34      	ldr	r2, [pc, #208]	; (8001a38 <HAL_GPIO_Init+0x354>)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_GPIO_Init+0x354>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001990:	4a29      	ldr	r2, [pc, #164]	; (8001a38 <HAL_GPIO_Init+0x354>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_GPIO_Init+0x354>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ba:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_GPIO_Init+0x354>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_GPIO_Init+0x354>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_GPIO_Init+0x354>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3301      	adds	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	f67f ae84 	bls.w	8001700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40013800 	.word	0x40013800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40021400 	.word	0x40021400
 8001a28:	40021800 	.word	0x40021800
 8001a2c:	40021c00 	.word	0x40021c00
 8001a30:	40022000 	.word	0x40022000
 8001a34:	40022400 	.word	0x40022400
 8001a38:	40013c00 	.word	0x40013c00

08001a3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e001      	b.n	8001a5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a88:	e003      	b.n	8001a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	041a      	lsls	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	619a      	str	r2, [r3, #24]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_UART_MspInit+0x9c>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_UART_MspInit+0x9c>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab8:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_UART_MspInit+0x9c>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_UART_MspInit+0x9c>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_UART_MspInit+0x9c>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_UART_MspInit+0x9c>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_UART_MspInit+0x9c>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <HAL_UART_MspInit+0x9c>)
 8001aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aee:	6413      	str	r3, [r2, #64]	; 0x40
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_UART_MspInit+0x9c>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001b0e:	2307      	movs	r3, #7
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4809      	ldr	r0, [pc, #36]	; (8001b40 <HAL_UART_MspInit+0xa0>)
 8001b1a:	f7ff fde3 	bl	80016e4 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001b24:	2307      	movs	r3, #7
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4804      	ldr	r0, [pc, #16]	; (8001b40 <HAL_UART_MspInit+0xa0>)
 8001b30:	f7ff fdd8 	bl	80016e4 <HAL_GPIO_Init>
}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020c00 	.word	0x40020c00

08001b44 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_PWREx_EnableOverDrive+0x94>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b80:	f7ff fc92 	bl	80014a8 <HAL_GetTick>
 8001b84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b86:	e009      	b.n	8001b9c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b88:	f7ff fc8e 	bl	80014a8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b96:	d901      	bls.n	8001b9c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e01f      	b.n	8001bdc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_PWREx_EnableOverDrive+0x98>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d1ee      	bne.n	8001b88 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb0:	f7ff fc7a 	bl	80014a8 <HAL_GetTick>
 8001bb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bb6:	e009      	b.n	8001bcc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bb8:	f7ff fc76 	bl	80014a8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bc6:	d901      	bls.n	8001bcc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e007      	b.n	8001bdc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <HAL_PWREx_EnableOverDrive+0x98>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bd8:	d1ee      	bne.n	8001bb8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	420e0040 	.word	0x420e0040
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	420e0044 	.word	0x420e0044

08001bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e267      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d075      	beq.n	8001cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c12:	4b88      	ldr	r3, [pc, #544]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d00c      	beq.n	8001c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1e:	4b85      	ldr	r3, [pc, #532]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d112      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2a:	4b82      	ldr	r3, [pc, #520]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c36:	d10b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	4b7e      	ldr	r3, [pc, #504]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d05b      	beq.n	8001cfc <HAL_RCC_OscConfig+0x108>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d157      	bne.n	8001cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e242      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d106      	bne.n	8001c68 <HAL_RCC_OscConfig+0x74>
 8001c5a:	4b76      	ldr	r3, [pc, #472]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a75      	ldr	r2, [pc, #468]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e01d      	b.n	8001ca4 <HAL_RCC_OscConfig+0xb0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x98>
 8001c72:	4b70      	ldr	r3, [pc, #448]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a6f      	ldr	r2, [pc, #444]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b6d      	ldr	r3, [pc, #436]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a6c      	ldr	r2, [pc, #432]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xb0>
 8001c8c:	4b69      	ldr	r3, [pc, #420]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a68      	ldr	r2, [pc, #416]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b66      	ldr	r3, [pc, #408]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a65      	ldr	r2, [pc, #404]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fbfc 	bl	80014a8 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fbf8 	bl	80014a8 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e207      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b5b      	ldr	r3, [pc, #364]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xc0>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fbe8 	bl	80014a8 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fbe4 	bl	80014a8 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1f3      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	4b51      	ldr	r3, [pc, #324]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0xe8>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d11c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x152>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e1c7      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4937      	ldr	r1, [pc, #220]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <HAL_RCC_OscConfig+0x244>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fb9d 	bl	80014a8 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fb99 	bl	80014a8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1a8      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4925      	ldr	r1, [pc, #148]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <HAL_RCC_OscConfig+0x244>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff fb7c 	bl	80014a8 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff fb78 	bl	80014a8 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e187      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d036      	beq.n	8001e4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_RCC_OscConfig+0x248>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff fb5c 	bl	80014a8 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fb58 	bl	80014a8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e167      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x200>
 8001e12:	e01b      	b.n	8001e4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_OscConfig+0x248>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fb45 	bl	80014a8 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	e00e      	b.n	8001e40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e22:	f7ff fb41 	bl	80014a8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d907      	bls.n	8001e40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e150      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
 8001e34:	40023800 	.word	0x40023800
 8001e38:	42470000 	.word	0x42470000
 8001e3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b88      	ldr	r3, [pc, #544]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ea      	bne.n	8001e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8097 	beq.w	8001f88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b81      	ldr	r3, [pc, #516]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	4b7d      	ldr	r3, [pc, #500]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a7c      	ldr	r2, [pc, #496]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b7a      	ldr	r3, [pc, #488]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b77      	ldr	r3, [pc, #476]	; (8002068 <HAL_RCC_OscConfig+0x474>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b74      	ldr	r3, [pc, #464]	; (8002068 <HAL_RCC_OscConfig+0x474>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a73      	ldr	r2, [pc, #460]	; (8002068 <HAL_RCC_OscConfig+0x474>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fb01 	bl	80014a8 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7ff fafd 	bl	80014a8 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e10c      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x474>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x2ea>
 8001ed0:	4b64      	ldr	r3, [pc, #400]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	4a63      	ldr	r2, [pc, #396]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	; 0x70
 8001edc:	e01c      	b.n	8001f18 <HAL_RCC_OscConfig+0x324>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x30c>
 8001ee6:	4b5f      	ldr	r3, [pc, #380]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	4a5e      	ldr	r2, [pc, #376]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef2:	4b5c      	ldr	r3, [pc, #368]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	4a5b      	ldr	r2, [pc, #364]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6713      	str	r3, [r2, #112]	; 0x70
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0x324>
 8001f00:	4b58      	ldr	r3, [pc, #352]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	4a57      	ldr	r2, [pc, #348]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0c:	4b55      	ldr	r3, [pc, #340]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	4a54      	ldr	r2, [pc, #336]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f12:	f023 0304 	bic.w	r3, r3, #4
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d015      	beq.n	8001f4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7ff fac2 	bl	80014a8 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7ff fabe 	bl	80014a8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0cb      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3e:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0ee      	beq.n	8001f28 <HAL_RCC_OscConfig+0x334>
 8001f4a:	e014      	b.n	8001f76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4c:	f7ff faac 	bl	80014a8 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7ff faa8 	bl	80014a8 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e0b5      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ee      	bne.n	8001f54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4b39      	ldr	r3, [pc, #228]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	4a38      	ldr	r2, [pc, #224]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80a1 	beq.w	80020d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f92:	4b34      	ldr	r3, [pc, #208]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d05c      	beq.n	8002058 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d141      	bne.n	800202a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_RCC_OscConfig+0x478>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fa7c 	bl	80014a8 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff fa78 	bl	80014a8 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e087      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	019b      	lsls	r3, r3, #6
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	3b01      	subs	r3, #1
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	491b      	ldr	r1, [pc, #108]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_RCC_OscConfig+0x478>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7ff fa51 	bl	80014a8 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200a:	f7ff fa4d 	bl	80014a8 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e05c      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x416>
 8002028:	e054      	b.n	80020d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_RCC_OscConfig+0x478>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff fa3a 	bl	80014a8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff fa36 	bl	80014a8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e045      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_OscConfig+0x470>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x444>
 8002056:	e03d      	b.n	80020d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d107      	bne.n	8002070 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e038      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
 8002064:	40023800 	.word	0x40023800
 8002068:	40007000 	.word	0x40007000
 800206c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_OscConfig+0x4ec>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d028      	beq.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d121      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d11a      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a0:	4013      	ands	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d111      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	3b01      	subs	r3, #1
 80020ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800

080020e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0cc      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b68      	ldr	r3, [pc, #416]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d90c      	bls.n	8002120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b65      	ldr	r3, [pc, #404]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0b8      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800215a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215c:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	494d      	ldr	r1, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d044      	beq.n	8002204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d119      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e07f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e06f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e067      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f023 0203 	bic.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4934      	ldr	r1, [pc, #208]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d4:	f7ff f968 	bl	80014a8 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7ff f964 	bl	80014a8 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e04f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 020c 	and.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d20c      	bcs.n	800222c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e032      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4916      	ldr	r1, [pc, #88]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	490e      	ldr	r1, [pc, #56]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800226a:	f000 f821 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800226e:	4602      	mov	r2, r0
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	490a      	ldr	r1, [pc, #40]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	5ccb      	ldrb	r3, [r1, r3]
 800227e:	fa22 f303 	lsr.w	r3, r2, r3
 8002282:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x1c8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f8c8 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00
 80022a0:	40023800 	.word	0x40023800
 80022a4:	080037e4 	.word	0x080037e4
 80022a8:	20000064 	.word	0x20000064
 80022ac:	20000068 	.word	0x20000068

080022b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b4:	b094      	sub	sp, #80	; 0x50
 80022b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	647b      	str	r3, [r7, #68]	; 0x44
 80022bc:	2300      	movs	r3, #0
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022c0:	2300      	movs	r3, #0
 80022c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022c8:	4b79      	ldr	r3, [pc, #484]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d00d      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x40>
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	f200 80e1 	bhi.w	800249c <HAL_RCC_GetSysClockFreq+0x1ec>
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x34>
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x3a>
 80022e2:	e0db      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e4:	4b73      	ldr	r3, [pc, #460]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80022e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022e8:	e0db      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ea:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80022ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ee:	e0d8      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f0:	4b6f      	ldr	r3, [pc, #444]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022fa:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d063      	beq.n	80023ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002306:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	2200      	movs	r2, #0
 800230e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002310:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
 800231a:	2300      	movs	r3, #0
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
 800231e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002322:	4622      	mov	r2, r4
 8002324:	462b      	mov	r3, r5
 8002326:	f04f 0000 	mov.w	r0, #0
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	0159      	lsls	r1, r3, #5
 8002330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002334:	0150      	lsls	r0, r2, #5
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4621      	mov	r1, r4
 800233c:	1a51      	subs	r1, r2, r1
 800233e:	6139      	str	r1, [r7, #16]
 8002340:	4629      	mov	r1, r5
 8002342:	eb63 0301 	sbc.w	r3, r3, r1
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002354:	4659      	mov	r1, fp
 8002356:	018b      	lsls	r3, r1, #6
 8002358:	4651      	mov	r1, sl
 800235a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800235e:	4651      	mov	r1, sl
 8002360:	018a      	lsls	r2, r1, #6
 8002362:	4651      	mov	r1, sl
 8002364:	ebb2 0801 	subs.w	r8, r2, r1
 8002368:	4659      	mov	r1, fp
 800236a:	eb63 0901 	sbc.w	r9, r3, r1
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800237a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800237e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002382:	4690      	mov	r8, r2
 8002384:	4699      	mov	r9, r3
 8002386:	4623      	mov	r3, r4
 8002388:	eb18 0303 	adds.w	r3, r8, r3
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	462b      	mov	r3, r5
 8002390:	eb49 0303 	adc.w	r3, r9, r3
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023a2:	4629      	mov	r1, r5
 80023a4:	024b      	lsls	r3, r1, #9
 80023a6:	4621      	mov	r1, r4
 80023a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023ac:	4621      	mov	r1, r4
 80023ae:	024a      	lsls	r2, r1, #9
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b6:	2200      	movs	r2, #0
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023c0:	f7fd ff6e 	bl	80002a0 <__aeabi_uldivmod>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4613      	mov	r3, r2
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023cc:	e058      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	2200      	movs	r2, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	4611      	mov	r1, r2
 80023da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023de:	623b      	str	r3, [r7, #32]
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
 80023e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023e8:	4642      	mov	r2, r8
 80023ea:	464b      	mov	r3, r9
 80023ec:	f04f 0000 	mov.w	r0, #0
 80023f0:	f04f 0100 	mov.w	r1, #0
 80023f4:	0159      	lsls	r1, r3, #5
 80023f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023fa:	0150      	lsls	r0, r2, #5
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4641      	mov	r1, r8
 8002402:	ebb2 0a01 	subs.w	sl, r2, r1
 8002406:	4649      	mov	r1, r9
 8002408:	eb63 0b01 	sbc.w	fp, r3, r1
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002418:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800241c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002420:	ebb2 040a 	subs.w	r4, r2, sl
 8002424:	eb63 050b 	sbc.w	r5, r3, fp
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	00eb      	lsls	r3, r5, #3
 8002432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002436:	00e2      	lsls	r2, r4, #3
 8002438:	4614      	mov	r4, r2
 800243a:	461d      	mov	r5, r3
 800243c:	4643      	mov	r3, r8
 800243e:	18e3      	adds	r3, r4, r3
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	464b      	mov	r3, r9
 8002444:	eb45 0303 	adc.w	r3, r5, r3
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002456:	4629      	mov	r1, r5
 8002458:	028b      	lsls	r3, r1, #10
 800245a:	4621      	mov	r1, r4
 800245c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002460:	4621      	mov	r1, r4
 8002462:	028a      	lsls	r2, r1, #10
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246a:	2200      	movs	r2, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	61fa      	str	r2, [r7, #28]
 8002470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002474:	f7fd ff14 	bl	80002a0 <__aeabi_uldivmod>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4613      	mov	r3, r2
 800247e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	3301      	adds	r3, #1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002490:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800249a:	e002      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800249e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3750      	adds	r7, #80	; 0x50
 80024a8:	46bd      	mov	sp, r7
 80024aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	00f42400 	.word	0x00f42400
 80024b8:	007a1200 	.word	0x007a1200

080024bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000064 	.word	0x20000064

080024d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024d8:	f7ff fff0 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0a9b      	lsrs	r3, r3, #10
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	080037f4 	.word	0x080037f4

080024fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002500:	f7ff ffdc 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0b5b      	lsrs	r3, r3, #13
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4903      	ldr	r1, [pc, #12]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	080037f4 	.word	0x080037f4

08002524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e03f      	b.n	80025b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff faa8 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2224      	movs	r2, #36	; 0x24
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f929 	bl	80027c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800257c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800258c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800259c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b08a      	sub	sp, #40	; 0x28
 80025c2:	af02      	add	r7, sp, #8
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d17c      	bne.n	80026d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_UART_Transmit+0x2c>
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e075      	b.n	80026da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_UART_Transmit+0x3e>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e06e      	b.n	80026da <HAL_UART_Transmit+0x11c>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2221      	movs	r2, #33	; 0x21
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002612:	f7fe ff49 	bl	80014a8 <HAL_GetTick>
 8002616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262c:	d108      	bne.n	8002640 <HAL_UART_Transmit+0x82>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	e003      	b.n	8002648 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002650:	e02a      	b.n	80026a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2200      	movs	r2, #0
 800265a:	2180      	movs	r1, #128	; 0x80
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f840 	bl	80026e2 <UART_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e036      	b.n	80026da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10b      	bne.n	800268a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	3302      	adds	r3, #2
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	e007      	b.n	800269a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3301      	adds	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1cf      	bne.n	8002652 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2140      	movs	r1, #64	; 0x40
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f810 	bl	80026e2 <UART_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e006      	b.n	80026da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	e000      	b.n	80026da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
  }
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b090      	sub	sp, #64	; 0x40
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f2:	e050      	b.n	8002796 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fa:	d04c      	beq.n	8002796 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <UART_WaitOnFlagUntilTimeout+0x30>
 8002702:	f7fe fed1 	bl	80014a8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800270e:	429a      	cmp	r2, r3
 8002710:	d241      	bcs.n	8002796 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	e853 3f00 	ldrex	r3, [r3]
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	330c      	adds	r3, #12
 8002730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002732:	637a      	str	r2, [r7, #52]	; 0x34
 8002734:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800273a:	e841 2300 	strex	r3, r2, [r1]
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1e5      	bne.n	8002712 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3314      	adds	r3, #20
 800274c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	613b      	str	r3, [r7, #16]
   return(result);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	63bb      	str	r3, [r7, #56]	; 0x38
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3314      	adds	r3, #20
 8002764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002766:	623a      	str	r2, [r7, #32]
 8002768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276a:	69f9      	ldr	r1, [r7, #28]
 800276c:	6a3a      	ldr	r2, [r7, #32]
 800276e:	e841 2300 	strex	r3, r2, [r1]
 8002772:	61bb      	str	r3, [r7, #24]
   return(result);
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e5      	bne.n	8002746 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e00f      	b.n	80027b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4013      	ands	r3, r2
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	bf0c      	ite	eq
 80027a6:	2301      	moveq	r3, #1
 80027a8:	2300      	movne	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d09f      	beq.n	80026f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3740      	adds	r7, #64	; 0x40
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c4:	b0c0      	sub	sp, #256	; 0x100
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027dc:	68d9      	ldr	r1, [r3, #12]
 80027de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	ea40 0301 	orr.w	r3, r0, r1
 80027e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	431a      	orrs	r2, r3
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002818:	f021 010c 	bic.w	r1, r1, #12
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002826:	430b      	orrs	r3, r1
 8002828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800282a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283a:	6999      	ldr	r1, [r3, #24]
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	ea40 0301 	orr.w	r3, r0, r1
 8002846:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4b8f      	ldr	r3, [pc, #572]	; (8002a8c <UART_SetConfig+0x2cc>)
 8002850:	429a      	cmp	r2, r3
 8002852:	d005      	beq.n	8002860 <UART_SetConfig+0xa0>
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4b8d      	ldr	r3, [pc, #564]	; (8002a90 <UART_SetConfig+0x2d0>)
 800285c:	429a      	cmp	r2, r3
 800285e:	d104      	bne.n	800286a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002860:	f7ff fe4c 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 8002864:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002868:	e003      	b.n	8002872 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800286a:	f7ff fe33 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 800286e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287c:	f040 810c 	bne.w	8002a98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002884:	2200      	movs	r2, #0
 8002886:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800288a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800288e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002892:	4622      	mov	r2, r4
 8002894:	462b      	mov	r3, r5
 8002896:	1891      	adds	r1, r2, r2
 8002898:	65b9      	str	r1, [r7, #88]	; 0x58
 800289a:	415b      	adcs	r3, r3
 800289c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800289e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028a2:	4621      	mov	r1, r4
 80028a4:	eb12 0801 	adds.w	r8, r2, r1
 80028a8:	4629      	mov	r1, r5
 80028aa:	eb43 0901 	adc.w	r9, r3, r1
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028c2:	4690      	mov	r8, r2
 80028c4:	4699      	mov	r9, r3
 80028c6:	4623      	mov	r3, r4
 80028c8:	eb18 0303 	adds.w	r3, r8, r3
 80028cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028d0:	462b      	mov	r3, r5
 80028d2:	eb49 0303 	adc.w	r3, r9, r3
 80028d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028ee:	460b      	mov	r3, r1
 80028f0:	18db      	adds	r3, r3, r3
 80028f2:	653b      	str	r3, [r7, #80]	; 0x50
 80028f4:	4613      	mov	r3, r2
 80028f6:	eb42 0303 	adc.w	r3, r2, r3
 80028fa:	657b      	str	r3, [r7, #84]	; 0x54
 80028fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002900:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002904:	f7fd fccc 	bl	80002a0 <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4b61      	ldr	r3, [pc, #388]	; (8002a94 <UART_SetConfig+0x2d4>)
 800290e:	fba3 2302 	umull	r2, r3, r3, r2
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	011c      	lsls	r4, r3, #4
 8002916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800291a:	2200      	movs	r2, #0
 800291c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002920:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002924:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002928:	4642      	mov	r2, r8
 800292a:	464b      	mov	r3, r9
 800292c:	1891      	adds	r1, r2, r2
 800292e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002930:	415b      	adcs	r3, r3
 8002932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002938:	4641      	mov	r1, r8
 800293a:	eb12 0a01 	adds.w	sl, r2, r1
 800293e:	4649      	mov	r1, r9
 8002940:	eb43 0b01 	adc.w	fp, r3, r1
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002958:	4692      	mov	sl, r2
 800295a:	469b      	mov	fp, r3
 800295c:	4643      	mov	r3, r8
 800295e:	eb1a 0303 	adds.w	r3, sl, r3
 8002962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002966:	464b      	mov	r3, r9
 8002968:	eb4b 0303 	adc.w	r3, fp, r3
 800296c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800297c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002984:	460b      	mov	r3, r1
 8002986:	18db      	adds	r3, r3, r3
 8002988:	643b      	str	r3, [r7, #64]	; 0x40
 800298a:	4613      	mov	r3, r2
 800298c:	eb42 0303 	adc.w	r3, r2, r3
 8002990:	647b      	str	r3, [r7, #68]	; 0x44
 8002992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002996:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800299a:	f7fd fc81 	bl	80002a0 <__aeabi_uldivmod>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4611      	mov	r1, r2
 80029a4:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <UART_SetConfig+0x2d4>)
 80029a6:	fba3 2301 	umull	r2, r3, r3, r1
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2264      	movs	r2, #100	; 0x64
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	1acb      	subs	r3, r1, r3
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029ba:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <UART_SetConfig+0x2d4>)
 80029bc:	fba3 2302 	umull	r2, r3, r3, r2
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029c8:	441c      	add	r4, r3
 80029ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029dc:	4642      	mov	r2, r8
 80029de:	464b      	mov	r3, r9
 80029e0:	1891      	adds	r1, r2, r2
 80029e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80029e4:	415b      	adcs	r3, r3
 80029e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029ec:	4641      	mov	r1, r8
 80029ee:	1851      	adds	r1, r2, r1
 80029f0:	6339      	str	r1, [r7, #48]	; 0x30
 80029f2:	4649      	mov	r1, r9
 80029f4:	414b      	adcs	r3, r1
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a04:	4659      	mov	r1, fp
 8002a06:	00cb      	lsls	r3, r1, #3
 8002a08:	4651      	mov	r1, sl
 8002a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a0e:	4651      	mov	r1, sl
 8002a10:	00ca      	lsls	r2, r1, #3
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	4642      	mov	r2, r8
 8002a1a:	189b      	adds	r3, r3, r2
 8002a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a20:	464b      	mov	r3, r9
 8002a22:	460a      	mov	r2, r1
 8002a24:	eb42 0303 	adc.w	r3, r2, r3
 8002a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a40:	460b      	mov	r3, r1
 8002a42:	18db      	adds	r3, r3, r3
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a46:	4613      	mov	r3, r2
 8002a48:	eb42 0303 	adc.w	r3, r2, r3
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a56:	f7fd fc23 	bl	80002a0 <__aeabi_uldivmod>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <UART_SetConfig+0x2d4>)
 8002a60:	fba3 1302 	umull	r1, r3, r3, r2
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	2164      	movs	r1, #100	; 0x64
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	3332      	adds	r3, #50	; 0x32
 8002a72:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <UART_SetConfig+0x2d4>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	f003 0207 	and.w	r2, r3, #7
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4422      	add	r2, r4
 8002a86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a88:	e105      	b.n	8002c96 <UART_SetConfig+0x4d6>
 8002a8a:	bf00      	nop
 8002a8c:	40011000 	.word	0x40011000
 8002a90:	40011400 	.word	0x40011400
 8002a94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002aa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002aa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002aaa:	4642      	mov	r2, r8
 8002aac:	464b      	mov	r3, r9
 8002aae:	1891      	adds	r1, r2, r2
 8002ab0:	6239      	str	r1, [r7, #32]
 8002ab2:	415b      	adcs	r3, r3
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aba:	4641      	mov	r1, r8
 8002abc:	1854      	adds	r4, r2, r1
 8002abe:	4649      	mov	r1, r9
 8002ac0:	eb43 0501 	adc.w	r5, r3, r1
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	00eb      	lsls	r3, r5, #3
 8002ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ad2:	00e2      	lsls	r2, r4, #3
 8002ad4:	4614      	mov	r4, r2
 8002ad6:	461d      	mov	r5, r3
 8002ad8:	4643      	mov	r3, r8
 8002ada:	18e3      	adds	r3, r4, r3
 8002adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ae0:	464b      	mov	r3, r9
 8002ae2:	eb45 0303 	adc.w	r3, r5, r3
 8002ae6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002af6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b06:	4629      	mov	r1, r5
 8002b08:	008b      	lsls	r3, r1, #2
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b10:	4621      	mov	r1, r4
 8002b12:	008a      	lsls	r2, r1, #2
 8002b14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b18:	f7fd fbc2 	bl	80002a0 <__aeabi_uldivmod>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4b60      	ldr	r3, [pc, #384]	; (8002ca4 <UART_SetConfig+0x4e4>)
 8002b22:	fba3 2302 	umull	r2, r3, r3, r2
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	011c      	lsls	r4, r3, #4
 8002b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	1891      	adds	r1, r2, r2
 8002b42:	61b9      	str	r1, [r7, #24]
 8002b44:	415b      	adcs	r3, r3
 8002b46:	61fb      	str	r3, [r7, #28]
 8002b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	1851      	adds	r1, r2, r1
 8002b50:	6139      	str	r1, [r7, #16]
 8002b52:	4649      	mov	r1, r9
 8002b54:	414b      	adcs	r3, r1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b64:	4659      	mov	r1, fp
 8002b66:	00cb      	lsls	r3, r1, #3
 8002b68:	4651      	mov	r1, sl
 8002b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6e:	4651      	mov	r1, sl
 8002b70:	00ca      	lsls	r2, r1, #3
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	4642      	mov	r2, r8
 8002b7a:	189b      	adds	r3, r3, r2
 8002b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b80:	464b      	mov	r3, r9
 8002b82:	460a      	mov	r2, r1
 8002b84:	eb42 0303 	adc.w	r3, r2, r3
 8002b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	008b      	lsls	r3, r1, #2
 8002ba8:	4641      	mov	r1, r8
 8002baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bae:	4641      	mov	r1, r8
 8002bb0:	008a      	lsls	r2, r1, #2
 8002bb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002bb6:	f7fd fb73 	bl	80002a0 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <UART_SetConfig+0x4e4>)
 8002bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	2164      	movs	r1, #100	; 0x64
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	3332      	adds	r3, #50	; 0x32
 8002bd2:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <UART_SetConfig+0x4e4>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bde:	441c      	add	r4, r3
 8002be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002be4:	2200      	movs	r2, #0
 8002be6:	673b      	str	r3, [r7, #112]	; 0x70
 8002be8:	677a      	str	r2, [r7, #116]	; 0x74
 8002bea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bee:	4642      	mov	r2, r8
 8002bf0:	464b      	mov	r3, r9
 8002bf2:	1891      	adds	r1, r2, r2
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	415b      	adcs	r3, r3
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bfe:	4641      	mov	r1, r8
 8002c00:	1851      	adds	r1, r2, r1
 8002c02:	6039      	str	r1, [r7, #0]
 8002c04:	4649      	mov	r1, r9
 8002c06:	414b      	adcs	r3, r1
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c16:	4659      	mov	r1, fp
 8002c18:	00cb      	lsls	r3, r1, #3
 8002c1a:	4651      	mov	r1, sl
 8002c1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c20:	4651      	mov	r1, sl
 8002c22:	00ca      	lsls	r2, r1, #3
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4642      	mov	r2, r8
 8002c2c:	189b      	adds	r3, r3, r2
 8002c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c30:	464b      	mov	r3, r9
 8002c32:	460a      	mov	r2, r1
 8002c34:	eb42 0303 	adc.w	r3, r2, r3
 8002c38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	663b      	str	r3, [r7, #96]	; 0x60
 8002c44:	667a      	str	r2, [r7, #100]	; 0x64
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c52:	4649      	mov	r1, r9
 8002c54:	008b      	lsls	r3, r1, #2
 8002c56:	4641      	mov	r1, r8
 8002c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	008a      	lsls	r2, r1, #2
 8002c60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c64:	f7fd fb1c 	bl	80002a0 <__aeabi_uldivmod>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <UART_SetConfig+0x4e4>)
 8002c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2164      	movs	r1, #100	; 0x64
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	3332      	adds	r3, #50	; 0x32
 8002c80:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <UART_SetConfig+0x4e4>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4422      	add	r2, r4
 8002c94:	609a      	str	r2, [r3, #8]
}
 8002c96:	bf00      	nop
 8002c98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca2:	bf00      	nop
 8002ca4:	51eb851f 	.word	0x51eb851f

08002ca8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8002cac:	f7fe fb9c 	bl	80013e8 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8002cb0:	f000 f822 	bl	8002cf8 <SystemClock_Config>

  /* Initialize BSP PB for BUTTON_USER */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fe fa90 	bl	80011dc <BSP_PB_Init>

  /* Initialize BSP Led for LED1 and LED2*/
  BSP_LED_Init(LED1);
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f7fe fa23 	bl	8001108 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f7fe fa20 	bl	8001108 <BSP_LED_Init>

  /*Inicializa los puertos GPIO*/
  gpioDisplay_init();
 8002cc8:	f7fe f834 	bl	8000d34 <gpioDisplay_init>
  gpioButton_init();
 8002ccc:	f7fe f8b2 	bl	8000e34 <gpioButton_init>

  /*Inicializa la MEF para validacion de pulsaciones*/
  debounceFSM_init();
 8002cd0:	f7fd fc68 	bl	80005a4 <debounceFSM_init>

  /*Inicializa la MEF para display*/
  displayFSM_init();
 8002cd4:	f7fd fe1a 	bl	800090c <displayFSM_init>

  /* Infinite loop */
  while (1)
  {
	  /*Actualiza los estados de la MEF de validación de pulsaciones para los pulsadores UP y DOWN*/
	  debounceFSM_update(PULSADOR_UP);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fd fc7d 	bl	80005d8 <debounceFSM_update>
	  debounceFSM_update(PULSADOR_DOWN);
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f7fd fc7a 	bl	80005d8 <debounceFSM_update>

	  /*Actualiza el estado de la MEF del display*/
	  displayFSM_update();
 8002ce4:	f7fd fe2a 	bl	800093c <displayFSM_update>

	  /*Setea los puertos GPIO*/
	  gpioDisplay_write(getStateDisplay());
 8002ce8:	f7fd ffce 	bl	8000c88 <getStateDisplay>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe f8e8 	bl	8000ec4 <gpioDisplay_write>
	  debounceFSM_update(PULSADOR_UP);
 8002cf4:	e7f0      	b.n	8002cd8 <main+0x30>
	...

08002cf8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b094      	sub	sp, #80	; 0x50
 8002cfc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	4b2c      	ldr	r3, [pc, #176]	; (8002db4 <SystemClock_Config+0xbc>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a2b      	ldr	r2, [pc, #172]	; (8002db4 <SystemClock_Config+0xbc>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <SystemClock_Config+0xbc>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <SystemClock_Config+0xc0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a25      	ldr	r2, [pc, #148]	; (8002db8 <SystemClock_Config+0xc0>)
 8002d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <SystemClock_Config+0xc0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d36:	2301      	movs	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d3a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002d3e:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d40:	2302      	movs	r3, #2
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002d4e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d54:	2302      	movs	r3, #2
 8002d56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d58:	2307      	movs	r3, #7
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d5c:	f107 030c 	add.w	r3, r7, #12
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe ff47 	bl	8001bf4 <HAL_RCC_OscConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002d6c:	f000 f826 	bl	8002dbc <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d70:	f7fe fef0 	bl	8001b54 <HAL_PWREx_EnableOverDrive>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8002d7a:	f000 f81f 	bl	8002dbc <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002d7e:	230f      	movs	r3, #15
 8002d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d82:	2302      	movs	r3, #2
 8002d84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d86:	2300      	movs	r3, #0
 8002d88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8002d8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d9a:	2105      	movs	r1, #5
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff f9a1 	bl	80020e4 <HAL_RCC_ClockConfig>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002da8:	f000 f808 	bl	8002dbc <Error_Handler>
  }
}
 8002dac:	bf00      	nop
 8002dae:	3750      	adds	r7, #80	; 0x50
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40007000 	.word	0x40007000

08002dbc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f7fe f9f1 	bl	80011a8 <BSP_LED_On>
  while (1)
 8002dc6:	e7fe      	b.n	8002dc6 <Error_Handler+0xa>

08002dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e00 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002dcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dce:	e003      	b.n	8002dd8 <LoopCopyDataInit>

08002dd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002dd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002dd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dd6:	3104      	adds	r1, #4

08002dd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dd8:	480b      	ldr	r0, [pc, #44]	; (8002e08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ddc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002de0:	d3f6      	bcc.n	8002dd0 <CopyDataInit>
  ldr  r2, =_sbss
 8002de2:	4a0b      	ldr	r2, [pc, #44]	; (8002e10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002de4:	e002      	b.n	8002dec <LoopFillZerobss>

08002de6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002de6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002de8:	f842 3b04 	str.w	r3, [r2], #4

08002dec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002df0:	d3f9      	bcc.n	8002de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002df2:	f7fe fa5f 	bl	80012b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002df6:	f000 f817 	bl	8002e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dfa:	f7ff ff55 	bl	8002ca8 <main>
  bx  lr    
 8002dfe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e00:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002e04:	08003840 	.word	0x08003840
  ldr  r0, =_sdata
 8002e08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e0c:	200000d4 	.word	0x200000d4
  ldr  r2, =_sbss
 8002e10:	200000d4 	.word	0x200000d4
  ldr  r3, = _ebss
 8002e14:	20000170 	.word	0x20000170

08002e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e18:	e7fe      	b.n	8002e18 <ADC_IRQHandler>
	...

08002e1c <__errno>:
 8002e1c:	4b01      	ldr	r3, [pc, #4]	; (8002e24 <__errno+0x8>)
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000070 	.word	0x20000070

08002e28 <__libc_init_array>:
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	4d0d      	ldr	r5, [pc, #52]	; (8002e60 <__libc_init_array+0x38>)
 8002e2c:	4c0d      	ldr	r4, [pc, #52]	; (8002e64 <__libc_init_array+0x3c>)
 8002e2e:	1b64      	subs	r4, r4, r5
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	2600      	movs	r6, #0
 8002e34:	42a6      	cmp	r6, r4
 8002e36:	d109      	bne.n	8002e4c <__libc_init_array+0x24>
 8002e38:	4d0b      	ldr	r5, [pc, #44]	; (8002e68 <__libc_init_array+0x40>)
 8002e3a:	4c0c      	ldr	r4, [pc, #48]	; (8002e6c <__libc_init_array+0x44>)
 8002e3c:	f000 fc86 	bl	800374c <_init>
 8002e40:	1b64      	subs	r4, r4, r5
 8002e42:	10a4      	asrs	r4, r4, #2
 8002e44:	2600      	movs	r6, #0
 8002e46:	42a6      	cmp	r6, r4
 8002e48:	d105      	bne.n	8002e56 <__libc_init_array+0x2e>
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e50:	4798      	blx	r3
 8002e52:	3601      	adds	r6, #1
 8002e54:	e7ee      	b.n	8002e34 <__libc_init_array+0xc>
 8002e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e5a:	4798      	blx	r3
 8002e5c:	3601      	adds	r6, #1
 8002e5e:	e7f2      	b.n	8002e46 <__libc_init_array+0x1e>
 8002e60:	08003838 	.word	0x08003838
 8002e64:	08003838 	.word	0x08003838
 8002e68:	08003838 	.word	0x08003838
 8002e6c:	0800383c 	.word	0x0800383c

08002e70 <siprintf>:
 8002e70:	b40e      	push	{r1, r2, r3}
 8002e72:	b500      	push	{lr}
 8002e74:	b09c      	sub	sp, #112	; 0x70
 8002e76:	ab1d      	add	r3, sp, #116	; 0x74
 8002e78:	9002      	str	r0, [sp, #8]
 8002e7a:	9006      	str	r0, [sp, #24]
 8002e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e80:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <siprintf+0x38>)
 8002e82:	9107      	str	r1, [sp, #28]
 8002e84:	9104      	str	r1, [sp, #16]
 8002e86:	4909      	ldr	r1, [pc, #36]	; (8002eac <siprintf+0x3c>)
 8002e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e8c:	9105      	str	r1, [sp, #20]
 8002e8e:	6800      	ldr	r0, [r0, #0]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	a902      	add	r1, sp, #8
 8002e94:	f000 f868 	bl	8002f68 <_svfiprintf_r>
 8002e98:	9b02      	ldr	r3, [sp, #8]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	b01c      	add	sp, #112	; 0x70
 8002ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ea4:	b003      	add	sp, #12
 8002ea6:	4770      	bx	lr
 8002ea8:	20000070 	.word	0x20000070
 8002eac:	ffff0208 	.word	0xffff0208

08002eb0 <__ssputs_r>:
 8002eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb4:	688e      	ldr	r6, [r1, #8]
 8002eb6:	429e      	cmp	r6, r3
 8002eb8:	4682      	mov	sl, r0
 8002eba:	460c      	mov	r4, r1
 8002ebc:	4690      	mov	r8, r2
 8002ebe:	461f      	mov	r7, r3
 8002ec0:	d838      	bhi.n	8002f34 <__ssputs_r+0x84>
 8002ec2:	898a      	ldrh	r2, [r1, #12]
 8002ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ec8:	d032      	beq.n	8002f30 <__ssputs_r+0x80>
 8002eca:	6825      	ldr	r5, [r4, #0]
 8002ecc:	6909      	ldr	r1, [r1, #16]
 8002ece:	eba5 0901 	sub.w	r9, r5, r1
 8002ed2:	6965      	ldr	r5, [r4, #20]
 8002ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002edc:	3301      	adds	r3, #1
 8002ede:	444b      	add	r3, r9
 8002ee0:	106d      	asrs	r5, r5, #1
 8002ee2:	429d      	cmp	r5, r3
 8002ee4:	bf38      	it	cc
 8002ee6:	461d      	movcc	r5, r3
 8002ee8:	0553      	lsls	r3, r2, #21
 8002eea:	d531      	bpl.n	8002f50 <__ssputs_r+0xa0>
 8002eec:	4629      	mov	r1, r5
 8002eee:	f000 fb63 	bl	80035b8 <_malloc_r>
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	b950      	cbnz	r0, 8002f0c <__ssputs_r+0x5c>
 8002ef6:	230c      	movs	r3, #12
 8002ef8:	f8ca 3000 	str.w	r3, [sl]
 8002efc:	89a3      	ldrh	r3, [r4, #12]
 8002efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f02:	81a3      	strh	r3, [r4, #12]
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f0c:	6921      	ldr	r1, [r4, #16]
 8002f0e:	464a      	mov	r2, r9
 8002f10:	f000 fabe 	bl	8003490 <memcpy>
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1e:	81a3      	strh	r3, [r4, #12]
 8002f20:	6126      	str	r6, [r4, #16]
 8002f22:	6165      	str	r5, [r4, #20]
 8002f24:	444e      	add	r6, r9
 8002f26:	eba5 0509 	sub.w	r5, r5, r9
 8002f2a:	6026      	str	r6, [r4, #0]
 8002f2c:	60a5      	str	r5, [r4, #8]
 8002f2e:	463e      	mov	r6, r7
 8002f30:	42be      	cmp	r6, r7
 8002f32:	d900      	bls.n	8002f36 <__ssputs_r+0x86>
 8002f34:	463e      	mov	r6, r7
 8002f36:	6820      	ldr	r0, [r4, #0]
 8002f38:	4632      	mov	r2, r6
 8002f3a:	4641      	mov	r1, r8
 8002f3c:	f000 fab6 	bl	80034ac <memmove>
 8002f40:	68a3      	ldr	r3, [r4, #8]
 8002f42:	1b9b      	subs	r3, r3, r6
 8002f44:	60a3      	str	r3, [r4, #8]
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	4433      	add	r3, r6
 8002f4a:	6023      	str	r3, [r4, #0]
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	e7db      	b.n	8002f08 <__ssputs_r+0x58>
 8002f50:	462a      	mov	r2, r5
 8002f52:	f000 fba5 	bl	80036a0 <_realloc_r>
 8002f56:	4606      	mov	r6, r0
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d1e1      	bne.n	8002f20 <__ssputs_r+0x70>
 8002f5c:	6921      	ldr	r1, [r4, #16]
 8002f5e:	4650      	mov	r0, sl
 8002f60:	f000 fabe 	bl	80034e0 <_free_r>
 8002f64:	e7c7      	b.n	8002ef6 <__ssputs_r+0x46>
	...

08002f68 <_svfiprintf_r>:
 8002f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6c:	4698      	mov	r8, r3
 8002f6e:	898b      	ldrh	r3, [r1, #12]
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	b09d      	sub	sp, #116	; 0x74
 8002f74:	4607      	mov	r7, r0
 8002f76:	460d      	mov	r5, r1
 8002f78:	4614      	mov	r4, r2
 8002f7a:	d50e      	bpl.n	8002f9a <_svfiprintf_r+0x32>
 8002f7c:	690b      	ldr	r3, [r1, #16]
 8002f7e:	b963      	cbnz	r3, 8002f9a <_svfiprintf_r+0x32>
 8002f80:	2140      	movs	r1, #64	; 0x40
 8002f82:	f000 fb19 	bl	80035b8 <_malloc_r>
 8002f86:	6028      	str	r0, [r5, #0]
 8002f88:	6128      	str	r0, [r5, #16]
 8002f8a:	b920      	cbnz	r0, 8002f96 <_svfiprintf_r+0x2e>
 8002f8c:	230c      	movs	r3, #12
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	e0d1      	b.n	800313a <_svfiprintf_r+0x1d2>
 8002f96:	2340      	movs	r3, #64	; 0x40
 8002f98:	616b      	str	r3, [r5, #20]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fa8:	2330      	movs	r3, #48	; 0x30
 8002faa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003154 <_svfiprintf_r+0x1ec>
 8002fae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fb2:	f04f 0901 	mov.w	r9, #1
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	469a      	mov	sl, r3
 8002fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fbe:	b10a      	cbz	r2, 8002fc4 <_svfiprintf_r+0x5c>
 8002fc0:	2a25      	cmp	r2, #37	; 0x25
 8002fc2:	d1f9      	bne.n	8002fb8 <_svfiprintf_r+0x50>
 8002fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8002fc8:	d00b      	beq.n	8002fe2 <_svfiprintf_r+0x7a>
 8002fca:	465b      	mov	r3, fp
 8002fcc:	4622      	mov	r2, r4
 8002fce:	4629      	mov	r1, r5
 8002fd0:	4638      	mov	r0, r7
 8002fd2:	f7ff ff6d 	bl	8002eb0 <__ssputs_r>
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	f000 80aa 	beq.w	8003130 <_svfiprintf_r+0x1c8>
 8002fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fde:	445a      	add	r2, fp
 8002fe0:	9209      	str	r2, [sp, #36]	; 0x24
 8002fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80a2 	beq.w	8003130 <_svfiprintf_r+0x1c8>
 8002fec:	2300      	movs	r3, #0
 8002fee:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ff6:	f10a 0a01 	add.w	sl, sl, #1
 8002ffa:	9304      	str	r3, [sp, #16]
 8002ffc:	9307      	str	r3, [sp, #28]
 8002ffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003002:	931a      	str	r3, [sp, #104]	; 0x68
 8003004:	4654      	mov	r4, sl
 8003006:	2205      	movs	r2, #5
 8003008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800300c:	4851      	ldr	r0, [pc, #324]	; (8003154 <_svfiprintf_r+0x1ec>)
 800300e:	f7fd f8f7 	bl	8000200 <memchr>
 8003012:	9a04      	ldr	r2, [sp, #16]
 8003014:	b9d8      	cbnz	r0, 800304e <_svfiprintf_r+0xe6>
 8003016:	06d0      	lsls	r0, r2, #27
 8003018:	bf44      	itt	mi
 800301a:	2320      	movmi	r3, #32
 800301c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003020:	0711      	lsls	r1, r2, #28
 8003022:	bf44      	itt	mi
 8003024:	232b      	movmi	r3, #43	; 0x2b
 8003026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800302a:	f89a 3000 	ldrb.w	r3, [sl]
 800302e:	2b2a      	cmp	r3, #42	; 0x2a
 8003030:	d015      	beq.n	800305e <_svfiprintf_r+0xf6>
 8003032:	9a07      	ldr	r2, [sp, #28]
 8003034:	4654      	mov	r4, sl
 8003036:	2000      	movs	r0, #0
 8003038:	f04f 0c0a 	mov.w	ip, #10
 800303c:	4621      	mov	r1, r4
 800303e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003042:	3b30      	subs	r3, #48	; 0x30
 8003044:	2b09      	cmp	r3, #9
 8003046:	d94e      	bls.n	80030e6 <_svfiprintf_r+0x17e>
 8003048:	b1b0      	cbz	r0, 8003078 <_svfiprintf_r+0x110>
 800304a:	9207      	str	r2, [sp, #28]
 800304c:	e014      	b.n	8003078 <_svfiprintf_r+0x110>
 800304e:	eba0 0308 	sub.w	r3, r0, r8
 8003052:	fa09 f303 	lsl.w	r3, r9, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	9304      	str	r3, [sp, #16]
 800305a:	46a2      	mov	sl, r4
 800305c:	e7d2      	b.n	8003004 <_svfiprintf_r+0x9c>
 800305e:	9b03      	ldr	r3, [sp, #12]
 8003060:	1d19      	adds	r1, r3, #4
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	9103      	str	r1, [sp, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	bfbb      	ittet	lt
 800306a:	425b      	neglt	r3, r3
 800306c:	f042 0202 	orrlt.w	r2, r2, #2
 8003070:	9307      	strge	r3, [sp, #28]
 8003072:	9307      	strlt	r3, [sp, #28]
 8003074:	bfb8      	it	lt
 8003076:	9204      	strlt	r2, [sp, #16]
 8003078:	7823      	ldrb	r3, [r4, #0]
 800307a:	2b2e      	cmp	r3, #46	; 0x2e
 800307c:	d10c      	bne.n	8003098 <_svfiprintf_r+0x130>
 800307e:	7863      	ldrb	r3, [r4, #1]
 8003080:	2b2a      	cmp	r3, #42	; 0x2a
 8003082:	d135      	bne.n	80030f0 <_svfiprintf_r+0x188>
 8003084:	9b03      	ldr	r3, [sp, #12]
 8003086:	1d1a      	adds	r2, r3, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	9203      	str	r2, [sp, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	bfb8      	it	lt
 8003090:	f04f 33ff 	movlt.w	r3, #4294967295
 8003094:	3402      	adds	r4, #2
 8003096:	9305      	str	r3, [sp, #20]
 8003098:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003164 <_svfiprintf_r+0x1fc>
 800309c:	7821      	ldrb	r1, [r4, #0]
 800309e:	2203      	movs	r2, #3
 80030a0:	4650      	mov	r0, sl
 80030a2:	f7fd f8ad 	bl	8000200 <memchr>
 80030a6:	b140      	cbz	r0, 80030ba <_svfiprintf_r+0x152>
 80030a8:	2340      	movs	r3, #64	; 0x40
 80030aa:	eba0 000a 	sub.w	r0, r0, sl
 80030ae:	fa03 f000 	lsl.w	r0, r3, r0
 80030b2:	9b04      	ldr	r3, [sp, #16]
 80030b4:	4303      	orrs	r3, r0
 80030b6:	3401      	adds	r4, #1
 80030b8:	9304      	str	r3, [sp, #16]
 80030ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030be:	4826      	ldr	r0, [pc, #152]	; (8003158 <_svfiprintf_r+0x1f0>)
 80030c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030c4:	2206      	movs	r2, #6
 80030c6:	f7fd f89b 	bl	8000200 <memchr>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d038      	beq.n	8003140 <_svfiprintf_r+0x1d8>
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <_svfiprintf_r+0x1f4>)
 80030d0:	bb1b      	cbnz	r3, 800311a <_svfiprintf_r+0x1b2>
 80030d2:	9b03      	ldr	r3, [sp, #12]
 80030d4:	3307      	adds	r3, #7
 80030d6:	f023 0307 	bic.w	r3, r3, #7
 80030da:	3308      	adds	r3, #8
 80030dc:	9303      	str	r3, [sp, #12]
 80030de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030e0:	4433      	add	r3, r6
 80030e2:	9309      	str	r3, [sp, #36]	; 0x24
 80030e4:	e767      	b.n	8002fb6 <_svfiprintf_r+0x4e>
 80030e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80030ea:	460c      	mov	r4, r1
 80030ec:	2001      	movs	r0, #1
 80030ee:	e7a5      	b.n	800303c <_svfiprintf_r+0xd4>
 80030f0:	2300      	movs	r3, #0
 80030f2:	3401      	adds	r4, #1
 80030f4:	9305      	str	r3, [sp, #20]
 80030f6:	4619      	mov	r1, r3
 80030f8:	f04f 0c0a 	mov.w	ip, #10
 80030fc:	4620      	mov	r0, r4
 80030fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003102:	3a30      	subs	r2, #48	; 0x30
 8003104:	2a09      	cmp	r2, #9
 8003106:	d903      	bls.n	8003110 <_svfiprintf_r+0x1a8>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0c5      	beq.n	8003098 <_svfiprintf_r+0x130>
 800310c:	9105      	str	r1, [sp, #20]
 800310e:	e7c3      	b.n	8003098 <_svfiprintf_r+0x130>
 8003110:	fb0c 2101 	mla	r1, ip, r1, r2
 8003114:	4604      	mov	r4, r0
 8003116:	2301      	movs	r3, #1
 8003118:	e7f0      	b.n	80030fc <_svfiprintf_r+0x194>
 800311a:	ab03      	add	r3, sp, #12
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	462a      	mov	r2, r5
 8003120:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <_svfiprintf_r+0x1f8>)
 8003122:	a904      	add	r1, sp, #16
 8003124:	4638      	mov	r0, r7
 8003126:	f3af 8000 	nop.w
 800312a:	1c42      	adds	r2, r0, #1
 800312c:	4606      	mov	r6, r0
 800312e:	d1d6      	bne.n	80030de <_svfiprintf_r+0x176>
 8003130:	89ab      	ldrh	r3, [r5, #12]
 8003132:	065b      	lsls	r3, r3, #25
 8003134:	f53f af2c 	bmi.w	8002f90 <_svfiprintf_r+0x28>
 8003138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800313a:	b01d      	add	sp, #116	; 0x74
 800313c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003140:	ab03      	add	r3, sp, #12
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	462a      	mov	r2, r5
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <_svfiprintf_r+0x1f8>)
 8003148:	a904      	add	r1, sp, #16
 800314a:	4638      	mov	r0, r7
 800314c:	f000 f87a 	bl	8003244 <_printf_i>
 8003150:	e7eb      	b.n	800312a <_svfiprintf_r+0x1c2>
 8003152:	bf00      	nop
 8003154:	080037fc 	.word	0x080037fc
 8003158:	08003806 	.word	0x08003806
 800315c:	00000000 	.word	0x00000000
 8003160:	08002eb1 	.word	0x08002eb1
 8003164:	08003802 	.word	0x08003802

08003168 <_printf_common>:
 8003168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800316c:	4616      	mov	r6, r2
 800316e:	4699      	mov	r9, r3
 8003170:	688a      	ldr	r2, [r1, #8]
 8003172:	690b      	ldr	r3, [r1, #16]
 8003174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003178:	4293      	cmp	r3, r2
 800317a:	bfb8      	it	lt
 800317c:	4613      	movlt	r3, r2
 800317e:	6033      	str	r3, [r6, #0]
 8003180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003184:	4607      	mov	r7, r0
 8003186:	460c      	mov	r4, r1
 8003188:	b10a      	cbz	r2, 800318e <_printf_common+0x26>
 800318a:	3301      	adds	r3, #1
 800318c:	6033      	str	r3, [r6, #0]
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	0699      	lsls	r1, r3, #26
 8003192:	bf42      	ittt	mi
 8003194:	6833      	ldrmi	r3, [r6, #0]
 8003196:	3302      	addmi	r3, #2
 8003198:	6033      	strmi	r3, [r6, #0]
 800319a:	6825      	ldr	r5, [r4, #0]
 800319c:	f015 0506 	ands.w	r5, r5, #6
 80031a0:	d106      	bne.n	80031b0 <_printf_common+0x48>
 80031a2:	f104 0a19 	add.w	sl, r4, #25
 80031a6:	68e3      	ldr	r3, [r4, #12]
 80031a8:	6832      	ldr	r2, [r6, #0]
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	42ab      	cmp	r3, r5
 80031ae:	dc26      	bgt.n	80031fe <_printf_common+0x96>
 80031b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031b4:	1e13      	subs	r3, r2, #0
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	bf18      	it	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	0692      	lsls	r2, r2, #26
 80031be:	d42b      	bmi.n	8003218 <_printf_common+0xb0>
 80031c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031c4:	4649      	mov	r1, r9
 80031c6:	4638      	mov	r0, r7
 80031c8:	47c0      	blx	r8
 80031ca:	3001      	adds	r0, #1
 80031cc:	d01e      	beq.n	800320c <_printf_common+0xa4>
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	68e5      	ldr	r5, [r4, #12]
 80031d2:	6832      	ldr	r2, [r6, #0]
 80031d4:	f003 0306 	and.w	r3, r3, #6
 80031d8:	2b04      	cmp	r3, #4
 80031da:	bf08      	it	eq
 80031dc:	1aad      	subeq	r5, r5, r2
 80031de:	68a3      	ldr	r3, [r4, #8]
 80031e0:	6922      	ldr	r2, [r4, #16]
 80031e2:	bf0c      	ite	eq
 80031e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031e8:	2500      	movne	r5, #0
 80031ea:	4293      	cmp	r3, r2
 80031ec:	bfc4      	itt	gt
 80031ee:	1a9b      	subgt	r3, r3, r2
 80031f0:	18ed      	addgt	r5, r5, r3
 80031f2:	2600      	movs	r6, #0
 80031f4:	341a      	adds	r4, #26
 80031f6:	42b5      	cmp	r5, r6
 80031f8:	d11a      	bne.n	8003230 <_printf_common+0xc8>
 80031fa:	2000      	movs	r0, #0
 80031fc:	e008      	b.n	8003210 <_printf_common+0xa8>
 80031fe:	2301      	movs	r3, #1
 8003200:	4652      	mov	r2, sl
 8003202:	4649      	mov	r1, r9
 8003204:	4638      	mov	r0, r7
 8003206:	47c0      	blx	r8
 8003208:	3001      	adds	r0, #1
 800320a:	d103      	bne.n	8003214 <_printf_common+0xac>
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003214:	3501      	adds	r5, #1
 8003216:	e7c6      	b.n	80031a6 <_printf_common+0x3e>
 8003218:	18e1      	adds	r1, r4, r3
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	2030      	movs	r0, #48	; 0x30
 800321e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003222:	4422      	add	r2, r4
 8003224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800322c:	3302      	adds	r3, #2
 800322e:	e7c7      	b.n	80031c0 <_printf_common+0x58>
 8003230:	2301      	movs	r3, #1
 8003232:	4622      	mov	r2, r4
 8003234:	4649      	mov	r1, r9
 8003236:	4638      	mov	r0, r7
 8003238:	47c0      	blx	r8
 800323a:	3001      	adds	r0, #1
 800323c:	d0e6      	beq.n	800320c <_printf_common+0xa4>
 800323e:	3601      	adds	r6, #1
 8003240:	e7d9      	b.n	80031f6 <_printf_common+0x8e>
	...

08003244 <_printf_i>:
 8003244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003248:	7e0f      	ldrb	r7, [r1, #24]
 800324a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800324c:	2f78      	cmp	r7, #120	; 0x78
 800324e:	4691      	mov	r9, r2
 8003250:	4680      	mov	r8, r0
 8003252:	460c      	mov	r4, r1
 8003254:	469a      	mov	sl, r3
 8003256:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800325a:	d807      	bhi.n	800326c <_printf_i+0x28>
 800325c:	2f62      	cmp	r7, #98	; 0x62
 800325e:	d80a      	bhi.n	8003276 <_printf_i+0x32>
 8003260:	2f00      	cmp	r7, #0
 8003262:	f000 80d8 	beq.w	8003416 <_printf_i+0x1d2>
 8003266:	2f58      	cmp	r7, #88	; 0x58
 8003268:	f000 80a3 	beq.w	80033b2 <_printf_i+0x16e>
 800326c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003274:	e03a      	b.n	80032ec <_printf_i+0xa8>
 8003276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800327a:	2b15      	cmp	r3, #21
 800327c:	d8f6      	bhi.n	800326c <_printf_i+0x28>
 800327e:	a101      	add	r1, pc, #4	; (adr r1, 8003284 <_printf_i+0x40>)
 8003280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003284:	080032dd 	.word	0x080032dd
 8003288:	080032f1 	.word	0x080032f1
 800328c:	0800326d 	.word	0x0800326d
 8003290:	0800326d 	.word	0x0800326d
 8003294:	0800326d 	.word	0x0800326d
 8003298:	0800326d 	.word	0x0800326d
 800329c:	080032f1 	.word	0x080032f1
 80032a0:	0800326d 	.word	0x0800326d
 80032a4:	0800326d 	.word	0x0800326d
 80032a8:	0800326d 	.word	0x0800326d
 80032ac:	0800326d 	.word	0x0800326d
 80032b0:	080033fd 	.word	0x080033fd
 80032b4:	08003321 	.word	0x08003321
 80032b8:	080033df 	.word	0x080033df
 80032bc:	0800326d 	.word	0x0800326d
 80032c0:	0800326d 	.word	0x0800326d
 80032c4:	0800341f 	.word	0x0800341f
 80032c8:	0800326d 	.word	0x0800326d
 80032cc:	08003321 	.word	0x08003321
 80032d0:	0800326d 	.word	0x0800326d
 80032d4:	0800326d 	.word	0x0800326d
 80032d8:	080033e7 	.word	0x080033e7
 80032dc:	682b      	ldr	r3, [r5, #0]
 80032de:	1d1a      	adds	r2, r3, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	602a      	str	r2, [r5, #0]
 80032e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0a3      	b.n	8003438 <_printf_i+0x1f4>
 80032f0:	6820      	ldr	r0, [r4, #0]
 80032f2:	6829      	ldr	r1, [r5, #0]
 80032f4:	0606      	lsls	r6, r0, #24
 80032f6:	f101 0304 	add.w	r3, r1, #4
 80032fa:	d50a      	bpl.n	8003312 <_printf_i+0xce>
 80032fc:	680e      	ldr	r6, [r1, #0]
 80032fe:	602b      	str	r3, [r5, #0]
 8003300:	2e00      	cmp	r6, #0
 8003302:	da03      	bge.n	800330c <_printf_i+0xc8>
 8003304:	232d      	movs	r3, #45	; 0x2d
 8003306:	4276      	negs	r6, r6
 8003308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800330c:	485e      	ldr	r0, [pc, #376]	; (8003488 <_printf_i+0x244>)
 800330e:	230a      	movs	r3, #10
 8003310:	e019      	b.n	8003346 <_printf_i+0x102>
 8003312:	680e      	ldr	r6, [r1, #0]
 8003314:	602b      	str	r3, [r5, #0]
 8003316:	f010 0f40 	tst.w	r0, #64	; 0x40
 800331a:	bf18      	it	ne
 800331c:	b236      	sxthne	r6, r6
 800331e:	e7ef      	b.n	8003300 <_printf_i+0xbc>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	6820      	ldr	r0, [r4, #0]
 8003324:	1d19      	adds	r1, r3, #4
 8003326:	6029      	str	r1, [r5, #0]
 8003328:	0601      	lsls	r1, r0, #24
 800332a:	d501      	bpl.n	8003330 <_printf_i+0xec>
 800332c:	681e      	ldr	r6, [r3, #0]
 800332e:	e002      	b.n	8003336 <_printf_i+0xf2>
 8003330:	0646      	lsls	r6, r0, #25
 8003332:	d5fb      	bpl.n	800332c <_printf_i+0xe8>
 8003334:	881e      	ldrh	r6, [r3, #0]
 8003336:	4854      	ldr	r0, [pc, #336]	; (8003488 <_printf_i+0x244>)
 8003338:	2f6f      	cmp	r7, #111	; 0x6f
 800333a:	bf0c      	ite	eq
 800333c:	2308      	moveq	r3, #8
 800333e:	230a      	movne	r3, #10
 8003340:	2100      	movs	r1, #0
 8003342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003346:	6865      	ldr	r5, [r4, #4]
 8003348:	60a5      	str	r5, [r4, #8]
 800334a:	2d00      	cmp	r5, #0
 800334c:	bfa2      	ittt	ge
 800334e:	6821      	ldrge	r1, [r4, #0]
 8003350:	f021 0104 	bicge.w	r1, r1, #4
 8003354:	6021      	strge	r1, [r4, #0]
 8003356:	b90e      	cbnz	r6, 800335c <_printf_i+0x118>
 8003358:	2d00      	cmp	r5, #0
 800335a:	d04d      	beq.n	80033f8 <_printf_i+0x1b4>
 800335c:	4615      	mov	r5, r2
 800335e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003362:	fb03 6711 	mls	r7, r3, r1, r6
 8003366:	5dc7      	ldrb	r7, [r0, r7]
 8003368:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800336c:	4637      	mov	r7, r6
 800336e:	42bb      	cmp	r3, r7
 8003370:	460e      	mov	r6, r1
 8003372:	d9f4      	bls.n	800335e <_printf_i+0x11a>
 8003374:	2b08      	cmp	r3, #8
 8003376:	d10b      	bne.n	8003390 <_printf_i+0x14c>
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	07de      	lsls	r6, r3, #31
 800337c:	d508      	bpl.n	8003390 <_printf_i+0x14c>
 800337e:	6923      	ldr	r3, [r4, #16]
 8003380:	6861      	ldr	r1, [r4, #4]
 8003382:	4299      	cmp	r1, r3
 8003384:	bfde      	ittt	le
 8003386:	2330      	movle	r3, #48	; 0x30
 8003388:	f805 3c01 	strble.w	r3, [r5, #-1]
 800338c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003390:	1b52      	subs	r2, r2, r5
 8003392:	6122      	str	r2, [r4, #16]
 8003394:	f8cd a000 	str.w	sl, [sp]
 8003398:	464b      	mov	r3, r9
 800339a:	aa03      	add	r2, sp, #12
 800339c:	4621      	mov	r1, r4
 800339e:	4640      	mov	r0, r8
 80033a0:	f7ff fee2 	bl	8003168 <_printf_common>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d14c      	bne.n	8003442 <_printf_i+0x1fe>
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	b004      	add	sp, #16
 80033ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b2:	4835      	ldr	r0, [pc, #212]	; (8003488 <_printf_i+0x244>)
 80033b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80033b8:	6829      	ldr	r1, [r5, #0]
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80033c0:	6029      	str	r1, [r5, #0]
 80033c2:	061d      	lsls	r5, r3, #24
 80033c4:	d514      	bpl.n	80033f0 <_printf_i+0x1ac>
 80033c6:	07df      	lsls	r7, r3, #31
 80033c8:	bf44      	itt	mi
 80033ca:	f043 0320 	orrmi.w	r3, r3, #32
 80033ce:	6023      	strmi	r3, [r4, #0]
 80033d0:	b91e      	cbnz	r6, 80033da <_printf_i+0x196>
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	f023 0320 	bic.w	r3, r3, #32
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	2310      	movs	r3, #16
 80033dc:	e7b0      	b.n	8003340 <_printf_i+0xfc>
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	f043 0320 	orr.w	r3, r3, #32
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	2378      	movs	r3, #120	; 0x78
 80033e8:	4828      	ldr	r0, [pc, #160]	; (800348c <_printf_i+0x248>)
 80033ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033ee:	e7e3      	b.n	80033b8 <_printf_i+0x174>
 80033f0:	0659      	lsls	r1, r3, #25
 80033f2:	bf48      	it	mi
 80033f4:	b2b6      	uxthmi	r6, r6
 80033f6:	e7e6      	b.n	80033c6 <_printf_i+0x182>
 80033f8:	4615      	mov	r5, r2
 80033fa:	e7bb      	b.n	8003374 <_printf_i+0x130>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	6826      	ldr	r6, [r4, #0]
 8003400:	6961      	ldr	r1, [r4, #20]
 8003402:	1d18      	adds	r0, r3, #4
 8003404:	6028      	str	r0, [r5, #0]
 8003406:	0635      	lsls	r5, r6, #24
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	d501      	bpl.n	8003410 <_printf_i+0x1cc>
 800340c:	6019      	str	r1, [r3, #0]
 800340e:	e002      	b.n	8003416 <_printf_i+0x1d2>
 8003410:	0670      	lsls	r0, r6, #25
 8003412:	d5fb      	bpl.n	800340c <_printf_i+0x1c8>
 8003414:	8019      	strh	r1, [r3, #0]
 8003416:	2300      	movs	r3, #0
 8003418:	6123      	str	r3, [r4, #16]
 800341a:	4615      	mov	r5, r2
 800341c:	e7ba      	b.n	8003394 <_printf_i+0x150>
 800341e:	682b      	ldr	r3, [r5, #0]
 8003420:	1d1a      	adds	r2, r3, #4
 8003422:	602a      	str	r2, [r5, #0]
 8003424:	681d      	ldr	r5, [r3, #0]
 8003426:	6862      	ldr	r2, [r4, #4]
 8003428:	2100      	movs	r1, #0
 800342a:	4628      	mov	r0, r5
 800342c:	f7fc fee8 	bl	8000200 <memchr>
 8003430:	b108      	cbz	r0, 8003436 <_printf_i+0x1f2>
 8003432:	1b40      	subs	r0, r0, r5
 8003434:	6060      	str	r0, [r4, #4]
 8003436:	6863      	ldr	r3, [r4, #4]
 8003438:	6123      	str	r3, [r4, #16]
 800343a:	2300      	movs	r3, #0
 800343c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003440:	e7a8      	b.n	8003394 <_printf_i+0x150>
 8003442:	6923      	ldr	r3, [r4, #16]
 8003444:	462a      	mov	r2, r5
 8003446:	4649      	mov	r1, r9
 8003448:	4640      	mov	r0, r8
 800344a:	47d0      	blx	sl
 800344c:	3001      	adds	r0, #1
 800344e:	d0ab      	beq.n	80033a8 <_printf_i+0x164>
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	079b      	lsls	r3, r3, #30
 8003454:	d413      	bmi.n	800347e <_printf_i+0x23a>
 8003456:	68e0      	ldr	r0, [r4, #12]
 8003458:	9b03      	ldr	r3, [sp, #12]
 800345a:	4298      	cmp	r0, r3
 800345c:	bfb8      	it	lt
 800345e:	4618      	movlt	r0, r3
 8003460:	e7a4      	b.n	80033ac <_printf_i+0x168>
 8003462:	2301      	movs	r3, #1
 8003464:	4632      	mov	r2, r6
 8003466:	4649      	mov	r1, r9
 8003468:	4640      	mov	r0, r8
 800346a:	47d0      	blx	sl
 800346c:	3001      	adds	r0, #1
 800346e:	d09b      	beq.n	80033a8 <_printf_i+0x164>
 8003470:	3501      	adds	r5, #1
 8003472:	68e3      	ldr	r3, [r4, #12]
 8003474:	9903      	ldr	r1, [sp, #12]
 8003476:	1a5b      	subs	r3, r3, r1
 8003478:	42ab      	cmp	r3, r5
 800347a:	dcf2      	bgt.n	8003462 <_printf_i+0x21e>
 800347c:	e7eb      	b.n	8003456 <_printf_i+0x212>
 800347e:	2500      	movs	r5, #0
 8003480:	f104 0619 	add.w	r6, r4, #25
 8003484:	e7f5      	b.n	8003472 <_printf_i+0x22e>
 8003486:	bf00      	nop
 8003488:	0800380d 	.word	0x0800380d
 800348c:	0800381e 	.word	0x0800381e

08003490 <memcpy>:
 8003490:	440a      	add	r2, r1
 8003492:	4291      	cmp	r1, r2
 8003494:	f100 33ff 	add.w	r3, r0, #4294967295
 8003498:	d100      	bne.n	800349c <memcpy+0xc>
 800349a:	4770      	bx	lr
 800349c:	b510      	push	{r4, lr}
 800349e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034a6:	4291      	cmp	r1, r2
 80034a8:	d1f9      	bne.n	800349e <memcpy+0xe>
 80034aa:	bd10      	pop	{r4, pc}

080034ac <memmove>:
 80034ac:	4288      	cmp	r0, r1
 80034ae:	b510      	push	{r4, lr}
 80034b0:	eb01 0402 	add.w	r4, r1, r2
 80034b4:	d902      	bls.n	80034bc <memmove+0x10>
 80034b6:	4284      	cmp	r4, r0
 80034b8:	4623      	mov	r3, r4
 80034ba:	d807      	bhi.n	80034cc <memmove+0x20>
 80034bc:	1e43      	subs	r3, r0, #1
 80034be:	42a1      	cmp	r1, r4
 80034c0:	d008      	beq.n	80034d4 <memmove+0x28>
 80034c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034ca:	e7f8      	b.n	80034be <memmove+0x12>
 80034cc:	4402      	add	r2, r0
 80034ce:	4601      	mov	r1, r0
 80034d0:	428a      	cmp	r2, r1
 80034d2:	d100      	bne.n	80034d6 <memmove+0x2a>
 80034d4:	bd10      	pop	{r4, pc}
 80034d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034de:	e7f7      	b.n	80034d0 <memmove+0x24>

080034e0 <_free_r>:
 80034e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034e2:	2900      	cmp	r1, #0
 80034e4:	d044      	beq.n	8003570 <_free_r+0x90>
 80034e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034ea:	9001      	str	r0, [sp, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f1a1 0404 	sub.w	r4, r1, #4
 80034f2:	bfb8      	it	lt
 80034f4:	18e4      	addlt	r4, r4, r3
 80034f6:	f000 f913 	bl	8003720 <__malloc_lock>
 80034fa:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <_free_r+0x94>)
 80034fc:	9801      	ldr	r0, [sp, #4]
 80034fe:	6813      	ldr	r3, [r2, #0]
 8003500:	b933      	cbnz	r3, 8003510 <_free_r+0x30>
 8003502:	6063      	str	r3, [r4, #4]
 8003504:	6014      	str	r4, [r2, #0]
 8003506:	b003      	add	sp, #12
 8003508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800350c:	f000 b90e 	b.w	800372c <__malloc_unlock>
 8003510:	42a3      	cmp	r3, r4
 8003512:	d908      	bls.n	8003526 <_free_r+0x46>
 8003514:	6825      	ldr	r5, [r4, #0]
 8003516:	1961      	adds	r1, r4, r5
 8003518:	428b      	cmp	r3, r1
 800351a:	bf01      	itttt	eq
 800351c:	6819      	ldreq	r1, [r3, #0]
 800351e:	685b      	ldreq	r3, [r3, #4]
 8003520:	1949      	addeq	r1, r1, r5
 8003522:	6021      	streq	r1, [r4, #0]
 8003524:	e7ed      	b.n	8003502 <_free_r+0x22>
 8003526:	461a      	mov	r2, r3
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	b10b      	cbz	r3, 8003530 <_free_r+0x50>
 800352c:	42a3      	cmp	r3, r4
 800352e:	d9fa      	bls.n	8003526 <_free_r+0x46>
 8003530:	6811      	ldr	r1, [r2, #0]
 8003532:	1855      	adds	r5, r2, r1
 8003534:	42a5      	cmp	r5, r4
 8003536:	d10b      	bne.n	8003550 <_free_r+0x70>
 8003538:	6824      	ldr	r4, [r4, #0]
 800353a:	4421      	add	r1, r4
 800353c:	1854      	adds	r4, r2, r1
 800353e:	42a3      	cmp	r3, r4
 8003540:	6011      	str	r1, [r2, #0]
 8003542:	d1e0      	bne.n	8003506 <_free_r+0x26>
 8003544:	681c      	ldr	r4, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	6053      	str	r3, [r2, #4]
 800354a:	4421      	add	r1, r4
 800354c:	6011      	str	r1, [r2, #0]
 800354e:	e7da      	b.n	8003506 <_free_r+0x26>
 8003550:	d902      	bls.n	8003558 <_free_r+0x78>
 8003552:	230c      	movs	r3, #12
 8003554:	6003      	str	r3, [r0, #0]
 8003556:	e7d6      	b.n	8003506 <_free_r+0x26>
 8003558:	6825      	ldr	r5, [r4, #0]
 800355a:	1961      	adds	r1, r4, r5
 800355c:	428b      	cmp	r3, r1
 800355e:	bf04      	itt	eq
 8003560:	6819      	ldreq	r1, [r3, #0]
 8003562:	685b      	ldreq	r3, [r3, #4]
 8003564:	6063      	str	r3, [r4, #4]
 8003566:	bf04      	itt	eq
 8003568:	1949      	addeq	r1, r1, r5
 800356a:	6021      	streq	r1, [r4, #0]
 800356c:	6054      	str	r4, [r2, #4]
 800356e:	e7ca      	b.n	8003506 <_free_r+0x26>
 8003570:	b003      	add	sp, #12
 8003572:	bd30      	pop	{r4, r5, pc}
 8003574:	20000160 	.word	0x20000160

08003578 <sbrk_aligned>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	4e0e      	ldr	r6, [pc, #56]	; (80035b4 <sbrk_aligned+0x3c>)
 800357c:	460c      	mov	r4, r1
 800357e:	6831      	ldr	r1, [r6, #0]
 8003580:	4605      	mov	r5, r0
 8003582:	b911      	cbnz	r1, 800358a <sbrk_aligned+0x12>
 8003584:	f000 f8bc 	bl	8003700 <_sbrk_r>
 8003588:	6030      	str	r0, [r6, #0]
 800358a:	4621      	mov	r1, r4
 800358c:	4628      	mov	r0, r5
 800358e:	f000 f8b7 	bl	8003700 <_sbrk_r>
 8003592:	1c43      	adds	r3, r0, #1
 8003594:	d00a      	beq.n	80035ac <sbrk_aligned+0x34>
 8003596:	1cc4      	adds	r4, r0, #3
 8003598:	f024 0403 	bic.w	r4, r4, #3
 800359c:	42a0      	cmp	r0, r4
 800359e:	d007      	beq.n	80035b0 <sbrk_aligned+0x38>
 80035a0:	1a21      	subs	r1, r4, r0
 80035a2:	4628      	mov	r0, r5
 80035a4:	f000 f8ac 	bl	8003700 <_sbrk_r>
 80035a8:	3001      	adds	r0, #1
 80035aa:	d101      	bne.n	80035b0 <sbrk_aligned+0x38>
 80035ac:	f04f 34ff 	mov.w	r4, #4294967295
 80035b0:	4620      	mov	r0, r4
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
 80035b4:	20000164 	.word	0x20000164

080035b8 <_malloc_r>:
 80035b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035bc:	1ccd      	adds	r5, r1, #3
 80035be:	f025 0503 	bic.w	r5, r5, #3
 80035c2:	3508      	adds	r5, #8
 80035c4:	2d0c      	cmp	r5, #12
 80035c6:	bf38      	it	cc
 80035c8:	250c      	movcc	r5, #12
 80035ca:	2d00      	cmp	r5, #0
 80035cc:	4607      	mov	r7, r0
 80035ce:	db01      	blt.n	80035d4 <_malloc_r+0x1c>
 80035d0:	42a9      	cmp	r1, r5
 80035d2:	d905      	bls.n	80035e0 <_malloc_r+0x28>
 80035d4:	230c      	movs	r3, #12
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	2600      	movs	r6, #0
 80035da:	4630      	mov	r0, r6
 80035dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e0:	4e2e      	ldr	r6, [pc, #184]	; (800369c <_malloc_r+0xe4>)
 80035e2:	f000 f89d 	bl	8003720 <__malloc_lock>
 80035e6:	6833      	ldr	r3, [r6, #0]
 80035e8:	461c      	mov	r4, r3
 80035ea:	bb34      	cbnz	r4, 800363a <_malloc_r+0x82>
 80035ec:	4629      	mov	r1, r5
 80035ee:	4638      	mov	r0, r7
 80035f0:	f7ff ffc2 	bl	8003578 <sbrk_aligned>
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	4604      	mov	r4, r0
 80035f8:	d14d      	bne.n	8003696 <_malloc_r+0xde>
 80035fa:	6834      	ldr	r4, [r6, #0]
 80035fc:	4626      	mov	r6, r4
 80035fe:	2e00      	cmp	r6, #0
 8003600:	d140      	bne.n	8003684 <_malloc_r+0xcc>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	4631      	mov	r1, r6
 8003606:	4638      	mov	r0, r7
 8003608:	eb04 0803 	add.w	r8, r4, r3
 800360c:	f000 f878 	bl	8003700 <_sbrk_r>
 8003610:	4580      	cmp	r8, r0
 8003612:	d13a      	bne.n	800368a <_malloc_r+0xd2>
 8003614:	6821      	ldr	r1, [r4, #0]
 8003616:	3503      	adds	r5, #3
 8003618:	1a6d      	subs	r5, r5, r1
 800361a:	f025 0503 	bic.w	r5, r5, #3
 800361e:	3508      	adds	r5, #8
 8003620:	2d0c      	cmp	r5, #12
 8003622:	bf38      	it	cc
 8003624:	250c      	movcc	r5, #12
 8003626:	4629      	mov	r1, r5
 8003628:	4638      	mov	r0, r7
 800362a:	f7ff ffa5 	bl	8003578 <sbrk_aligned>
 800362e:	3001      	adds	r0, #1
 8003630:	d02b      	beq.n	800368a <_malloc_r+0xd2>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	442b      	add	r3, r5
 8003636:	6023      	str	r3, [r4, #0]
 8003638:	e00e      	b.n	8003658 <_malloc_r+0xa0>
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	1b52      	subs	r2, r2, r5
 800363e:	d41e      	bmi.n	800367e <_malloc_r+0xc6>
 8003640:	2a0b      	cmp	r2, #11
 8003642:	d916      	bls.n	8003672 <_malloc_r+0xba>
 8003644:	1961      	adds	r1, r4, r5
 8003646:	42a3      	cmp	r3, r4
 8003648:	6025      	str	r5, [r4, #0]
 800364a:	bf18      	it	ne
 800364c:	6059      	strne	r1, [r3, #4]
 800364e:	6863      	ldr	r3, [r4, #4]
 8003650:	bf08      	it	eq
 8003652:	6031      	streq	r1, [r6, #0]
 8003654:	5162      	str	r2, [r4, r5]
 8003656:	604b      	str	r3, [r1, #4]
 8003658:	4638      	mov	r0, r7
 800365a:	f104 060b 	add.w	r6, r4, #11
 800365e:	f000 f865 	bl	800372c <__malloc_unlock>
 8003662:	f026 0607 	bic.w	r6, r6, #7
 8003666:	1d23      	adds	r3, r4, #4
 8003668:	1af2      	subs	r2, r6, r3
 800366a:	d0b6      	beq.n	80035da <_malloc_r+0x22>
 800366c:	1b9b      	subs	r3, r3, r6
 800366e:	50a3      	str	r3, [r4, r2]
 8003670:	e7b3      	b.n	80035da <_malloc_r+0x22>
 8003672:	6862      	ldr	r2, [r4, #4]
 8003674:	42a3      	cmp	r3, r4
 8003676:	bf0c      	ite	eq
 8003678:	6032      	streq	r2, [r6, #0]
 800367a:	605a      	strne	r2, [r3, #4]
 800367c:	e7ec      	b.n	8003658 <_malloc_r+0xa0>
 800367e:	4623      	mov	r3, r4
 8003680:	6864      	ldr	r4, [r4, #4]
 8003682:	e7b2      	b.n	80035ea <_malloc_r+0x32>
 8003684:	4634      	mov	r4, r6
 8003686:	6876      	ldr	r6, [r6, #4]
 8003688:	e7b9      	b.n	80035fe <_malloc_r+0x46>
 800368a:	230c      	movs	r3, #12
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	4638      	mov	r0, r7
 8003690:	f000 f84c 	bl	800372c <__malloc_unlock>
 8003694:	e7a1      	b.n	80035da <_malloc_r+0x22>
 8003696:	6025      	str	r5, [r4, #0]
 8003698:	e7de      	b.n	8003658 <_malloc_r+0xa0>
 800369a:	bf00      	nop
 800369c:	20000160 	.word	0x20000160

080036a0 <_realloc_r>:
 80036a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a4:	4680      	mov	r8, r0
 80036a6:	4614      	mov	r4, r2
 80036a8:	460e      	mov	r6, r1
 80036aa:	b921      	cbnz	r1, 80036b6 <_realloc_r+0x16>
 80036ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036b0:	4611      	mov	r1, r2
 80036b2:	f7ff bf81 	b.w	80035b8 <_malloc_r>
 80036b6:	b92a      	cbnz	r2, 80036c4 <_realloc_r+0x24>
 80036b8:	f7ff ff12 	bl	80034e0 <_free_r>
 80036bc:	4625      	mov	r5, r4
 80036be:	4628      	mov	r0, r5
 80036c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036c4:	f000 f838 	bl	8003738 <_malloc_usable_size_r>
 80036c8:	4284      	cmp	r4, r0
 80036ca:	4607      	mov	r7, r0
 80036cc:	d802      	bhi.n	80036d4 <_realloc_r+0x34>
 80036ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036d2:	d812      	bhi.n	80036fa <_realloc_r+0x5a>
 80036d4:	4621      	mov	r1, r4
 80036d6:	4640      	mov	r0, r8
 80036d8:	f7ff ff6e 	bl	80035b8 <_malloc_r>
 80036dc:	4605      	mov	r5, r0
 80036de:	2800      	cmp	r0, #0
 80036e0:	d0ed      	beq.n	80036be <_realloc_r+0x1e>
 80036e2:	42bc      	cmp	r4, r7
 80036e4:	4622      	mov	r2, r4
 80036e6:	4631      	mov	r1, r6
 80036e8:	bf28      	it	cs
 80036ea:	463a      	movcs	r2, r7
 80036ec:	f7ff fed0 	bl	8003490 <memcpy>
 80036f0:	4631      	mov	r1, r6
 80036f2:	4640      	mov	r0, r8
 80036f4:	f7ff fef4 	bl	80034e0 <_free_r>
 80036f8:	e7e1      	b.n	80036be <_realloc_r+0x1e>
 80036fa:	4635      	mov	r5, r6
 80036fc:	e7df      	b.n	80036be <_realloc_r+0x1e>
	...

08003700 <_sbrk_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	4d06      	ldr	r5, [pc, #24]	; (800371c <_sbrk_r+0x1c>)
 8003704:	2300      	movs	r3, #0
 8003706:	4604      	mov	r4, r0
 8003708:	4608      	mov	r0, r1
 800370a:	602b      	str	r3, [r5, #0]
 800370c:	f7fd fe36 	bl	800137c <_sbrk>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d102      	bne.n	800371a <_sbrk_r+0x1a>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	b103      	cbz	r3, 800371a <_sbrk_r+0x1a>
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	20000168 	.word	0x20000168

08003720 <__malloc_lock>:
 8003720:	4801      	ldr	r0, [pc, #4]	; (8003728 <__malloc_lock+0x8>)
 8003722:	f000 b811 	b.w	8003748 <__retarget_lock_acquire_recursive>
 8003726:	bf00      	nop
 8003728:	2000016c 	.word	0x2000016c

0800372c <__malloc_unlock>:
 800372c:	4801      	ldr	r0, [pc, #4]	; (8003734 <__malloc_unlock+0x8>)
 800372e:	f000 b80c 	b.w	800374a <__retarget_lock_release_recursive>
 8003732:	bf00      	nop
 8003734:	2000016c 	.word	0x2000016c

08003738 <_malloc_usable_size_r>:
 8003738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800373c:	1f18      	subs	r0, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	bfbc      	itt	lt
 8003742:	580b      	ldrlt	r3, [r1, r0]
 8003744:	18c0      	addlt	r0, r0, r3
 8003746:	4770      	bx	lr

08003748 <__retarget_lock_acquire_recursive>:
 8003748:	4770      	bx	lr

0800374a <__retarget_lock_release_recursive>:
 800374a:	4770      	bx	lr

0800374c <_init>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	bf00      	nop
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr

08003758 <_fini>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr
