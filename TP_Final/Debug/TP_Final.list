
TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000358c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003808  08003808  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003810  08003810  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08003818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          000000a8  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000017c  2000017c  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a17  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e18  00000000  00000000  00029b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0002b938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000750  00000000  00000000  0002c168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ca9  00000000  00000000  0002c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8e4  00000000  00000000  00053561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e23fe  00000000  00000000  00062e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145243  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021f4  00000000  00000000  00145294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003724 	.word	0x08003724

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	08003724 	.word	0x08003724

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <debounceFSM_init>:

/*debounceFSM_init
 *Se encarga de asignar el estado inicial en la MEF utilizada para validación de pulsaciones.
 *Por defecto, se asigna estado BUTTON_UP como inicial
 *Se inicializa las estructuras para toma de tiempo y validación de pulsaciones*/
void debounceFSM_init(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	StateBU=BUTTON_UP;
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <debounceFSM_init+0x24>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
	StateBD=BUTTON_UP;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <debounceFSM_init+0x28>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	delayInit(&delayButtonBU,TIME_VALID_PUSH);
 80005b4:	2128      	movs	r1, #40	; 0x28
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <debounceFSM_init+0x2c>)
 80005b8:	f000 f93e 	bl	8000838 <delayInit>
	delayInit(&delayButtonBD,TIME_VALID_PUSH);
 80005bc:	2128      	movs	r1, #40	; 0x28
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <debounceFSM_init+0x30>)
 80005c0:	f000 f93a 	bl	8000838 <delayInit>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000118 	.word	0x20000118
 80005cc:	20000119 	.word	0x20000119
 80005d0:	200000f4 	.word	0x200000f4
 80005d4:	20000100 	.word	0x20000100

080005d8 <debounceFSM_update>:

/*debounceFSM_update
 *Verifica el estado del pulsador y actualiza el estado de la MEF
 *
 *Parametro: PULSADOR_UP/PULSADOR_DOWN*/
void debounceFSM_update(uint8_t pulsador){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]

	uint8_t buttonSel=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
	//Verifica valor de parametro de entrada, el cual indica que pulsador se debe analizar (BU o BD).
	if (pulsador==PULSADOR_UP){
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d10b      	bne.n	8000604 <debounceFSM_update+0x2c>
		buttonState=StateBU;
 80005ec:	4b55      	ldr	r3, [pc, #340]	; (8000744 <debounceFSM_update+0x16c>)
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b55      	ldr	r3, [pc, #340]	; (8000748 <debounceFSM_update+0x170>)
 80005f2:	701a      	strb	r2, [r3, #0]
		delayButton=delayButtonBU;
 80005f4:	4b55      	ldr	r3, [pc, #340]	; (800074c <debounceFSM_update+0x174>)
 80005f6:	4a56      	ldr	r2, [pc, #344]	; (8000750 <debounceFSM_update+0x178>)
 80005f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		buttonSel=PULSADOR_UP;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e012      	b.n	800062a <debounceFSM_update+0x52>
	}
	else if (pulsador==PULSADOR_DOWN){
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d10b      	bne.n	8000622 <debounceFSM_update+0x4a>
		buttonState=StateBD;
 800060a:	4b52      	ldr	r3, [pc, #328]	; (8000754 <debounceFSM_update+0x17c>)
 800060c:	781a      	ldrb	r2, [r3, #0]
 800060e:	4b4e      	ldr	r3, [pc, #312]	; (8000748 <debounceFSM_update+0x170>)
 8000610:	701a      	strb	r2, [r3, #0]
		delayButton=delayButtonBD;
 8000612:	4b4e      	ldr	r3, [pc, #312]	; (800074c <debounceFSM_update+0x174>)
 8000614:	4a50      	ldr	r2, [pc, #320]	; (8000758 <debounceFSM_update+0x180>)
 8000616:	ca07      	ldmia	r2, {r0, r1, r2}
 8000618:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		buttonSel=PULSADOR_DOWN;
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	e003      	b.n	800062a <debounceFSM_update+0x52>
	}
	else{
		/*En caso de error en parametro, enciende LED1 de manera permanente*/
		while(1){
			BSP_LED_On(LED1);
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fdac 	bl	8001180 <BSP_LED_On>
 8000628:	e7fb      	b.n	8000622 <debounceFSM_update+0x4a>
		}
	}

	switch (buttonState){
 800062a:	4b47      	ldr	r3, [pc, #284]	; (8000748 <debounceFSM_update+0x170>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d86a      	bhi.n	8000708 <debounceFSM_update+0x130>
 8000632:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <debounceFSM_update+0x60>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000649 	.word	0x08000649
 800063c:	0800066d 	.word	0x0800066d
 8000640:	080006a7 	.word	0x080006a7
 8000644:	080006d1 	.word	0x080006d1
		 * Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_FALLING.
		 * En estas condiciones, inicia al contador para validación.
		 * Si detecta que el pulsador no se encuentra presionado, mantiene la MEF en estado BUTTON_UP. */
		case BUTTON_UP:

			if(readButton(buttonSel)){
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f886 	bl	800075c <readButton>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <debounceFSM_update+0x8c>
				delayRead(&delayButton);
 8000656:	483d      	ldr	r0, [pc, #244]	; (800074c <debounceFSM_update+0x174>)
 8000658:	f000 f90c 	bl	8000874 <delayRead>
				buttonState=BUTTON_FALLING;
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <debounceFSM_update+0x170>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
				}
			else{
				buttonState=BUTTON_UP;
			}
		break;
 8000662:	e054      	b.n	800070e <debounceFSM_update+0x136>
				buttonState=BUTTON_UP;
 8000664:	4b38      	ldr	r3, [pc, #224]	; (8000748 <debounceFSM_update+0x170>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
		break;
 800066a:	e050      	b.n	800070e <debounceFSM_update+0x136>
		* Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_DOWN (pulsación detectada).
		* A su vez, llama a la funcion buttonPressed indicar dicha pulsacion.
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_UP (pulsación no válida). */
		case BUTTON_FALLING:

			if (delayRead(&delayButton)){
 800066c:	4837      	ldr	r0, [pc, #220]	; (800074c <debounceFSM_update+0x174>)
 800066e:	f000 f901 	bl	8000874 <delayRead>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d012      	beq.n	800069e <debounceFSM_update+0xc6>
				if(readButton(buttonSel)){
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f86e 	bl	800075c <readButton>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d007      	beq.n	8000696 <debounceFSM_update+0xbe>
					buttonState=BUTTON_DOWN;
 8000686:	4b30      	ldr	r3, [pc, #192]	; (8000748 <debounceFSM_update+0x170>)
 8000688:	2202      	movs	r2, #2
 800068a:	701a      	strb	r2, [r3, #0]
					buttonPressed(buttonSel);
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f888 	bl	80007a4 <buttonPressed>
				}
			}
			else{
				buttonState=BUTTON_FALLING;
			}
		break;
 8000694:	e03b      	b.n	800070e <debounceFSM_update+0x136>
					buttonState=BUTTON_UP;
 8000696:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <debounceFSM_update+0x170>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
		break;
 800069c:	e037      	b.n	800070e <debounceFSM_update+0x136>
				buttonState=BUTTON_FALLING;
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <debounceFSM_update+0x170>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
		break;
 80006a4:	e033      	b.n	800070e <debounceFSM_update+0x136>
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_RAISING.
		* En estas condiciones, inicia al contador para validación.
		* Si detecta que el pulsador se encuentra presionado, mantiene la MEF en estado BUTTON_DOWN. */
		case BUTTON_DOWN:

			if(!readButton(buttonSel)){
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f857 	bl	800075c <readButton>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <debounceFSM_update+0xf0>
				delayRead(&delayButton);
 80006ba:	4824      	ldr	r0, [pc, #144]	; (800074c <debounceFSM_update+0x174>)
 80006bc:	f000 f8da 	bl	8000874 <delayRead>
				buttonState=BUTTON_RAISING;
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <debounceFSM_update+0x170>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	701a      	strb	r2, [r3, #0]
			}
			else{
				buttonState=BUTTON_DOWN;
			}
		break;
 80006c6:	e022      	b.n	800070e <debounceFSM_update+0x136>
				buttonState=BUTTON_DOWN;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <debounceFSM_update+0x170>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	701a      	strb	r2, [r3, #0]
		break;
 80006ce:	e01e      	b.n	800070e <debounceFSM_update+0x136>
		* A traves de la función readButton lee el estado del pulsador que corresponda.
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_UP (pulsador liberado).
		* Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_DOWN (liberación no válida). */
		case BUTTON_RAISING:

			if (delayRead(&delayButton)){
 80006d0:	481e      	ldr	r0, [pc, #120]	; (800074c <debounceFSM_update+0x174>)
 80006d2:	f000 f8cf 	bl	8000874 <delayRead>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d011      	beq.n	8000700 <debounceFSM_update+0x128>
				if(!readButton(buttonSel)){
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f83c 	bl	800075c <readButton>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d003      	beq.n	80006f8 <debounceFSM_update+0x120>
					buttonState=BUTTON_UP;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <debounceFSM_update+0x170>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
				}
			}
			else{
				buttonState=BUTTON_RAISING;
			}
		break;
 80006f6:	e00a      	b.n	800070e <debounceFSM_update+0x136>
					buttonState=BUTTON_DOWN;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <debounceFSM_update+0x170>)
 80006fa:	2202      	movs	r2, #2
 80006fc:	701a      	strb	r2, [r3, #0]
		break;
 80006fe:	e006      	b.n	800070e <debounceFSM_update+0x136>
				buttonState=BUTTON_RAISING;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <debounceFSM_update+0x170>)
 8000702:	2203      	movs	r2, #3
 8000704:	701a      	strb	r2, [r3, #0]
		break;
 8000706:	e002      	b.n	800070e <debounceFSM_update+0x136>

		/*Por default, vuelve al estado inicial*/
		default:
			debounceFSM_init();
 8000708:	f7ff ff4c 	bl	80005a4 <debounceFSM_init>
		break;
 800070c:	bf00      	nop
	}
	/*Actualiza los valores de StateBU,delayButtonBU o StateBD,delayButtonBD segun corresponda*/
	if (buttonSel==PULSADOR_UP){
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d109      	bne.n	8000728 <debounceFSM_update+0x150>
		StateBU=buttonState;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <debounceFSM_update+0x170>)
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <debounceFSM_update+0x16c>)
 800071a:	701a      	strb	r2, [r3, #0]
		delayButtonBU=delayButton;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <debounceFSM_update+0x178>)
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <debounceFSM_update+0x174>)
 8000720:	ca07      	ldmia	r2, {r0, r1, r2}
 8000722:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
	else{
		StateBD=buttonState;
		delayButtonBD=delayButton;
	}
}
 8000726:	e008      	b.n	800073a <debounceFSM_update+0x162>
		StateBD=buttonState;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <debounceFSM_update+0x170>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <debounceFSM_update+0x17c>)
 800072e:	701a      	strb	r2, [r3, #0]
		delayButtonBD=delayButton;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <debounceFSM_update+0x180>)
 8000732:	4a06      	ldr	r2, [pc, #24]	; (800074c <debounceFSM_update+0x174>)
 8000734:	ca07      	ldmia	r2, {r0, r1, r2}
 8000736:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000118 	.word	0x20000118
 8000748:	2000011a 	.word	0x2000011a
 800074c:	2000010c 	.word	0x2000010c
 8000750:	200000f4 	.word	0x200000f4
 8000754:	20000119 	.word	0x20000119
 8000758:	20000100 	.word	0x20000100

0800075c <readButton>:

/*readButton
 *Función que lee el estado de los pulsadores.
 *Devuelve un valor booleano TRUE si el pulsador en cuestión se encuentra presionado. */
static bool_t readButton(uint8_t button){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	bool_t stateButton=false;
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]

	/*Si se pasa por parametro PULSADOR_UP, se lee BU.*/
	if(button==PULSADOR_UP){
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d109      	bne.n	8000784 <readButton+0x28>
		stateButton=BSP_PB_GetState(BUTTON_USER);
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fd75 	bl	8001260 <BSP_PB_GetState>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e009      	b.n	8000798 <readButton+0x3c>
	}
	/*Si se pasa por parametro PULSADOR_DOWN, se lee BD.*/
	else if(button==PULSADOR_DOWN){
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d104      	bne.n	8000794 <readButton+0x38>
		stateButton=gpioButton_Read();
 800078a:	f000 fb6d 	bl	8000e68 <gpioButton_Read>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	e001      	b.n	8000798 <readButton+0x3c>
	}
	/*Para cualquier otro parametro de entrada, devuelve FALSE.*/
	else{
		stateButton=false;
 8000794:	2300      	movs	r3, #0
 8000796:	73fb      	strb	r3, [r7, #15]
	}
	return stateButton;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <buttonPressed>:

/*buttonPressed
 *Función que indica que boton fue presionado.
 *Asigna un valor booleano TRUE a las variables buttonUPPress o buttonDOWNPress, segun corresponda. */
static void buttonPressed(uint8_t button) {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	if(button==PULSADOR_UP){
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d103      	bne.n	80007bc <buttonPressed+0x18>
		buttonUPPress=true;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <buttonPressed+0x2c>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
	}
	else{
		buttonDOWNPress=true;
	}
}
 80007ba:	e002      	b.n	80007c2 <buttonPressed+0x1e>
		buttonDOWNPress=true;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <buttonPressed+0x30>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	200000f0 	.word	0x200000f0
 80007d4:	200000f1 	.word	0x200000f1

080007d8 <readKeyUP>:

/*readKeyUP
 *Función booleana que devuelve una copia del valor de la variable buttonUPPress.
 *Si dicha variable posee valor lógico TRUE, la reinicializa a FALSE.*/
bool_t readKeyUP(void){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
	bool_t buttonStateAux;

	if (buttonUPPress==true){
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <readKeyUP+0x2c>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d005      	beq.n	80007f2 <readKeyUP+0x1a>
		buttonStateAux=true;
 80007e6:	2301      	movs	r3, #1
 80007e8:	71fb      	strb	r3, [r7, #7]
		buttonUPPress=false;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <readKeyUP+0x2c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	e001      	b.n	80007f6 <readKeyUP+0x1e>
	}
	else{
		buttonStateAux=false;
 80007f2:	2300      	movs	r3, #0
 80007f4:	71fb      	strb	r3, [r7, #7]
	}
	return buttonStateAux;
 80007f6:	79fb      	ldrb	r3, [r7, #7]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	200000f0 	.word	0x200000f0

08000808 <readKeyDOWN>:

/*readKeyDOWN
 *Función booleana que devuelve una copia del valor de la variable buttonDOWNPress.
 *Si dicha variable posee valor lógico TRUE, la reinicializa a FALSE.*/
bool_t readKeyDOWN(void){
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
	bool_t buttonStateAux;

	if (buttonDOWNPress==true){
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <readKeyDOWN+0x2c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d005      	beq.n	8000822 <readKeyDOWN+0x1a>
		buttonStateAux=true;
 8000816:	2301      	movs	r3, #1
 8000818:	71fb      	strb	r3, [r7, #7]
		buttonDOWNPress=false;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <readKeyDOWN+0x2c>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	e001      	b.n	8000826 <readKeyDOWN+0x1e>
	}
	else{
		buttonStateAux=false;
 8000822:	2300      	movs	r3, #0
 8000824:	71fb      	strb	r3, [r7, #7]
	}
	return buttonStateAux;
 8000826:	79fb      	ldrb	r3, [r7, #7]
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	200000f1 	.word	0x200000f1

08000838 <delayInit>:
#include "API_delay.h"

/*DelayInit:
 *Inicializa la estructura para los retardos no bloqueantes.
 *No inicializa el contador.*/
void delayInit( delay_t * delay, tick_t duration ){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	/*Verifica si los parametros introducidos son los adecuados.
	 *Almacena el valor de retardo en el parametro duration. */
	if (delay!=NULL && duration>0 && duration<MAX_DURATION){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00e      	beq.n	8000866 <delayInit+0x2e>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00b      	beq.n	8000866 <delayInit+0x2e>
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	f247 522f 	movw	r2, #29999	; 0x752f
 8000854:	4293      	cmp	r3, r2
 8000856:	d806      	bhi.n	8000866 <delayInit+0x2e>
		delay->duration=duration;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	605a      	str	r2, [r3, #4]
		delay->running=false;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	721a      	strb	r2, [r3, #8]
	/*En caso de error, enciende LED1 de manera permanente*/
		while(1){
			BSP_LED_On(LED1);
		}
	}
}
 8000864:	e003      	b.n	800086e <delayInit+0x36>
			BSP_LED_On(LED1);
 8000866:	2000      	movs	r0, #0
 8000868:	f000 fc8a 	bl	8001180 <BSP_LED_On>
 800086c:	e7fb      	b.n	8000866 <delayInit+0x2e>
}
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <delayRead>:

/*DelayRead:
  Se encarga de inicializar el contador.
  En primer lugar toma una marca de tiempo, luego la cual (en cada llamado) se compara con el tiempo actual.
  Si la diferencia entre el tiempo actual y la marca de tiempo es mayor a la duracion prefijada, devuelve un valor booleano TRUE.*/
bool_t delayRead( delay_t * delay ){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	tick_t currentTime;
	bool_t completedTime=false;
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]

	/*Verifica si los parametros introducidos son los adecuados.
	 *Toma una marca de tiempo e inicia la cuenta.
	 *Devuelve un valor booleano TRUE si el tiempo transcurrido es mayor al almacenado en "duration".*/
	if (delay != NULL){
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d025      	beq.n	80008d2 <delayRead+0x5e>
		if (delay->running==false){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7a1b      	ldrb	r3, [r3, #8]
 800088a:	f083 0301 	eor.w	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00a      	beq.n	80008aa <delayRead+0x36>
			delay->startTime=HAL_GetTick();
 8000894:	f000 fdf4 	bl	8001480 <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]
			delay->running=true;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2201      	movs	r2, #1
 80008a2:	721a      	strb	r2, [r3, #8]
			completedTime=false;
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	e017      	b.n	80008da <delayRead+0x66>
		}
		else{
			currentTime=HAL_GetTick();
 80008aa:	f000 fde9 	bl	8001480 <HAL_GetTick>
 80008ae:	60b8      	str	r0, [r7, #8]
			if (currentTime - delay->startTime >= delay->duration){
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	1ad2      	subs	r2, r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d305      	bcc.n	80008cc <delayRead+0x58>
				completedTime=true;
 80008c0:	2301      	movs	r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]
				delay->running=false;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	721a      	strb	r2, [r3, #8]
 80008ca:	e006      	b.n	80008da <delayRead+0x66>
			}
			else{
				completedTime=false;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	e003      	b.n	80008da <delayRead+0x66>
		}
	}
	else {
		while(1){
	/*En caso de error, enciende LED1 de manera permanente.*/
			BSP_LED_On(LED1);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 fc54 	bl	8001180 <BSP_LED_On>
 80008d8:	e7fb      	b.n	80008d2 <delayRead+0x5e>
		}
	}
	return completedTime;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <displayFSM_init>:
/*displayFSM_init.
 *Función que inicializa la MEF de display.
 *A su vez, inicializa la UART.
 *Si inicia correctamente, setea LED 2 y asigna al estado 0 como estado inicial de la MEF de display.
 *Envia mensaje por UART indicando el estado inicial de la MEF.*/
void displayFSM_init(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	if(uartInit()){
 80008e8:	f000 fb5a 	bl	8000fa0 <uartInit>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d00a      	beq.n	8000908 <displayFSM_init+0x24>
		BSP_LED_On(LED2);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f000 fc44 	bl	8001180 <BSP_LED_On>
		stateDisplay=State_0;
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <displayFSM_init+0x28>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
		numeroDisplay=NRO_CERO;
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <displayFSM_init+0x2c>)
 8000900:	2277      	movs	r2, #119	; 0x77
 8000902:	701a      	strb	r2, [r3, #0]
		sendMessageByUart();
 8000904:	f000 f9c8 	bl	8000c98 <sendMessageByUart>
	}
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000011b 	.word	0x2000011b
 8000910:	2000011c 	.word	0x2000011c

08000914 <displayFSM_update>:

/*displayFSM_update.
 *Función que actualiza el estado la MEF de display.*/
void displayFSM_update(void){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

	switch(stateDisplay){
 8000918:	4bb4      	ldr	r3, [pc, #720]	; (8000bec <displayFSM_update+0x2d8>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b09      	cmp	r3, #9
 800091e:	f200 8192 	bhi.w	8000c46 <displayFSM_update+0x332>
 8000922:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <displayFSM_update+0x14>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000951 	.word	0x08000951
 800092c:	0800099b 	.word	0x0800099b
 8000930:	080009e5 	.word	0x080009e5
 8000934:	08000a2f 	.word	0x08000a2f
 8000938:	08000a79 	.word	0x08000a79
 800093c:	08000ac3 	.word	0x08000ac3
 8000940:	08000b0d 	.word	0x08000b0d
 8000944:	08000b57 	.word	0x08000b57
 8000948:	08000ba1 	.word	0x08000ba1
 800094c:	08000bfd 	.word	0x08000bfd
		 *Si se detecta pulsación en boton UP, se avanza al estado 1.
		 *Si se detecta pulsación en boton DOWN, se retrocede al estado 9.
		 *Si no se detecta pulsación alguna, se mantiene en estado 0.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_0:
			if(readKeyUP()){
 8000950:	f7ff ff42 	bl	80007d8 <readKeyUP>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d009      	beq.n	800096e <displayFSM_update+0x5a>
				stateDisplay=State_1;
 800095a:	4ba4      	ldr	r3, [pc, #656]	; (8000bec <displayFSM_update+0x2d8>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_UNO;
 8000960:	4ba3      	ldr	r3, [pc, #652]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000962:	2244      	movs	r2, #68	; 0x44
 8000964:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000966:	4ba3      	ldr	r3, [pc, #652]	; (8000bf4 <displayFSM_update+0x2e0>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_0;
				numeroDisplay=NRO_CERO;
			}
		break;
 800096c:	e16e      	b.n	8000c4c <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 800096e:	f7ff ff4b 	bl	8000808 <readKeyDOWN>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d009      	beq.n	800098c <displayFSM_update+0x78>
				stateDisplay=State_9;
 8000978:	4b9c      	ldr	r3, [pc, #624]	; (8000bec <displayFSM_update+0x2d8>)
 800097a:	2209      	movs	r2, #9
 800097c:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_NUEVE;
 800097e:	4b9c      	ldr	r3, [pc, #624]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000980:	227c      	movs	r2, #124	; 0x7c
 8000982:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000984:	4b9c      	ldr	r3, [pc, #624]	; (8000bf8 <displayFSM_update+0x2e4>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
		break;
 800098a:	e15f      	b.n	8000c4c <displayFSM_update+0x338>
				stateDisplay=State_0;
 800098c:	4b97      	ldr	r3, [pc, #604]	; (8000bec <displayFSM_update+0x2d8>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CERO;
 8000992:	4b97      	ldr	r3, [pc, #604]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000994:	2277      	movs	r2, #119	; 0x77
 8000996:	701a      	strb	r2, [r3, #0]
		break;
 8000998:	e158      	b.n	8000c4c <displayFSM_update+0x338>
		 *Si se detecta pulsación en boton UP, se avanza al estado 2.
		 *Si se detecta pulsación en boton DOWN, se retrocede al estado 0.
		 *Si no se detecta pulsación alguna, se mantiene en estado 1.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_1:
			if(readKeyUP()){
 800099a:	f7ff ff1d 	bl	80007d8 <readKeyUP>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d009      	beq.n	80009b8 <displayFSM_update+0xa4>
				stateDisplay=State_2;
 80009a4:	4b91      	ldr	r3, [pc, #580]	; (8000bec <displayFSM_update+0x2d8>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_DOS;
 80009aa:	4b91      	ldr	r3, [pc, #580]	; (8000bf0 <displayFSM_update+0x2dc>)
 80009ac:	226b      	movs	r2, #107	; 0x6b
 80009ae:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 80009b0:	4b90      	ldr	r3, [pc, #576]	; (8000bf4 <displayFSM_update+0x2e0>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_1;
				numeroDisplay=NRO_UNO;
			}
		break;
 80009b6:	e149      	b.n	8000c4c <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 80009b8:	f7ff ff26 	bl	8000808 <readKeyDOWN>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d009      	beq.n	80009d6 <displayFSM_update+0xc2>
				stateDisplay=State_0;
 80009c2:	4b8a      	ldr	r3, [pc, #552]	; (8000bec <displayFSM_update+0x2d8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CERO;
 80009c8:	4b89      	ldr	r3, [pc, #548]	; (8000bf0 <displayFSM_update+0x2dc>)
 80009ca:	2277      	movs	r2, #119	; 0x77
 80009cc:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 80009ce:	4b8a      	ldr	r3, [pc, #552]	; (8000bf8 <displayFSM_update+0x2e4>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
		break;
 80009d4:	e13a      	b.n	8000c4c <displayFSM_update+0x338>
				stateDisplay=State_1;
 80009d6:	4b85      	ldr	r3, [pc, #532]	; (8000bec <displayFSM_update+0x2d8>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_UNO;
 80009dc:	4b84      	ldr	r3, [pc, #528]	; (8000bf0 <displayFSM_update+0x2dc>)
 80009de:	2244      	movs	r2, #68	; 0x44
 80009e0:	701a      	strb	r2, [r3, #0]
		break;
 80009e2:	e133      	b.n	8000c4c <displayFSM_update+0x338>
		 *Si se detecta pulsación en boton UP, se avanza al estado 3.
		 *Si se detecta pulsación en boton DOWN, se retrocede al estado 1.
		 *Si no se detecta pulsación alguna, se mantiene en estado 2.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_2:
			if(readKeyUP()){
 80009e4:	f7ff fef8 	bl	80007d8 <readKeyUP>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d009      	beq.n	8000a02 <displayFSM_update+0xee>
				stateDisplay=State_3;
 80009ee:	4b7f      	ldr	r3, [pc, #508]	; (8000bec <displayFSM_update+0x2d8>)
 80009f0:	2203      	movs	r2, #3
 80009f2:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_TRES;
 80009f4:	4b7e      	ldr	r3, [pc, #504]	; (8000bf0 <displayFSM_update+0x2dc>)
 80009f6:	226e      	movs	r2, #110	; 0x6e
 80009f8:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 80009fa:	4b7e      	ldr	r3, [pc, #504]	; (8000bf4 <displayFSM_update+0x2e0>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_2;
				numeroDisplay=NRO_DOS;
			}
		break;
 8000a00:	e124      	b.n	8000c4c <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000a02:	f7ff ff01 	bl	8000808 <readKeyDOWN>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d009      	beq.n	8000a20 <displayFSM_update+0x10c>
				stateDisplay=State_1;
 8000a0c:	4b77      	ldr	r3, [pc, #476]	; (8000bec <displayFSM_update+0x2d8>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_UNO;
 8000a12:	4b77      	ldr	r3, [pc, #476]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000a14:	2244      	movs	r2, #68	; 0x44
 8000a16:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000a18:	4b77      	ldr	r3, [pc, #476]	; (8000bf8 <displayFSM_update+0x2e4>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
		break;
 8000a1e:	e115      	b.n	8000c4c <displayFSM_update+0x338>
				stateDisplay=State_2;
 8000a20:	4b72      	ldr	r3, [pc, #456]	; (8000bec <displayFSM_update+0x2d8>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_DOS;
 8000a26:	4b72      	ldr	r3, [pc, #456]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000a28:	226b      	movs	r2, #107	; 0x6b
 8000a2a:	701a      	strb	r2, [r3, #0]
		break;
 8000a2c:	e10e      	b.n	8000c4c <displayFSM_update+0x338>
		 *Si se detecta pulsación en boton UP, se avanza al estado 4.
		 *Si se detecta pulsación en boton DOWN, se retrocede al estado 2.
		 *Si no se detecta pulsación alguna, se mantiene en estado 3.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_3:
			if(readKeyUP()){
 8000a2e:	f7ff fed3 	bl	80007d8 <readKeyUP>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d009      	beq.n	8000a4c <displayFSM_update+0x138>
				stateDisplay=State_4;
 8000a38:	4b6c      	ldr	r3, [pc, #432]	; (8000bec <displayFSM_update+0x2d8>)
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CUATRO;
 8000a3e:	4b6c      	ldr	r3, [pc, #432]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000a40:	225c      	movs	r2, #92	; 0x5c
 8000a42:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000a44:	4b6b      	ldr	r3, [pc, #428]	; (8000bf4 <displayFSM_update+0x2e0>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_3;
				numeroDisplay=NRO_TRES;
			}
		break;
 8000a4a:	e0ff      	b.n	8000c4c <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000a4c:	f7ff fedc 	bl	8000808 <readKeyDOWN>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d009      	beq.n	8000a6a <displayFSM_update+0x156>
				stateDisplay=State_2;
 8000a56:	4b65      	ldr	r3, [pc, #404]	; (8000bec <displayFSM_update+0x2d8>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_DOS;
 8000a5c:	4b64      	ldr	r3, [pc, #400]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000a5e:	226b      	movs	r2, #107	; 0x6b
 8000a60:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000a62:	4b65      	ldr	r3, [pc, #404]	; (8000bf8 <displayFSM_update+0x2e4>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
		break;
 8000a68:	e0f0      	b.n	8000c4c <displayFSM_update+0x338>
				stateDisplay=State_3;
 8000a6a:	4b60      	ldr	r3, [pc, #384]	; (8000bec <displayFSM_update+0x2d8>)
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_TRES;
 8000a70:	4b5f      	ldr	r3, [pc, #380]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000a72:	226e      	movs	r2, #110	; 0x6e
 8000a74:	701a      	strb	r2, [r3, #0]
		break;
 8000a76:	e0e9      	b.n	8000c4c <displayFSM_update+0x338>
		 *Si se detecta pulsación en boton UP, se avanza al estado 5.
		 *Si se detecta pulsación en boton DOWN, se retrocede al estado 3.
		 *Si no se detecta pulsación alguna, se mantiene en estado 4.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_4:
			if(readKeyUP()){
 8000a78:	f7ff feae 	bl	80007d8 <readKeyUP>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d009      	beq.n	8000a96 <displayFSM_update+0x182>
				stateDisplay=State_5;
 8000a82:	4b5a      	ldr	r3, [pc, #360]	; (8000bec <displayFSM_update+0x2d8>)
 8000a84:	2205      	movs	r2, #5
 8000a86:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CINCO;
 8000a88:	4b59      	ldr	r3, [pc, #356]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000a8a:	223e      	movs	r2, #62	; 0x3e
 8000a8c:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000a8e:	4b59      	ldr	r3, [pc, #356]	; (8000bf4 <displayFSM_update+0x2e0>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_4;
				numeroDisplay=NRO_CUATRO;
			}
		break;
 8000a94:	e0da      	b.n	8000c4c <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000a96:	f7ff feb7 	bl	8000808 <readKeyDOWN>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d009      	beq.n	8000ab4 <displayFSM_update+0x1a0>
				stateDisplay=State_3;
 8000aa0:	4b52      	ldr	r3, [pc, #328]	; (8000bec <displayFSM_update+0x2d8>)
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_TRES;
 8000aa6:	4b52      	ldr	r3, [pc, #328]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000aa8:	226e      	movs	r2, #110	; 0x6e
 8000aaa:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000aac:	4b52      	ldr	r3, [pc, #328]	; (8000bf8 <displayFSM_update+0x2e4>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
		break;
 8000ab2:	e0cb      	b.n	8000c4c <displayFSM_update+0x338>
				stateDisplay=State_4;
 8000ab4:	4b4d      	ldr	r3, [pc, #308]	; (8000bec <displayFSM_update+0x2d8>)
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CUATRO;
 8000aba:	4b4d      	ldr	r3, [pc, #308]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000abc:	225c      	movs	r2, #92	; 0x5c
 8000abe:	701a      	strb	r2, [r3, #0]
		break;
 8000ac0:	e0c4      	b.n	8000c4c <displayFSM_update+0x338>
		 *Si se detecta pulsación en boton UP, se avanza al estado 6.
		 *Si se detecta pulsación en boton DOWN, se retrocede al estado 4.
		 *Si no se detecta pulsación alguna, se mantiene en estado 5.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_5:
			if(readKeyUP()){
 8000ac2:	f7ff fe89 	bl	80007d8 <readKeyUP>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d009      	beq.n	8000ae0 <displayFSM_update+0x1cc>
				stateDisplay=State_6;
 8000acc:	4b47      	ldr	r3, [pc, #284]	; (8000bec <displayFSM_update+0x2d8>)
 8000ace:	2206      	movs	r2, #6
 8000ad0:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SEIS;
 8000ad2:	4b47      	ldr	r3, [pc, #284]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000ad4:	223f      	movs	r2, #63	; 0x3f
 8000ad6:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000ad8:	4b46      	ldr	r3, [pc, #280]	; (8000bf4 <displayFSM_update+0x2e0>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_5;
				numeroDisplay=NRO_CINCO;
			}
		break;
 8000ade:	e0b5      	b.n	8000c4c <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000ae0:	f7ff fe92 	bl	8000808 <readKeyDOWN>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d009      	beq.n	8000afe <displayFSM_update+0x1ea>
				stateDisplay=State_4;
 8000aea:	4b40      	ldr	r3, [pc, #256]	; (8000bec <displayFSM_update+0x2d8>)
 8000aec:	2204      	movs	r2, #4
 8000aee:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CUATRO;
 8000af0:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000af2:	225c      	movs	r2, #92	; 0x5c
 8000af4:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000af6:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <displayFSM_update+0x2e4>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
		break;
 8000afc:	e0a6      	b.n	8000c4c <displayFSM_update+0x338>
				stateDisplay=State_5;
 8000afe:	4b3b      	ldr	r3, [pc, #236]	; (8000bec <displayFSM_update+0x2d8>)
 8000b00:	2205      	movs	r2, #5
 8000b02:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CINCO;
 8000b04:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000b06:	223e      	movs	r2, #62	; 0x3e
 8000b08:	701a      	strb	r2, [r3, #0]
		break;
 8000b0a:	e09f      	b.n	8000c4c <displayFSM_update+0x338>
		 *Si se detecta pulsación en boton UP, se avanza al estado 7.
		 *Si se detecta pulsación en boton DOWN, se retrocede al estado 5.
		 *Si no se detecta pulsación alguna, se mantiene en estado 6.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_6:
			if(readKeyUP()){
 8000b0c:	f7ff fe64 	bl	80007d8 <readKeyUP>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d009      	beq.n	8000b2a <displayFSM_update+0x216>
				stateDisplay=State_7;
 8000b16:	4b35      	ldr	r3, [pc, #212]	; (8000bec <displayFSM_update+0x2d8>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SIETE;
 8000b1c:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000b1e:	2264      	movs	r2, #100	; 0x64
 8000b20:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000b22:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <displayFSM_update+0x2e0>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_6;
				numeroDisplay=NRO_SEIS;
			}
		break;
 8000b28:	e090      	b.n	8000c4c <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000b2a:	f7ff fe6d 	bl	8000808 <readKeyDOWN>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d009      	beq.n	8000b48 <displayFSM_update+0x234>
				stateDisplay=State_5;
 8000b34:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <displayFSM_update+0x2d8>)
 8000b36:	2205      	movs	r2, #5
 8000b38:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CINCO;
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000b3c:	223e      	movs	r2, #62	; 0x3e
 8000b3e:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <displayFSM_update+0x2e4>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
		break;
 8000b46:	e081      	b.n	8000c4c <displayFSM_update+0x338>
				stateDisplay=State_6;
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <displayFSM_update+0x2d8>)
 8000b4a:	2206      	movs	r2, #6
 8000b4c:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SEIS;
 8000b4e:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000b50:	223f      	movs	r2, #63	; 0x3f
 8000b52:	701a      	strb	r2, [r3, #0]
		break;
 8000b54:	e07a      	b.n	8000c4c <displayFSM_update+0x338>
		 *Si se detecta pulsación en boton UP, se avanza al estado 8.
		 *Si se detecta pulsación en boton DOWN, se retrocede al estado 6.
		 *Si no se detecta pulsación alguna, se mantiene en estado 7.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_7:
			if(readKeyUP()){
 8000b56:	f7ff fe3f 	bl	80007d8 <readKeyUP>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d009      	beq.n	8000b74 <displayFSM_update+0x260>
				stateDisplay=State_8;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <displayFSM_update+0x2d8>)
 8000b62:	2208      	movs	r2, #8
 8000b64:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_OCHO;
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000b68:	227f      	movs	r2, #127	; 0x7f
 8000b6a:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <displayFSM_update+0x2e0>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_7;
				numeroDisplay=NRO_SIETE;
			}
		break;
 8000b72:	e06b      	b.n	8000c4c <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000b74:	f7ff fe48 	bl	8000808 <readKeyDOWN>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d009      	beq.n	8000b92 <displayFSM_update+0x27e>
				stateDisplay=State_6;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <displayFSM_update+0x2d8>)
 8000b80:	2206      	movs	r2, #6
 8000b82:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SEIS;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000b86:	223f      	movs	r2, #63	; 0x3f
 8000b88:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <displayFSM_update+0x2e4>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
		break;
 8000b90:	e05c      	b.n	8000c4c <displayFSM_update+0x338>
				stateDisplay=State_7;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <displayFSM_update+0x2d8>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SIETE;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000b9a:	2264      	movs	r2, #100	; 0x64
 8000b9c:	701a      	strb	r2, [r3, #0]
		break;
 8000b9e:	e055      	b.n	8000c4c <displayFSM_update+0x338>
		 *Si se detecta pulsación en boton UP, se avanza al estado 9.
		 *Si se detecta pulsación en boton DOWN, se retrocede al estado 7.
		 *Si no se detecta pulsación alguna, se mantiene en estado 8.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_8:
			if(readKeyUP()){
 8000ba0:	f7ff fe1a 	bl	80007d8 <readKeyUP>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d009      	beq.n	8000bbe <displayFSM_update+0x2aa>
				stateDisplay=State_9;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <displayFSM_update+0x2d8>)
 8000bac:	2209      	movs	r2, #9
 8000bae:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_NUEVE;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000bb2:	227c      	movs	r2, #124	; 0x7c
 8000bb4:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <displayFSM_update+0x2e0>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_8;
				numeroDisplay=NRO_OCHO;
			}
		break;
 8000bbc:	e046      	b.n	8000c4c <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000bbe:	f7ff fe23 	bl	8000808 <readKeyDOWN>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d009      	beq.n	8000bdc <displayFSM_update+0x2c8>
				stateDisplay=State_7;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <displayFSM_update+0x2d8>)
 8000bca:	2207      	movs	r2, #7
 8000bcc:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_SIETE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000bd0:	2264      	movs	r2, #100	; 0x64
 8000bd2:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <displayFSM_update+0x2e4>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
		break;
 8000bda:	e037      	b.n	8000c4c <displayFSM_update+0x338>
				stateDisplay=State_8;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <displayFSM_update+0x2d8>)
 8000bde:	2208      	movs	r2, #8
 8000be0:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_OCHO;
 8000be2:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <displayFSM_update+0x2dc>)
 8000be4:	227f      	movs	r2, #127	; 0x7f
 8000be6:	701a      	strb	r2, [r3, #0]
		break;
 8000be8:	e030      	b.n	8000c4c <displayFSM_update+0x338>
 8000bea:	bf00      	nop
 8000bec:	2000011b 	.word	0x2000011b
 8000bf0:	2000011c 	.word	0x2000011c
 8000bf4:	2000011d 	.word	0x2000011d
 8000bf8:	2000011e 	.word	0x2000011e
		 *Si se detecta pulsación en boton UP, se avanza al estado 0.
		 *Si se detecta pulsación en boton DOWN, se retrocede al estado 8.
		 *Si no se detecta pulsación alguna, se mantiene en estado 9.
		 *Se actualiza el valor de array de estados en variable numeroDisplay.*/
		case State_9:
			if(readKeyUP()){
 8000bfc:	f7ff fdec 	bl	80007d8 <readKeyUP>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d009      	beq.n	8000c1a <displayFSM_update+0x306>
				stateDisplay=State_0;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <displayFSM_update+0x33c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_CERO;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <displayFSM_update+0x340>)
 8000c0e:	2277      	movs	r2, #119	; 0x77
 8000c10:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <displayFSM_update+0x344>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateDisplay=State_9;
				numeroDisplay=NRO_NUEVE;
			}
		break;
 8000c18:	e018      	b.n	8000c4c <displayFSM_update+0x338>
			else if(readKeyDOWN()){
 8000c1a:	f7ff fdf5 	bl	8000808 <readKeyDOWN>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d009      	beq.n	8000c38 <displayFSM_update+0x324>
				stateDisplay=State_8;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <displayFSM_update+0x33c>)
 8000c26:	2208      	movs	r2, #8
 8000c28:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_OCHO;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <displayFSM_update+0x340>)
 8000c2c:	227f      	movs	r2, #127	; 0x7f
 8000c2e:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <displayFSM_update+0x348>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
		break;
 8000c36:	e009      	b.n	8000c4c <displayFSM_update+0x338>
				stateDisplay=State_9;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <displayFSM_update+0x33c>)
 8000c3a:	2209      	movs	r2, #9
 8000c3c:	701a      	strb	r2, [r3, #0]
				numeroDisplay=NRO_NUEVE;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <displayFSM_update+0x340>)
 8000c40:	227c      	movs	r2, #124	; 0x7c
 8000c42:	701a      	strb	r2, [r3, #0]
		break;
 8000c44:	e002      	b.n	8000c4c <displayFSM_update+0x338>

		/*Por default, la MEF retorna a su estado inicial.*/
		default:
		displayFSM_init();
 8000c46:	f7ff fe4d 	bl	80008e4 <displayFSM_init>
		break;
 8000c4a:	bf00      	nop
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000011b 	.word	0x2000011b
 8000c54:	2000011c 	.word	0x2000011c
 8000c58:	2000011d 	.word	0x2000011d
 8000c5c:	2000011e 	.word	0x2000011e

08000c60 <getStateDisplay>:

/*getStateDisplay.
 *Función que devuelve una copia del array de estados de los puertos GPIO.
 *Si detecta que existió pulsación alguna, llama a la función sendMessageByUart para comunicarlo por UART.*/
uint8_t getStateDisplay(void){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
	uint8_t representacionNumero;
	if(displayUP==true || displayDOWN==true){
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <getStateDisplay+0x2c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d103      	bne.n	8000c76 <getStateDisplay+0x16>
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <getStateDisplay+0x30>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <getStateDisplay+0x1a>
		sendMessageByUart();
 8000c76:	f000 f80f 	bl	8000c98 <sendMessageByUart>
	}
	representacionNumero = numeroDisplay;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <getStateDisplay+0x34>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
	return representacionNumero;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000011d 	.word	0x2000011d
 8000c90:	2000011e 	.word	0x2000011e
 8000c94:	2000011c 	.word	0x2000011c

08000c98 <sendMessageByUart>:

/*sendMessageByUart.
 *Función privada que comunica por UART la pulsación detectada.
 *Indica que boton fue presionado, junto con el valor expresado en el display.*/
static void sendMessageByUart(void){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	uint8_t numero[NRO_CARACTERES_ESTADO]={};
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	80bb      	strh	r3, [r7, #4]
	if (displayUP==true){
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <sendMessageByUart+0x58>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d005      	beq.n	8000cb6 <sendMessageByUart+0x1e>
		uartSendString((uint8_t*)BUpress);
 8000caa:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <sendMessageByUart+0x5c>)
 8000cac:	f000 fa02 	bl	80010b4 <uartSendString>
		displayUP =false;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <sendMessageByUart+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
	}
	if(displayDOWN==true){
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <sendMessageByUart+0x60>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d005      	beq.n	8000cca <sendMessageByUart+0x32>
		uartSendString((uint8_t*)BDpress);
 8000cbe:	480f      	ldr	r0, [pc, #60]	; (8000cfc <sendMessageByUart+0x64>)
 8000cc0:	f000 f9f8 	bl	80010b4 <uartSendString>
		displayDOWN=false;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <sendMessageByUart+0x60>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
	}
	/*Se convierte el valor de estado de MEF a caracter y se envia por UART.*/
	sprintf((char*) numero, "%d",(int) stateDisplay);
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <sendMessageByUart+0x68>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	490c      	ldr	r1, [pc, #48]	; (8000d04 <sendMessageByUart+0x6c>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 f8b7 	bl	8002e48 <siprintf>
	uartSendString((uint8_t*)nuevoValor);
 8000cda:	480b      	ldr	r0, [pc, #44]	; (8000d08 <sendMessageByUart+0x70>)
 8000cdc:	f000 f9ea 	bl	80010b4 <uartSendString>
	uartSendString((uint8_t*)numero);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f9e6 	bl	80010b4 <uartSendString>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000011d 	.word	0x2000011d
 8000cf4:	2000001c 	.word	0x2000001c
 8000cf8:	2000011e 	.word	0x2000011e
 8000cfc:	20000038 	.word	0x20000038
 8000d00:	2000011b 	.word	0x2000011b
 8000d04:	0800373c 	.word	0x0800373c
 8000d08:	20000000 	.word	0x20000000

08000d0c <gpioDisplay_init>:
#include "API_display.h"
#include "API_gpio.h"

/*gpioDisplay_init:
 *Configura los puertos D0 a D6 como salidas.*/
void gpioDisplay_init(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpioInit={0};
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

	/*Habilita clocks para los puertos E,F y G.*/
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <gpioDisplay_init+0xf0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <gpioDisplay_init+0xf0>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <gpioDisplay_init+0xf0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <gpioDisplay_init+0xf0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <gpioDisplay_init+0xf0>)
 8000d48:	f043 0320 	orr.w	r3, r3, #32
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <gpioDisplay_init+0xf0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0320 	and.w	r3, r3, #32
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <gpioDisplay_init+0xf0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a26      	ldr	r2, [pc, #152]	; (8000dfc <gpioDisplay_init+0xf0>)
 8000d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <gpioDisplay_init+0xf0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

	/*Configuración de los pines D3, D5 y D6 (ubicados en puerto E) como salidas.*/
	gpioInit.Pin = (D3_PIN | D5_PIN | D6_PIN);
 8000d76:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000d7a:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode= GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(D3_PORT, &gpioInit);
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	481c      	ldr	r0, [pc, #112]	; (8000e00 <gpioDisplay_init+0xf4>)
 8000d90:	f000 fc94 	bl	80016bc <HAL_GPIO_Init>

	/*Configuración de los pines D2 y D4 (ubicados en puerto F) como salidas.*/
	gpioInit.Pin = (D2_PIN | D4_PIN);
 8000d94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d98:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode= GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(D2_PORT, &gpioInit);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	4619      	mov	r1, r3
 8000dac:	4815      	ldr	r0, [pc, #84]	; (8000e04 <gpioDisplay_init+0xf8>)
 8000dae:	f000 fc85 	bl	80016bc <HAL_GPIO_Init>

	/*Configuración de los pines D0 y D1 (ubicados en puerto G) como salidas.*/
	gpioInit.Pin = (D0_PIN | D1_PIN);
 8000db2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000db6:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode= GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(D0_PORT, &gpioInit);
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480f      	ldr	r0, [pc, #60]	; (8000e08 <gpioDisplay_init+0xfc>)
 8000dcc:	f000 fc76 	bl	80016bc <HAL_GPIO_Init>

	/*Pone en estado LOW a los pines antes nombrados*/
	HAL_GPIO_WritePin(D3_PORT,D3_PIN|D5_PIN| D6_PIN, LOW);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8000dd6:	480a      	ldr	r0, [pc, #40]	; (8000e00 <gpioDisplay_init+0xf4>)
 8000dd8:	f000 fe34 	bl	8001a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_PORT,D2_PIN|D4_PIN, LOW);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000de2:	4808      	ldr	r0, [pc, #32]	; (8000e04 <gpioDisplay_init+0xf8>)
 8000de4:	f000 fe2e 	bl	8001a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D0_PORT,D0_PIN|D1_PIN, LOW);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <gpioDisplay_init+0xfc>)
 8000df0:	f000 fe28 	bl	8001a44 <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40021400 	.word	0x40021400
 8000e08:	40021800 	.word	0x40021800

08000e0c <gpioButton_init>:

/*gpioButton_init:
 *Configura el puerto D15 como entrada.*/
void gpioButton_init(void){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpioButtonInit={0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

	/*Habilita clock para el puerto B.*/
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <gpioButton_init+0x54>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <gpioButton_init+0x54>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <gpioButton_init+0x54>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	683b      	ldr	r3, [r7, #0]

	/*Configuracion del pin D15 como entrada.*/
	gpioButtonInit.Pin = (D15_PIN);
 8000e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e40:	607b      	str	r3, [r7, #4]
	gpioButtonInit.Mode= GPIO_MODE_INPUT;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
	gpioButtonInit.Pull = GPIO_PULLUP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
	gpioButtonInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(D15_PORT, &gpioButtonInit);
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4804      	ldr	r0, [pc, #16]	; (8000e64 <gpioButton_init+0x58>)
 8000e54:	f000 fc32 	bl	80016bc <HAL_GPIO_Init>
}
 8000e58:	bf00      	nop
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400

08000e68 <gpioButton_Read>:

/*gpioButton_Read:
 *Función que devuelve el estado del interruptor externo (conectado en D15).
 *Si el pulsador esta presionado, devuelve un estado booleano TRUE.
 *Si el pulsador esta liberado, devuelve un estado booleano FALSE.*/
bool_t gpioButton_Read(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	bool_t stateButton=false;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	71fb      	strb	r3, [r7, #7]

	/*Debido a la configuración del puerto D15 como entrada PULL UP, al presionarlo
	 *setea un estado BAJO al puerto D15.
	 *Para invertirlo a estado ALTO, se niega la consulta HAL_GPIO_ReadPin dentro del condicional IF.*/
	if(!HAL_GPIO_ReadPin(D15_PORT, D15_PIN)){
 8000e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e76:	4808      	ldr	r0, [pc, #32]	; (8000e98 <gpioButton_Read+0x30>)
 8000e78:	f000 fdcc 	bl	8001a14 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <gpioButton_Read+0x20>
		stateButton=true;
 8000e82:	2301      	movs	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	e001      	b.n	8000e8c <gpioButton_Read+0x24>
	}
	else{
		stateButton=false;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	71fb      	strb	r3, [r7, #7]
	}
	return stateButton;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40020400 	.word	0x40020400

08000e9c <gpioDisplay_write>:

/*gpioDisplay_write:
 *Actualiza el estado de los puertos D0 a D6, generando la representación de números en el display.*/
void gpioDisplay_write(uint8_t valorDisplay){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	uint8_t estadoLed[NUMERO_LEDS_DISPLAY];
	uint8_t representacion;

	/*Verifica si el parámetro de entrada es el adecuado.*/
	if (valorDisplay == NRO_CERO || valorDisplay == NRO_UNO ||
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b77      	cmp	r3, #119	; 0x77
 8000eaa:	d01a      	beq.n	8000ee2 <gpioDisplay_write+0x46>
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b44      	cmp	r3, #68	; 0x44
 8000eb0:	d017      	beq.n	8000ee2 <gpioDisplay_write+0x46>
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b6b      	cmp	r3, #107	; 0x6b
 8000eb6:	d014      	beq.n	8000ee2 <gpioDisplay_write+0x46>
	    valorDisplay == NRO_DOS || valorDisplay == NRO_TRES ||
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b6e      	cmp	r3, #110	; 0x6e
 8000ebc:	d011      	beq.n	8000ee2 <gpioDisplay_write+0x46>
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b5c      	cmp	r3, #92	; 0x5c
 8000ec2:	d00e      	beq.n	8000ee2 <gpioDisplay_write+0x46>
		valorDisplay == NRO_CUATRO || valorDisplay == NRO_CINCO ||
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b3e      	cmp	r3, #62	; 0x3e
 8000ec8:	d00b      	beq.n	8000ee2 <gpioDisplay_write+0x46>
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b3f      	cmp	r3, #63	; 0x3f
 8000ece:	d008      	beq.n	8000ee2 <gpioDisplay_write+0x46>
		valorDisplay == NRO_SEIS || valorDisplay == NRO_SIETE ||
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d005      	beq.n	8000ee2 <gpioDisplay_write+0x46>
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eda:	d002      	beq.n	8000ee2 <gpioDisplay_write+0x46>
		valorDisplay == NRO_OCHO || valorDisplay == NRO_NUEVE){
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b7c      	cmp	r3, #124	; 0x7c
 8000ee0:	d104      	bne.n	8000eec <gpioDisplay_write+0x50>
		representacion=valorDisplay;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	74fb      	strb	r3, [r7, #19]
		while(1){
			BSP_LED_On(LED1);
		}
	}

	for (int i=0;i<NUMERO_LEDS_DISPLAY;i++){
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e01b      	b.n	8000f24 <gpioDisplay_write+0x88>
			BSP_LED_On(LED1);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 f947 	bl	8001180 <BSP_LED_On>
 8000ef2:	e7fb      	b.n	8000eec <gpioDisplay_write+0x50>
		/*Se separa y analiza cada bit del array de entrada.
		 *Se genera un nuevo array en donde se almacena el estado que deber adquirir cada puerto GPIO de salida.
		 *Si el bit posee un valor 1, se le asigna estado HIGH.
		 *Si el bit posee un valor 0, se le asigna un estado LOW*/
		if((representacion>>i)&MASCARA_SEPARA_BITS){
 8000ef4:	7cfa      	ldrb	r2, [r7, #19]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa42 f303 	asr.w	r3, r2, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d006      	beq.n	8000f12 <gpioDisplay_write+0x76>
			estadoLed[i]=HIGH;
 8000f04:	f107 020c 	add.w	r2, r7, #12
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	e005      	b.n	8000f1e <gpioDisplay_write+0x82>
		}
		else{
			estadoLed[i]=LOW;
 8000f12:	f107 020c 	add.w	r2, r7, #12
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	4413      	add	r3, r2
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<NUMERO_LEDS_DISPLAY;i++){
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	dde4      	ble.n	8000ef4 <gpioDisplay_write+0x58>
		}
	}

	/*Setea los estados de los puertos GPIO en HIGH o LOW, segun corresponda.*/
	HAL_GPIO_WritePin(D0_PORT, D0_PIN, 	estadoLed[0]);
 8000f2a:	7b3b      	ldrb	r3, [r7, #12]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f32:	4818      	ldr	r0, [pc, #96]	; (8000f94 <gpioDisplay_write+0xf8>)
 8000f34:	f000 fd86 	bl	8001a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_PORT, D1_PIN,	estadoLed[1]);
 8000f38:	7b7b      	ldrb	r3, [r7, #13]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f40:	4814      	ldr	r0, [pc, #80]	; (8000f94 <gpioDisplay_write+0xf8>)
 8000f42:	f000 fd7f 	bl	8001a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_PORT, D2_PIN, 	estadoLed[2]);
 8000f46:	7bbb      	ldrb	r3, [r7, #14]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f4e:	4812      	ldr	r0, [pc, #72]	; (8000f98 <gpioDisplay_write+0xfc>)
 8000f50:	f000 fd78 	bl	8001a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_PORT, D3_PIN, 	estadoLed[3]);
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	461a      	mov	r2, r3
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	480f      	ldr	r0, [pc, #60]	; (8000f9c <gpioDisplay_write+0x100>)
 8000f5e:	f000 fd71 	bl	8001a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_PORT, D4_PIN, 	estadoLed[4]);
 8000f62:	7c3b      	ldrb	r3, [r7, #16]
 8000f64:	461a      	mov	r2, r3
 8000f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6a:	480b      	ldr	r0, [pc, #44]	; (8000f98 <gpioDisplay_write+0xfc>)
 8000f6c:	f000 fd6a 	bl	8001a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_PORT, D5_PIN, 	estadoLed[5]);
 8000f70:	7c7b      	ldrb	r3, [r7, #17]
 8000f72:	461a      	mov	r2, r3
 8000f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <gpioDisplay_write+0x100>)
 8000f7a:	f000 fd63 	bl	8001a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_PORT, D6_PIN, 	estadoLed[6]);
 8000f7e:	7cbb      	ldrb	r3, [r7, #18]
 8000f80:	461a      	mov	r2, r3
 8000f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <gpioDisplay_write+0x100>)
 8000f88:	f000 fd5c 	bl	8001a44 <HAL_GPIO_WritePin>
}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <uartInit>:

/* uartInit:
 * Inicia la comunicación UART.
 * Envía mensaje indicando los parametros de su configuración.
 * Devuelve valor booleano TRUE si la iniciación fue exitosa.*/
bool_t uartInit(void){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
	 bool_t successfullInitialization=true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	75fb      	strb	r3, [r7, #23]
	 uint8_t baudRateValue[NRO_CARACTERES_CONVERSION]={};
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	753b      	strb	r3, [r7, #20]
	 uint8_t wordLengthValue[NRO_CARACTERES_CONVERSION]={};
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	733b      	strb	r3, [r7, #12]
	 uint8_t StopBitsValue[NRO_CARACTERES_CONVERSION]={};
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	713b      	strb	r3, [r7, #4]
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8000fc2:	4b32      	ldr	r3, [pc, #200]	; (800108c <uartInit+0xec>)
 8000fc4:	4a32      	ldr	r2, [pc, #200]	; (8001090 <uartInit+0xf0>)
 8000fc6:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = 9600;
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <uartInit+0xec>)
 8000fca:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fce:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <uartInit+0xec>)
 8000fd2:	2208      	movs	r2, #8
 8000fd4:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <uartInit+0xec>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <uartInit+0xec>)
 8000fde:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000fe2:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <uartInit+0xec>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <uartInit+0xec>)
 8000fec:	220c      	movs	r2, #12
 8000fee:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <uartInit+0xec>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000ff6:	4825      	ldr	r0, [pc, #148]	; (800108c <uartInit+0xec>)
 8000ff8:	f001 fa80 	bl	80024fc <HAL_UART_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <uartInit+0x68>
	  {
	    /* Initialization Error */
		successfullInitialization=false;
 8001002:	2300      	movs	r3, #0
 8001004:	75fb      	strb	r3, [r7, #23]
	    while(1){
 8001006:	e7fe      	b.n	8001006 <uartInit+0x66>
	    }

	  }

	  /*Función que convierte valor numérico a char.*/
	  sprintf((char*) baudRateValue, "%d",(int) UartHandle.Init.BaudRate);
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <uartInit+0xec>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	461a      	mov	r2, r3
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	4920      	ldr	r1, [pc, #128]	; (8001094 <uartInit+0xf4>)
 8001014:	4618      	mov	r0, r3
 8001016:	f001 ff17 	bl	8002e48 <siprintf>
	  sprintf((char*) wordLengthValue, "%d",(int) UartHandle.Init.WordLength);
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <uartInit+0xec>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	461a      	mov	r2, r3
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	491b      	ldr	r1, [pc, #108]	; (8001094 <uartInit+0xf4>)
 8001026:	4618      	mov	r0, r3
 8001028:	f001 ff0e 	bl	8002e48 <siprintf>
	  sprintf((char*) StopBitsValue, "%d",(int) UartHandle.Init.StopBits);
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <uartInit+0xec>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	461a      	mov	r2, r3
 8001032:	463b      	mov	r3, r7
 8001034:	4917      	ldr	r1, [pc, #92]	; (8001094 <uartInit+0xf4>)
 8001036:	4618      	mov	r0, r3
 8001038:	f001 ff06 	bl	8002e48 <siprintf>

	  /*Se informa la configuración de los parametros UART.*/
	  uartSendString((uint8_t*)"Uart Iniciada\n\r");
 800103c:	4816      	ldr	r0, [pc, #88]	; (8001098 <uartInit+0xf8>)
 800103e:	f000 f839 	bl	80010b4 <uartSendString>
	  uartSendString((uint8_t*)"-----Parametros UART-----\n\r");
 8001042:	4816      	ldr	r0, [pc, #88]	; (800109c <uartInit+0xfc>)
 8001044:	f000 f836 	bl	80010b4 <uartSendString>
	  uartSendString((uint8_t*)"\n\rBaud rate: ");
 8001048:	4815      	ldr	r0, [pc, #84]	; (80010a0 <uartInit+0x100>)
 800104a:	f000 f833 	bl	80010b4 <uartSendString>
	  uartSendString((uint8_t*)baudRateValue);
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f82e 	bl	80010b4 <uartSendString>
	  uartSendString((uint8_t*)"\n\rWord Length: ");
 8001058:	4812      	ldr	r0, [pc, #72]	; (80010a4 <uartInit+0x104>)
 800105a:	f000 f82b 	bl	80010b4 <uartSendString>
	  uartSendString((uint8_t*)wordLengthValue);
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f826 	bl	80010b4 <uartSendString>
	  uartSendString((uint8_t*)"\n\rStop Bits: ");
 8001068:	480f      	ldr	r0, [pc, #60]	; (80010a8 <uartInit+0x108>)
 800106a:	f000 f823 	bl	80010b4 <uartSendString>
	  uartSendString((uint8_t*)StopBitsValue);
 800106e:	463b      	mov	r3, r7
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f81f 	bl	80010b4 <uartSendString>
	  uartSendString((uint8_t*)"\n\rParity: Odd");
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <uartInit+0x10c>)
 8001078:	f000 f81c 	bl	80010b4 <uartSendString>
	  uartSendString((uint8_t*)"\n\r");
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <uartInit+0x110>)
 800107e:	f000 f819 	bl	80010b4 <uartSendString>

	  return successfullInitialization;
 8001082:	7dfb      	ldrb	r3, [r7, #23]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000120 	.word	0x20000120
 8001090:	40004800 	.word	0x40004800
 8001094:	08003740 	.word	0x08003740
 8001098:	08003744 	.word	0x08003744
 800109c:	08003754 	.word	0x08003754
 80010a0:	08003770 	.word	0x08003770
 80010a4:	08003780 	.word	0x08003780
 80010a8:	08003790 	.word	0x08003790
 80010ac:	080037a0 	.word	0x080037a0
 80010b0:	080037b0 	.word	0x080037b0

080010b4 <uartSendString>:

/* uartSendString:
 * Función que envia un mensaje por UART.
 * Recibe un puntero a array como parametro, el cual contiene el mensaje a enviar.*/
void uartSendString(uint8_t * pstring){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UartHandle,(uint8_t*) pstring,strlen((const char*) pstring), TIME_OUT_UART);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff f897 	bl	80001f0 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <uartSendString+0x28>)
 80010ce:	f001 fa62 	bl	8002596 <HAL_UART_Transmit>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000120 	.word	0x20000120

080010e0 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10e      	bne.n	800110e <BSP_LED_Init+0x2e>
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <BSP_LED_Init+0x94>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <BSP_LED_Init+0x94>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <BSP_LED_Init+0x94>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	e00d      	b.n	800112a <BSP_LED_Init+0x4a>
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <BSP_LED_Init+0x94>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a17      	ldr	r2, [pc, #92]	; (8001174 <BSP_LED_Init+0x94>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <BSP_LED_Init+0x94>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <BSP_LED_Init+0x98>)
 800112e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800113c:	2302      	movs	r3, #2
 800113e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <BSP_LED_Init+0x9c>)
 8001144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001148:	f107 0214 	add.w	r2, r7, #20
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fab4 	bl	80016bc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <BSP_LED_Init+0x9c>)
 8001158:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4a06      	ldr	r2, [pc, #24]	; (8001178 <BSP_LED_Init+0x98>)
 8001160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	f000 fc6c 	bl	8001a44 <HAL_GPIO_WritePin>
}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	080037b4 	.word	0x080037b4
 800117c:	20000054 	.word	0x20000054

08001180 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <BSP_LED_On+0x2c>)
 800118e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <BSP_LED_On+0x30>)
 8001196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119a:	2201      	movs	r2, #1
 800119c:	4619      	mov	r1, r3
 800119e:	f000 fc51 	bl	8001a44 <HAL_GPIO_WritePin>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000054 	.word	0x20000054
 80011b0:	080037b4 	.word	0x080037b4

080011b4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <BSP_PB_Init+0xa4>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4a22      	ldr	r2, [pc, #136]	; (8001258 <BSP_PB_Init+0xa4>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6313      	str	r3, [r2, #48]	; 0x30
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <BSP_PB_Init+0xa4>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d112      	bne.n	800120c <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80011e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011f0:	2302      	movs	r3, #2
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <BSP_PB_Init+0xa8>)
 80011fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001200:	f107 020c 	add.w	r2, r7, #12
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fa58 	bl	80016bc <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d11d      	bne.n	800124e <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001216:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 800121c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001220:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <BSP_PB_Init+0xa8>)
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fa43 	bl	80016bc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001236:	2328      	movs	r3, #40	; 0x28
 8001238:	b25b      	sxtb	r3, r3
 800123a:	2200      	movs	r2, #0
 800123c:	210f      	movs	r1, #15
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fa05 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001244:	2328      	movs	r3, #40	; 0x28
 8001246:	b25b      	sxtb	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fa1c 	bl	8001686 <HAL_NVIC_EnableIRQ>
  }
}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	20000060 	.word	0x20000060

08001260 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <BSP_PB_GetState+0x28>)
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fbcb 	bl	8001a14 <HAL_GPIO_ReadPin>
 800127e:	4603      	mov	r3, r0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000060 	.word	0x20000060

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <SystemInit+0x60>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a15      	ldr	r2, [pc, #84]	; (80012ec <SystemInit+0x60>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <SystemInit+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <SystemInit+0x64>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <SystemInit+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <SystemInit+0x64>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <SystemInit+0x64>)
 80012b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <SystemInit+0x64>)
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <SystemInit+0x68>)
 80012c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <SystemInit+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <SystemInit+0x64>)
 80012ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <SystemInit+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SystemInit+0x60>)
 80012dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e0:	609a      	str	r2, [r3, #8]
#endif
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00
 80012f0:	40023800 	.word	0x40023800
 80012f4:	24003010 	.word	0x24003010

080012f8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler+0x4>

08001312 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001316:	e7fe      	b.n	8001316 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800131c:	e7fe      	b.n	800131c <UsageFault_Handler+0x4>

0800131e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800134c:	f000 f884 	bl	8001458 <HAL_IncTick>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800135c:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <_sbrk+0x5c>)
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <_sbrk+0x60>)
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <_sbrk+0x64>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <_sbrk+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	429a      	cmp	r2, r3
 8001382:	d207      	bcs.n	8001394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001384:	f001 fd36 	bl	8002df4 <__errno>
 8001388:	4603      	mov	r3, r0
 800138a:	220c      	movs	r2, #12
 800138c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e009      	b.n	80013a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <_sbrk+0x64>)
 80013a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20030000 	.word	0x20030000
 80013b4:	00000400 	.word	0x00000400
 80013b8:	20000164 	.word	0x20000164
 80013bc:	20000180 	.word	0x20000180

080013c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_Init+0x34>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_Init+0x34>)
 80013ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ce:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_Init+0x34>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_Init+0x34>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f92b 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f000 fb98 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f943 	bl	80016a2 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f90b 	bl	800164e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000064 	.word	0x20000064
 8001450:	2000006c 	.word	0x2000006c
 8001454:	20000068 	.word	0x20000068

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000006c 	.word	0x2000006c
 800147c:	20000168 	.word	0x20000168

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000168 	.word	0x20000168

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff8e 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff29 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff3e 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff8e 	bl	800158c <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5d 	bl	8001538 <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff31 	bl	80014fc <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa2 	bl	80015f4 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	e177      	b.n	80019c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016d8:	2201      	movs	r2, #1
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	f040 8166 	bne.w	80019c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d005      	beq.n	800170e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170a:	2b02      	cmp	r3, #2
 800170c:	d130      	bne.n	8001770 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001744:	2201      	movs	r2, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 0201 	and.w	r2, r3, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b03      	cmp	r3, #3
 800177a:	d017      	beq.n	80017ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d123      	bne.n	8001800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	08da      	lsrs	r2, r3, #3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3208      	adds	r2, #8
 80017c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	08da      	lsrs	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3208      	adds	r2, #8
 80017fa:	69b9      	ldr	r1, [r7, #24]
 80017fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0203 	and.w	r2, r3, #3
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80c0 	beq.w	80019c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b66      	ldr	r3, [pc, #408]	; (80019e0 <HAL_GPIO_Init+0x324>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	4a65      	ldr	r2, [pc, #404]	; (80019e0 <HAL_GPIO_Init+0x324>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001850:	6453      	str	r3, [r2, #68]	; 0x44
 8001852:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <HAL_GPIO_Init+0x324>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800185e:	4a61      	ldr	r2, [pc, #388]	; (80019e4 <HAL_GPIO_Init+0x328>)
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3302      	adds	r3, #2
 8001866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	220f      	movs	r2, #15
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_GPIO_Init+0x32c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d037      	beq.n	80018fa <HAL_GPIO_Init+0x23e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a57      	ldr	r2, [pc, #348]	; (80019ec <HAL_GPIO_Init+0x330>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d031      	beq.n	80018f6 <HAL_GPIO_Init+0x23a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a56      	ldr	r2, [pc, #344]	; (80019f0 <HAL_GPIO_Init+0x334>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d02b      	beq.n	80018f2 <HAL_GPIO_Init+0x236>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a55      	ldr	r2, [pc, #340]	; (80019f4 <HAL_GPIO_Init+0x338>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d025      	beq.n	80018ee <HAL_GPIO_Init+0x232>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a54      	ldr	r2, [pc, #336]	; (80019f8 <HAL_GPIO_Init+0x33c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d01f      	beq.n	80018ea <HAL_GPIO_Init+0x22e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a53      	ldr	r2, [pc, #332]	; (80019fc <HAL_GPIO_Init+0x340>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d019      	beq.n	80018e6 <HAL_GPIO_Init+0x22a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a52      	ldr	r2, [pc, #328]	; (8001a00 <HAL_GPIO_Init+0x344>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0x226>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a51      	ldr	r2, [pc, #324]	; (8001a04 <HAL_GPIO_Init+0x348>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00d      	beq.n	80018de <HAL_GPIO_Init+0x222>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a50      	ldr	r2, [pc, #320]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x21e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4f      	ldr	r2, [pc, #316]	; (8001a0c <HAL_GPIO_Init+0x350>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_GPIO_Init+0x21a>
 80018d2:	2309      	movs	r3, #9
 80018d4:	e012      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018d6:	230a      	movs	r3, #10
 80018d8:	e010      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018da:	2308      	movs	r3, #8
 80018dc:	e00e      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018de:	2307      	movs	r3, #7
 80018e0:	e00c      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e00a      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018e6:	2305      	movs	r3, #5
 80018e8:	e008      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018ee:	2303      	movs	r3, #3
 80018f0:	e004      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e002      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018fa:	2300      	movs	r3, #0
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	f002 0203 	and.w	r2, r2, #3
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	4093      	lsls	r3, r2
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800190c:	4935      	ldr	r1, [pc, #212]	; (80019e4 <HAL_GPIO_Init+0x328>)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <HAL_GPIO_Init+0x354>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800193e:	4a34      	ldr	r2, [pc, #208]	; (8001a10 <HAL_GPIO_Init+0x354>)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_GPIO_Init+0x354>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001968:	4a29      	ldr	r2, [pc, #164]	; (8001a10 <HAL_GPIO_Init+0x354>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <HAL_GPIO_Init+0x354>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001992:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <HAL_GPIO_Init+0x354>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_GPIO_Init+0x354>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <HAL_GPIO_Init+0x354>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3301      	adds	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	f67f ae84 	bls.w	80016d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40013800 	.word	0x40013800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40021400 	.word	0x40021400
 8001a00:	40021800 	.word	0x40021800
 8001a04:	40021c00 	.word	0x40021c00
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	40022400 	.word	0x40022400
 8001a10:	40013c00 	.word	0x40013c00

08001a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	e001      	b.n	8001a36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
 8001a50:	4613      	mov	r3, r2
 8001a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a54:	787b      	ldrb	r3, [r7, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a60:	e003      	b.n	8001a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	041a      	lsls	r2, r3, #16
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	619a      	str	r2, [r3, #24]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4a22      	ldr	r2, [pc, #136]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001a8a:	f043 0308 	orr.w	r3, r3, #8
 8001a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a90:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001ac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_UART_MspInit+0x9c>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4809      	ldr	r0, [pc, #36]	; (8001b18 <HAL_UART_MspInit+0xa0>)
 8001af2:	f7ff fde3 	bl	80016bc <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001afc:	2307      	movs	r3, #7
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	4804      	ldr	r0, [pc, #16]	; (8001b18 <HAL_UART_MspInit+0xa0>)
 8001b08:	f7ff fdd8 	bl	80016bc <HAL_GPIO_Init>
}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020c00 	.word	0x40020c00

08001b1c <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_PWREx_EnableOverDrive+0x90>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <HAL_PWREx_EnableOverDrive+0x90>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_PWREx_EnableOverDrive+0x90>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b58:	f7ff fc92 	bl	8001480 <HAL_GetTick>
 8001b5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b5e:	e009      	b.n	8001b74 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b60:	f7ff fc8e 	bl	8001480 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b6e:	d901      	bls.n	8001b74 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e01f      	b.n	8001bb4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d1ee      	bne.n	8001b60 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b88:	f7ff fc7a 	bl	8001480 <HAL_GetTick>
 8001b8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b8e:	e009      	b.n	8001ba4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b90:	f7ff fc76 	bl	8001480 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b9e:	d901      	bls.n	8001ba4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e007      	b.n	8001bb4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bb0:	d1ee      	bne.n	8001b90 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	420e0040 	.word	0x420e0040
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	420e0044 	.word	0x420e0044

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e267      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d075      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bea:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d00c      	beq.n	8001c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf6:	4b85      	ldr	r3, [pc, #532]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d112      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c02:	4b82      	ldr	r3, [pc, #520]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c0e:	d10b      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	4b7e      	ldr	r3, [pc, #504]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d05b      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x108>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d157      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e242      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d106      	bne.n	8001c40 <HAL_RCC_OscConfig+0x74>
 8001c32:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a75      	ldr	r2, [pc, #468]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e01d      	b.n	8001c7c <HAL_RCC_OscConfig+0xb0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x98>
 8001c4a:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6f      	ldr	r2, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b6d      	ldr	r3, [pc, #436]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a6c      	ldr	r2, [pc, #432]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0xb0>
 8001c64:	4b69      	ldr	r3, [pc, #420]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a68      	ldr	r2, [pc, #416]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b66      	ldr	r3, [pc, #408]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a65      	ldr	r2, [pc, #404]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fbfc 	bl	8001480 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fbf8 	bl	8001480 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e207      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b5b      	ldr	r3, [pc, #364]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0xc0>
 8001caa:	e014      	b.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fbe8 	bl	8001480 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fbe4 	bl	8001480 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1f3      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	4b51      	ldr	r3, [pc, #324]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xe8>
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d063      	beq.n	8001daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d11c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfa:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d116      	bne.n	8001d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x152>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1c7      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4937      	ldr	r1, [pc, #220]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	e03a      	b.n	8001daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3c:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_RCC_OscConfig+0x244>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff fb9d 	bl	8001480 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fb99 	bl	8001480 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1a8      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4925      	ldr	r1, [pc, #148]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RCC_OscConfig+0x244>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff fb7c 	bl	8001480 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fb78 	bl	8001480 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e187      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d036      	beq.n	8001e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d016      	beq.n	8001dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_RCC_OscConfig+0x248>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fb5c 	bl	8001480 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fb58 	bl	8001480 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e167      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x200>
 8001dea:	e01b      	b.n	8001e24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_RCC_OscConfig+0x248>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fb45 	bl	8001480 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	e00e      	b.n	8001e18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fb41 	bl	8001480 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d907      	bls.n	8001e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e150      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	42470000 	.word	0x42470000
 8001e14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e18:	4b88      	ldr	r3, [pc, #544]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ea      	bne.n	8001dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8097 	beq.w	8001f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e36:	4b81      	ldr	r3, [pc, #516]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10f      	bne.n	8001e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	4b7d      	ldr	r3, [pc, #500]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a7c      	ldr	r2, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b7a      	ldr	r3, [pc, #488]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b77      	ldr	r3, [pc, #476]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4b74      	ldr	r3, [pc, #464]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a73      	ldr	r2, [pc, #460]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fb01 	bl	8001480 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff fafd 	bl	8001480 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e10c      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x2ea>
 8001ea8:	4b64      	ldr	r3, [pc, #400]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a63      	ldr	r2, [pc, #396]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x324>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x30c>
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a5e      	ldr	r2, [pc, #376]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eca:	4b5c      	ldr	r3, [pc, #368]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	4a5b      	ldr	r2, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x324>
 8001ed8:	4b58      	ldr	r3, [pc, #352]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	4a57      	ldr	r2, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee4:	4b55      	ldr	r3, [pc, #340]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	4a54      	ldr	r2, [pc, #336]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001eea:	f023 0304 	bic.w	r3, r3, #4
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d015      	beq.n	8001f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fac2 	bl	8001480 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7ff fabe 	bl	8001480 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0cb      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	4b49      	ldr	r3, [pc, #292]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0ee      	beq.n	8001f00 <HAL_RCC_OscConfig+0x334>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f24:	f7ff faac 	bl	8001480 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7ff faa8 	bl	8001480 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0b5      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1ee      	bne.n	8001f2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b39      	ldr	r3, [pc, #228]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a38      	ldr	r2, [pc, #224]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a1 	beq.w	80020ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6a:	4b34      	ldr	r3, [pc, #208]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d05c      	beq.n	8002030 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d141      	bne.n	8002002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b31      	ldr	r3, [pc, #196]	; (8002044 <HAL_RCC_OscConfig+0x478>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fa7c 	bl	8001480 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff fa78 	bl	8001480 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e087      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69da      	ldr	r2, [r3, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	491b      	ldr	r1, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x478>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff fa51 	bl	8001480 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7ff fa4d 	bl	8001480 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e05c      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x416>
 8002000:	e054      	b.n	80020ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_OscConfig+0x478>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fa3a 	bl	8001480 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff fa36 	bl	8001480 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e045      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_RCC_OscConfig+0x470>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x444>
 800202e:	e03d      	b.n	80020ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e038      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
 800203c:	40023800 	.word	0x40023800
 8002040:	40007000 	.word	0x40007000
 8002044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x4ec>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d028      	beq.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d121      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d11a      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002078:	4013      	ands	r3, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800207e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002080:	4293      	cmp	r3, r2
 8002082:	d111      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	085b      	lsrs	r3, r3, #1
 8002090:	3b01      	subs	r3, #1
 8002092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0cc      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d90c      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b65      	ldr	r3, [pc, #404]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0b8      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a58      	ldr	r2, [pc, #352]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800211a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b50      	ldr	r3, [pc, #320]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	494d      	ldr	r1, [pc, #308]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d044      	beq.n	80021dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d119      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e07f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002176:	2b03      	cmp	r3, #3
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e067      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219a:	4b37      	ldr	r3, [pc, #220]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4934      	ldr	r1, [pc, #208]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7ff f968 	bl	8001480 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7ff f964 	bl	8001480 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e04f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 020c 	and.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1eb      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d20c      	bcs.n	8002204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e032      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4916      	ldr	r1, [pc, #88]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	490e      	ldr	r1, [pc, #56]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002242:	f000 f821 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002246:	4602      	mov	r2, r0
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	490a      	ldr	r1, [pc, #40]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	5ccb      	ldrb	r3, [r1, r3]
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f8c8 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00
 8002278:	40023800 	.word	0x40023800
 800227c:	080037bc 	.word	0x080037bc
 8002280:	20000064 	.word	0x20000064
 8002284:	20000068 	.word	0x20000068

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800228c:	b094      	sub	sp, #80	; 0x50
 800228e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	647b      	str	r3, [r7, #68]	; 0x44
 8002294:	2300      	movs	r3, #0
 8002296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002298:	2300      	movs	r3, #0
 800229a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a0:	4b79      	ldr	r3, [pc, #484]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d00d      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x40>
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	f200 80e1 	bhi.w	8002474 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x34>
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ba:	e0db      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b73      	ldr	r3, [pc, #460]	; (800248c <HAL_RCC_GetSysClockFreq+0x204>)
 80022be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022c0:	e0db      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c2:	4b73      	ldr	r3, [pc, #460]	; (8002490 <HAL_RCC_GetSysClockFreq+0x208>)
 80022c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022c6:	e0d8      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c8:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d063      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022de:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	099b      	lsrs	r3, r3, #6
 80022e4:	2200      	movs	r2, #0
 80022e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80022e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f0:	633b      	str	r3, [r7, #48]	; 0x30
 80022f2:	2300      	movs	r3, #0
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
 80022f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022fa:	4622      	mov	r2, r4
 80022fc:	462b      	mov	r3, r5
 80022fe:	f04f 0000 	mov.w	r0, #0
 8002302:	f04f 0100 	mov.w	r1, #0
 8002306:	0159      	lsls	r1, r3, #5
 8002308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800230c:	0150      	lsls	r0, r2, #5
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4621      	mov	r1, r4
 8002314:	1a51      	subs	r1, r2, r1
 8002316:	6139      	str	r1, [r7, #16]
 8002318:	4629      	mov	r1, r5
 800231a:	eb63 0301 	sbc.w	r3, r3, r1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800232c:	4659      	mov	r1, fp
 800232e:	018b      	lsls	r3, r1, #6
 8002330:	4651      	mov	r1, sl
 8002332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002336:	4651      	mov	r1, sl
 8002338:	018a      	lsls	r2, r1, #6
 800233a:	4651      	mov	r1, sl
 800233c:	ebb2 0801 	subs.w	r8, r2, r1
 8002340:	4659      	mov	r1, fp
 8002342:	eb63 0901 	sbc.w	r9, r3, r1
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800235a:	4690      	mov	r8, r2
 800235c:	4699      	mov	r9, r3
 800235e:	4623      	mov	r3, r4
 8002360:	eb18 0303 	adds.w	r3, r8, r3
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	462b      	mov	r3, r5
 8002368:	eb49 0303 	adc.w	r3, r9, r3
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800237a:	4629      	mov	r1, r5
 800237c:	024b      	lsls	r3, r1, #9
 800237e:	4621      	mov	r1, r4
 8002380:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002384:	4621      	mov	r1, r4
 8002386:	024a      	lsls	r2, r1, #9
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238e:	2200      	movs	r2, #0
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
 8002392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002398:	f7fd ff82 	bl	80002a0 <__aeabi_uldivmod>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4613      	mov	r3, r2
 80023a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a4:	e058      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a6:	4b38      	ldr	r3, [pc, #224]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	099b      	lsrs	r3, r3, #6
 80023ac:	2200      	movs	r2, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	4611      	mov	r1, r2
 80023b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
 80023bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023c0:	4642      	mov	r2, r8
 80023c2:	464b      	mov	r3, r9
 80023c4:	f04f 0000 	mov.w	r0, #0
 80023c8:	f04f 0100 	mov.w	r1, #0
 80023cc:	0159      	lsls	r1, r3, #5
 80023ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d2:	0150      	lsls	r0, r2, #5
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4641      	mov	r1, r8
 80023da:	ebb2 0a01 	subs.w	sl, r2, r1
 80023de:	4649      	mov	r1, r9
 80023e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023f8:	ebb2 040a 	subs.w	r4, r2, sl
 80023fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	00eb      	lsls	r3, r5, #3
 800240a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800240e:	00e2      	lsls	r2, r4, #3
 8002410:	4614      	mov	r4, r2
 8002412:	461d      	mov	r5, r3
 8002414:	4643      	mov	r3, r8
 8002416:	18e3      	adds	r3, r4, r3
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	464b      	mov	r3, r9
 800241c:	eb45 0303 	adc.w	r3, r5, r3
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800242e:	4629      	mov	r1, r5
 8002430:	028b      	lsls	r3, r1, #10
 8002432:	4621      	mov	r1, r4
 8002434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002438:	4621      	mov	r1, r4
 800243a:	028a      	lsls	r2, r1, #10
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002442:	2200      	movs	r2, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	61fa      	str	r2, [r7, #28]
 8002448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800244c:	f7fd ff28 	bl	80002a0 <__aeabi_uldivmod>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4613      	mov	r3, r2
 8002456:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	3301      	adds	r3, #1
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800246a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002472:	e002      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_GetSysClockFreq+0x204>)
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800247c:	4618      	mov	r0, r3
 800247e:	3750      	adds	r7, #80	; 0x50
 8002480:	46bd      	mov	sp, r7
 8002482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	00f42400 	.word	0x00f42400
 8002490:	007a1200 	.word	0x007a1200

08002494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000064 	.word	0x20000064

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff0 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0a9b      	lsrs	r3, r3, #10
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	080037cc 	.word	0x080037cc

080024d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d8:	f7ff ffdc 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0b5b      	lsrs	r3, r3, #13
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	080037cc 	.word	0x080037cc

080024fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e03f      	b.n	800258e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff faa8 	bl	8001a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800253e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f929 	bl	8002798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b08a      	sub	sp, #40	; 0x28
 800259a:	af02      	add	r7, sp, #8
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4613      	mov	r3, r2
 80025a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	d17c      	bne.n	80026b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_UART_Transmit+0x2c>
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e075      	b.n	80026b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_UART_Transmit+0x3e>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e06e      	b.n	80026b2 <HAL_UART_Transmit+0x11c>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2221      	movs	r2, #33	; 0x21
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ea:	f7fe ff49 	bl	8001480 <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	88fa      	ldrh	r2, [r7, #6]
 80025fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002604:	d108      	bne.n	8002618 <HAL_UART_Transmit+0x82>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d104      	bne.n	8002618 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	e003      	b.n	8002620 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002628:	e02a      	b.n	8002680 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2200      	movs	r2, #0
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f840 	bl	80026ba <UART_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e036      	b.n	80026b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10b      	bne.n	8002662 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002658:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	3302      	adds	r3, #2
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e007      	b.n	8002672 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	3301      	adds	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1cf      	bne.n	800262a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2200      	movs	r2, #0
 8002692:	2140      	movs	r1, #64	; 0x40
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f810 	bl	80026ba <UART_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e006      	b.n	80026b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b090      	sub	sp, #64	; 0x40
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	4613      	mov	r3, r2
 80026c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ca:	e050      	b.n	800276e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d2:	d04c      	beq.n	800276e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <UART_WaitOnFlagUntilTimeout+0x30>
 80026da:	f7fe fed1 	bl	8001480 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d241      	bcs.n	800276e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	e853 3f00 	ldrex	r3, [r3]
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800270a:	637a      	str	r2, [r7, #52]	; 0x34
 800270c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002712:	e841 2300 	strex	r3, r2, [r1]
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e5      	bne.n	80026ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3314      	adds	r3, #20
 8002724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	e853 3f00 	ldrex	r3, [r3]
 800272c:	613b      	str	r3, [r7, #16]
   return(result);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	63bb      	str	r3, [r7, #56]	; 0x38
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3314      	adds	r3, #20
 800273c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800273e:	623a      	str	r2, [r7, #32]
 8002740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002742:	69f9      	ldr	r1, [r7, #28]
 8002744:	6a3a      	ldr	r2, [r7, #32]
 8002746:	e841 2300 	strex	r3, r2, [r1]
 800274a:	61bb      	str	r3, [r7, #24]
   return(result);
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1e5      	bne.n	800271e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e00f      	b.n	800278e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4013      	ands	r3, r2
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	429a      	cmp	r2, r3
 800277c:	bf0c      	ite	eq
 800277e:	2301      	moveq	r3, #1
 8002780:	2300      	movne	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	429a      	cmp	r2, r3
 800278a:	d09f      	beq.n	80026cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3740      	adds	r7, #64	; 0x40
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800279c:	b0c0      	sub	sp, #256	; 0x100
 800279e:	af00      	add	r7, sp, #0
 80027a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b4:	68d9      	ldr	r1, [r3, #12]
 80027b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	ea40 0301 	orr.w	r3, r0, r1
 80027c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027f0:	f021 010c 	bic.w	r1, r1, #12
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027fe:	430b      	orrs	r3, r1
 8002800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002812:	6999      	ldr	r1, [r3, #24]
 8002814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	ea40 0301 	orr.w	r3, r0, r1
 800281e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4b8f      	ldr	r3, [pc, #572]	; (8002a64 <UART_SetConfig+0x2cc>)
 8002828:	429a      	cmp	r2, r3
 800282a:	d005      	beq.n	8002838 <UART_SetConfig+0xa0>
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b8d      	ldr	r3, [pc, #564]	; (8002a68 <UART_SetConfig+0x2d0>)
 8002834:	429a      	cmp	r2, r3
 8002836:	d104      	bne.n	8002842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002838:	f7ff fe4c 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 800283c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002840:	e003      	b.n	800284a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002842:	f7ff fe33 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8002846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800284a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002854:	f040 810c 	bne.w	8002a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800285c:	2200      	movs	r2, #0
 800285e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800286a:	4622      	mov	r2, r4
 800286c:	462b      	mov	r3, r5
 800286e:	1891      	adds	r1, r2, r2
 8002870:	65b9      	str	r1, [r7, #88]	; 0x58
 8002872:	415b      	adcs	r3, r3
 8002874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800287a:	4621      	mov	r1, r4
 800287c:	eb12 0801 	adds.w	r8, r2, r1
 8002880:	4629      	mov	r1, r5
 8002882:	eb43 0901 	adc.w	r9, r3, r1
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800289a:	4690      	mov	r8, r2
 800289c:	4699      	mov	r9, r3
 800289e:	4623      	mov	r3, r4
 80028a0:	eb18 0303 	adds.w	r3, r8, r3
 80028a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028a8:	462b      	mov	r3, r5
 80028aa:	eb49 0303 	adc.w	r3, r9, r3
 80028ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028c6:	460b      	mov	r3, r1
 80028c8:	18db      	adds	r3, r3, r3
 80028ca:	653b      	str	r3, [r7, #80]	; 0x50
 80028cc:	4613      	mov	r3, r2
 80028ce:	eb42 0303 	adc.w	r3, r2, r3
 80028d2:	657b      	str	r3, [r7, #84]	; 0x54
 80028d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028dc:	f7fd fce0 	bl	80002a0 <__aeabi_uldivmod>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4b61      	ldr	r3, [pc, #388]	; (8002a6c <UART_SetConfig+0x2d4>)
 80028e6:	fba3 2302 	umull	r2, r3, r3, r2
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	011c      	lsls	r4, r3, #4
 80028ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f2:	2200      	movs	r2, #0
 80028f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002900:	4642      	mov	r2, r8
 8002902:	464b      	mov	r3, r9
 8002904:	1891      	adds	r1, r2, r2
 8002906:	64b9      	str	r1, [r7, #72]	; 0x48
 8002908:	415b      	adcs	r3, r3
 800290a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800290c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002910:	4641      	mov	r1, r8
 8002912:	eb12 0a01 	adds.w	sl, r2, r1
 8002916:	4649      	mov	r1, r9
 8002918:	eb43 0b01 	adc.w	fp, r3, r1
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800292c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002930:	4692      	mov	sl, r2
 8002932:	469b      	mov	fp, r3
 8002934:	4643      	mov	r3, r8
 8002936:	eb1a 0303 	adds.w	r3, sl, r3
 800293a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800293e:	464b      	mov	r3, r9
 8002940:	eb4b 0303 	adc.w	r3, fp, r3
 8002944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800295c:	460b      	mov	r3, r1
 800295e:	18db      	adds	r3, r3, r3
 8002960:	643b      	str	r3, [r7, #64]	; 0x40
 8002962:	4613      	mov	r3, r2
 8002964:	eb42 0303 	adc.w	r3, r2, r3
 8002968:	647b      	str	r3, [r7, #68]	; 0x44
 800296a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800296e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002972:	f7fd fc95 	bl	80002a0 <__aeabi_uldivmod>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4611      	mov	r1, r2
 800297c:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <UART_SetConfig+0x2d4>)
 800297e:	fba3 2301 	umull	r2, r3, r3, r1
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2264      	movs	r2, #100	; 0x64
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	1acb      	subs	r3, r1, r3
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002992:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <UART_SetConfig+0x2d4>)
 8002994:	fba3 2302 	umull	r2, r3, r3, r2
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029a0:	441c      	add	r4, r3
 80029a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029b4:	4642      	mov	r2, r8
 80029b6:	464b      	mov	r3, r9
 80029b8:	1891      	adds	r1, r2, r2
 80029ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80029bc:	415b      	adcs	r3, r3
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029c4:	4641      	mov	r1, r8
 80029c6:	1851      	adds	r1, r2, r1
 80029c8:	6339      	str	r1, [r7, #48]	; 0x30
 80029ca:	4649      	mov	r1, r9
 80029cc:	414b      	adcs	r3, r1
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029dc:	4659      	mov	r1, fp
 80029de:	00cb      	lsls	r3, r1, #3
 80029e0:	4651      	mov	r1, sl
 80029e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029e6:	4651      	mov	r1, sl
 80029e8:	00ca      	lsls	r2, r1, #3
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	4642      	mov	r2, r8
 80029f2:	189b      	adds	r3, r3, r2
 80029f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029f8:	464b      	mov	r3, r9
 80029fa:	460a      	mov	r2, r1
 80029fc:	eb42 0303 	adc.w	r3, r2, r3
 8002a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a18:	460b      	mov	r3, r1
 8002a1a:	18db      	adds	r3, r3, r3
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a1e:	4613      	mov	r3, r2
 8002a20:	eb42 0303 	adc.w	r3, r2, r3
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a2e:	f7fd fc37 	bl	80002a0 <__aeabi_uldivmod>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <UART_SetConfig+0x2d4>)
 8002a38:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	2164      	movs	r1, #100	; 0x64
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	3332      	adds	r3, #50	; 0x32
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <UART_SetConfig+0x2d4>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	f003 0207 	and.w	r2, r3, #7
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4422      	add	r2, r4
 8002a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a60:	e105      	b.n	8002c6e <UART_SetConfig+0x4d6>
 8002a62:	bf00      	nop
 8002a64:	40011000 	.word	0x40011000
 8002a68:	40011400 	.word	0x40011400
 8002a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a74:	2200      	movs	r2, #0
 8002a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a82:	4642      	mov	r2, r8
 8002a84:	464b      	mov	r3, r9
 8002a86:	1891      	adds	r1, r2, r2
 8002a88:	6239      	str	r1, [r7, #32]
 8002a8a:	415b      	adcs	r3, r3
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a92:	4641      	mov	r1, r8
 8002a94:	1854      	adds	r4, r2, r1
 8002a96:	4649      	mov	r1, r9
 8002a98:	eb43 0501 	adc.w	r5, r3, r1
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	00eb      	lsls	r3, r5, #3
 8002aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aaa:	00e2      	lsls	r2, r4, #3
 8002aac:	4614      	mov	r4, r2
 8002aae:	461d      	mov	r5, r3
 8002ab0:	4643      	mov	r3, r8
 8002ab2:	18e3      	adds	r3, r4, r3
 8002ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ab8:	464b      	mov	r3, r9
 8002aba:	eb45 0303 	adc.w	r3, r5, r3
 8002abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ade:	4629      	mov	r1, r5
 8002ae0:	008b      	lsls	r3, r1, #2
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ae8:	4621      	mov	r1, r4
 8002aea:	008a      	lsls	r2, r1, #2
 8002aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002af0:	f7fd fbd6 	bl	80002a0 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4b60      	ldr	r3, [pc, #384]	; (8002c7c <UART_SetConfig+0x4e4>)
 8002afa:	fba3 2302 	umull	r2, r3, r3, r2
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	011c      	lsls	r4, r3, #4
 8002b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b14:	4642      	mov	r2, r8
 8002b16:	464b      	mov	r3, r9
 8002b18:	1891      	adds	r1, r2, r2
 8002b1a:	61b9      	str	r1, [r7, #24]
 8002b1c:	415b      	adcs	r3, r3
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b24:	4641      	mov	r1, r8
 8002b26:	1851      	adds	r1, r2, r1
 8002b28:	6139      	str	r1, [r7, #16]
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	414b      	adcs	r3, r1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b3c:	4659      	mov	r1, fp
 8002b3e:	00cb      	lsls	r3, r1, #3
 8002b40:	4651      	mov	r1, sl
 8002b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b46:	4651      	mov	r1, sl
 8002b48:	00ca      	lsls	r2, r1, #3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4642      	mov	r2, r8
 8002b52:	189b      	adds	r3, r3, r2
 8002b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b58:	464b      	mov	r3, r9
 8002b5a:	460a      	mov	r2, r1
 8002b5c:	eb42 0303 	adc.w	r3, r2, r3
 8002b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	008b      	lsls	r3, r1, #2
 8002b80:	4641      	mov	r1, r8
 8002b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b86:	4641      	mov	r1, r8
 8002b88:	008a      	lsls	r2, r1, #2
 8002b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b8e:	f7fd fb87 	bl	80002a0 <__aeabi_uldivmod>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <UART_SetConfig+0x4e4>)
 8002b98:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	2164      	movs	r1, #100	; 0x64
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	3332      	adds	r3, #50	; 0x32
 8002baa:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <UART_SetConfig+0x4e4>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb6:	441c      	add	r4, r3
 8002bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	673b      	str	r3, [r7, #112]	; 0x70
 8002bc0:	677a      	str	r2, [r7, #116]	; 0x74
 8002bc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bc6:	4642      	mov	r2, r8
 8002bc8:	464b      	mov	r3, r9
 8002bca:	1891      	adds	r1, r2, r2
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	415b      	adcs	r3, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd6:	4641      	mov	r1, r8
 8002bd8:	1851      	adds	r1, r2, r1
 8002bda:	6039      	str	r1, [r7, #0]
 8002bdc:	4649      	mov	r1, r9
 8002bde:	414b      	adcs	r3, r1
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bee:	4659      	mov	r1, fp
 8002bf0:	00cb      	lsls	r3, r1, #3
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	00ca      	lsls	r2, r1, #3
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4603      	mov	r3, r0
 8002c02:	4642      	mov	r2, r8
 8002c04:	189b      	adds	r3, r3, r2
 8002c06:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c08:	464b      	mov	r3, r9
 8002c0a:	460a      	mov	r2, r1
 8002c0c:	eb42 0303 	adc.w	r3, r2, r3
 8002c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c1c:	667a      	str	r2, [r7, #100]	; 0x64
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	008b      	lsls	r3, r1, #2
 8002c2e:	4641      	mov	r1, r8
 8002c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c34:	4641      	mov	r1, r8
 8002c36:	008a      	lsls	r2, r1, #2
 8002c38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c3c:	f7fd fb30 	bl	80002a0 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <UART_SetConfig+0x4e4>)
 8002c46:	fba3 1302 	umull	r1, r3, r3, r2
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2164      	movs	r1, #100	; 0x64
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	3332      	adds	r3, #50	; 0x32
 8002c58:	4a08      	ldr	r2, [pc, #32]	; (8002c7c <UART_SetConfig+0x4e4>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	f003 020f 	and.w	r2, r3, #15
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4422      	add	r2, r4
 8002c6c:	609a      	str	r2, [r3, #8]
}
 8002c6e:	bf00      	nop
 8002c70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c74:	46bd      	mov	sp, r7
 8002c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c7a:	bf00      	nop
 8002c7c:	51eb851f 	.word	0x51eb851f

08002c80 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8002c84:	f7fe fb9c 	bl	80013c0 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8002c88:	f000 f822 	bl	8002cd0 <SystemClock_Config>

  /* Initialize BSP PB for BUTTON_USER */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f7fe fa90 	bl	80011b4 <BSP_PB_Init>

  /* Initialize BSP Led for LED1 and LED2*/
  BSP_LED_Init(LED1);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fe fa23 	bl	80010e0 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f7fe fa20 	bl	80010e0 <BSP_LED_Init>

  /*Inicializa los puertos GPIO*/
  gpioDisplay_init();
 8002ca0:	f7fe f834 	bl	8000d0c <gpioDisplay_init>
  gpioButton_init();
 8002ca4:	f7fe f8b2 	bl	8000e0c <gpioButton_init>

  /*Inicializa la MEF para validacion de pulsaciones*/
  debounceFSM_init();
 8002ca8:	f7fd fc7c 	bl	80005a4 <debounceFSM_init>

  /*Inicializa la MEF para display*/
  displayFSM_init();
 8002cac:	f7fd fe1a 	bl	80008e4 <displayFSM_init>

  /* Infinite loop */
  while (1)
  {
	  /*Actualiza los estados de la MEF de validación de pulsaciones para los pulsadores UP y DOWN*/
	  debounceFSM_update(PULSADOR_UP);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7fd fc91 	bl	80005d8 <debounceFSM_update>
	  debounceFSM_update(PULSADOR_DOWN);
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f7fd fc8e 	bl	80005d8 <debounceFSM_update>

	  /*Actualiza el estado de la MEF del display*/
	  displayFSM_update();
 8002cbc:	f7fd fe2a 	bl	8000914 <displayFSM_update>

	  /*Setea los puertos GPIO*/
	  gpioDisplay_write(getStateDisplay());
 8002cc0:	f7fd ffce 	bl	8000c60 <getStateDisplay>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe f8e8 	bl	8000e9c <gpioDisplay_write>
	  debounceFSM_update(PULSADOR_UP);
 8002ccc:	e7f0      	b.n	8002cb0 <main+0x30>
	...

08002cd0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b094      	sub	sp, #80	; 0x50
 8002cd4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	4b2c      	ldr	r3, [pc, #176]	; (8002d8c <SystemClock_Config+0xbc>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a2b      	ldr	r2, [pc, #172]	; (8002d8c <SystemClock_Config+0xbc>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <SystemClock_Config+0xbc>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <SystemClock_Config+0xc0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a25      	ldr	r2, [pc, #148]	; (8002d90 <SystemClock_Config+0xc0>)
 8002cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <SystemClock_Config+0xc0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d12:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002d16:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d22:	2308      	movs	r3, #8
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002d26:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d30:	2307      	movs	r3, #7
 8002d32:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe ff47 	bl	8001bcc <HAL_RCC_OscConfig>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002d44:	f000 f826 	bl	8002d94 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d48:	f7fe fef0 	bl	8001b2c <HAL_PWREx_EnableOverDrive>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8002d52:	f000 f81f 	bl	8002d94 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002d56:	230f      	movs	r3, #15
 8002d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8002d62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d72:	2105      	movs	r1, #5
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f9a1 	bl	80020bc <HAL_RCC_ClockConfig>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002d80:	f000 f808 	bl	8002d94 <Error_Handler>
  }
}
 8002d84:	bf00      	nop
 8002d86:	3750      	adds	r7, #80	; 0x50
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40007000 	.word	0x40007000

08002d94 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8002d98:	2001      	movs	r0, #1
 8002d9a:	f7fe f9f1 	bl	8001180 <BSP_LED_On>
  while (1)
 8002d9e:	e7fe      	b.n	8002d9e <Error_Handler+0xa>

08002da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002da4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002da6:	e003      	b.n	8002db0 <LoopCopyDataInit>

08002da8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002daa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002dac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dae:	3104      	adds	r1, #4

08002db0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002db0:	480b      	ldr	r0, [pc, #44]	; (8002de0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002db4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002db6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002db8:	d3f6      	bcc.n	8002da8 <CopyDataInit>
  ldr  r2, =_sbss
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002dbc:	e002      	b.n	8002dc4 <LoopFillZerobss>

08002dbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002dc0:	f842 3b04 	str.w	r3, [r2], #4

08002dc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dc8:	d3f9      	bcc.n	8002dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dca:	f7fe fa5f 	bl	800128c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dce:	f000 f817 	bl	8002e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dd2:	f7ff ff55 	bl	8002c80 <main>
  bx  lr    
 8002dd6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002dd8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002ddc:	08003818 	.word	0x08003818
  ldr  r0, =_sdata
 8002de0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002de4:	200000d4 	.word	0x200000d4
  ldr  r2, =_sbss
 8002de8:	200000d4 	.word	0x200000d4
  ldr  r3, = _ebss
 8002dec:	2000017c 	.word	0x2000017c

08002df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df0:	e7fe      	b.n	8002df0 <ADC_IRQHandler>
	...

08002df4 <__errno>:
 8002df4:	4b01      	ldr	r3, [pc, #4]	; (8002dfc <__errno+0x8>)
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000070 	.word	0x20000070

08002e00 <__libc_init_array>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	4d0d      	ldr	r5, [pc, #52]	; (8002e38 <__libc_init_array+0x38>)
 8002e04:	4c0d      	ldr	r4, [pc, #52]	; (8002e3c <__libc_init_array+0x3c>)
 8002e06:	1b64      	subs	r4, r4, r5
 8002e08:	10a4      	asrs	r4, r4, #2
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	42a6      	cmp	r6, r4
 8002e0e:	d109      	bne.n	8002e24 <__libc_init_array+0x24>
 8002e10:	4d0b      	ldr	r5, [pc, #44]	; (8002e40 <__libc_init_array+0x40>)
 8002e12:	4c0c      	ldr	r4, [pc, #48]	; (8002e44 <__libc_init_array+0x44>)
 8002e14:	f000 fc86 	bl	8003724 <_init>
 8002e18:	1b64      	subs	r4, r4, r5
 8002e1a:	10a4      	asrs	r4, r4, #2
 8002e1c:	2600      	movs	r6, #0
 8002e1e:	42a6      	cmp	r6, r4
 8002e20:	d105      	bne.n	8002e2e <__libc_init_array+0x2e>
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
 8002e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e28:	4798      	blx	r3
 8002e2a:	3601      	adds	r6, #1
 8002e2c:	e7ee      	b.n	8002e0c <__libc_init_array+0xc>
 8002e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e32:	4798      	blx	r3
 8002e34:	3601      	adds	r6, #1
 8002e36:	e7f2      	b.n	8002e1e <__libc_init_array+0x1e>
 8002e38:	08003810 	.word	0x08003810
 8002e3c:	08003810 	.word	0x08003810
 8002e40:	08003810 	.word	0x08003810
 8002e44:	08003814 	.word	0x08003814

08002e48 <siprintf>:
 8002e48:	b40e      	push	{r1, r2, r3}
 8002e4a:	b500      	push	{lr}
 8002e4c:	b09c      	sub	sp, #112	; 0x70
 8002e4e:	ab1d      	add	r3, sp, #116	; 0x74
 8002e50:	9002      	str	r0, [sp, #8]
 8002e52:	9006      	str	r0, [sp, #24]
 8002e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e58:	4809      	ldr	r0, [pc, #36]	; (8002e80 <siprintf+0x38>)
 8002e5a:	9107      	str	r1, [sp, #28]
 8002e5c:	9104      	str	r1, [sp, #16]
 8002e5e:	4909      	ldr	r1, [pc, #36]	; (8002e84 <siprintf+0x3c>)
 8002e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e64:	9105      	str	r1, [sp, #20]
 8002e66:	6800      	ldr	r0, [r0, #0]
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	a902      	add	r1, sp, #8
 8002e6c:	f000 f868 	bl	8002f40 <_svfiprintf_r>
 8002e70:	9b02      	ldr	r3, [sp, #8]
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	b01c      	add	sp, #112	; 0x70
 8002e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e7c:	b003      	add	sp, #12
 8002e7e:	4770      	bx	lr
 8002e80:	20000070 	.word	0x20000070
 8002e84:	ffff0208 	.word	0xffff0208

08002e88 <__ssputs_r>:
 8002e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e8c:	688e      	ldr	r6, [r1, #8]
 8002e8e:	429e      	cmp	r6, r3
 8002e90:	4682      	mov	sl, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	4690      	mov	r8, r2
 8002e96:	461f      	mov	r7, r3
 8002e98:	d838      	bhi.n	8002f0c <__ssputs_r+0x84>
 8002e9a:	898a      	ldrh	r2, [r1, #12]
 8002e9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ea0:	d032      	beq.n	8002f08 <__ssputs_r+0x80>
 8002ea2:	6825      	ldr	r5, [r4, #0]
 8002ea4:	6909      	ldr	r1, [r1, #16]
 8002ea6:	eba5 0901 	sub.w	r9, r5, r1
 8002eaa:	6965      	ldr	r5, [r4, #20]
 8002eac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002eb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	444b      	add	r3, r9
 8002eb8:	106d      	asrs	r5, r5, #1
 8002eba:	429d      	cmp	r5, r3
 8002ebc:	bf38      	it	cc
 8002ebe:	461d      	movcc	r5, r3
 8002ec0:	0553      	lsls	r3, r2, #21
 8002ec2:	d531      	bpl.n	8002f28 <__ssputs_r+0xa0>
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	f000 fb63 	bl	8003590 <_malloc_r>
 8002eca:	4606      	mov	r6, r0
 8002ecc:	b950      	cbnz	r0, 8002ee4 <__ssputs_r+0x5c>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	f8ca 3000 	str.w	r3, [sl]
 8002ed4:	89a3      	ldrh	r3, [r4, #12]
 8002ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eda:	81a3      	strh	r3, [r4, #12]
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee4:	6921      	ldr	r1, [r4, #16]
 8002ee6:	464a      	mov	r2, r9
 8002ee8:	f000 fabe 	bl	8003468 <memcpy>
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef6:	81a3      	strh	r3, [r4, #12]
 8002ef8:	6126      	str	r6, [r4, #16]
 8002efa:	6165      	str	r5, [r4, #20]
 8002efc:	444e      	add	r6, r9
 8002efe:	eba5 0509 	sub.w	r5, r5, r9
 8002f02:	6026      	str	r6, [r4, #0]
 8002f04:	60a5      	str	r5, [r4, #8]
 8002f06:	463e      	mov	r6, r7
 8002f08:	42be      	cmp	r6, r7
 8002f0a:	d900      	bls.n	8002f0e <__ssputs_r+0x86>
 8002f0c:	463e      	mov	r6, r7
 8002f0e:	6820      	ldr	r0, [r4, #0]
 8002f10:	4632      	mov	r2, r6
 8002f12:	4641      	mov	r1, r8
 8002f14:	f000 fab6 	bl	8003484 <memmove>
 8002f18:	68a3      	ldr	r3, [r4, #8]
 8002f1a:	1b9b      	subs	r3, r3, r6
 8002f1c:	60a3      	str	r3, [r4, #8]
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	4433      	add	r3, r6
 8002f22:	6023      	str	r3, [r4, #0]
 8002f24:	2000      	movs	r0, #0
 8002f26:	e7db      	b.n	8002ee0 <__ssputs_r+0x58>
 8002f28:	462a      	mov	r2, r5
 8002f2a:	f000 fba5 	bl	8003678 <_realloc_r>
 8002f2e:	4606      	mov	r6, r0
 8002f30:	2800      	cmp	r0, #0
 8002f32:	d1e1      	bne.n	8002ef8 <__ssputs_r+0x70>
 8002f34:	6921      	ldr	r1, [r4, #16]
 8002f36:	4650      	mov	r0, sl
 8002f38:	f000 fabe 	bl	80034b8 <_free_r>
 8002f3c:	e7c7      	b.n	8002ece <__ssputs_r+0x46>
	...

08002f40 <_svfiprintf_r>:
 8002f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f44:	4698      	mov	r8, r3
 8002f46:	898b      	ldrh	r3, [r1, #12]
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	b09d      	sub	sp, #116	; 0x74
 8002f4c:	4607      	mov	r7, r0
 8002f4e:	460d      	mov	r5, r1
 8002f50:	4614      	mov	r4, r2
 8002f52:	d50e      	bpl.n	8002f72 <_svfiprintf_r+0x32>
 8002f54:	690b      	ldr	r3, [r1, #16]
 8002f56:	b963      	cbnz	r3, 8002f72 <_svfiprintf_r+0x32>
 8002f58:	2140      	movs	r1, #64	; 0x40
 8002f5a:	f000 fb19 	bl	8003590 <_malloc_r>
 8002f5e:	6028      	str	r0, [r5, #0]
 8002f60:	6128      	str	r0, [r5, #16]
 8002f62:	b920      	cbnz	r0, 8002f6e <_svfiprintf_r+0x2e>
 8002f64:	230c      	movs	r3, #12
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6c:	e0d1      	b.n	8003112 <_svfiprintf_r+0x1d2>
 8002f6e:	2340      	movs	r3, #64	; 0x40
 8002f70:	616b      	str	r3, [r5, #20]
 8002f72:	2300      	movs	r3, #0
 8002f74:	9309      	str	r3, [sp, #36]	; 0x24
 8002f76:	2320      	movs	r3, #32
 8002f78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f80:	2330      	movs	r3, #48	; 0x30
 8002f82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800312c <_svfiprintf_r+0x1ec>
 8002f86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f8a:	f04f 0901 	mov.w	r9, #1
 8002f8e:	4623      	mov	r3, r4
 8002f90:	469a      	mov	sl, r3
 8002f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f96:	b10a      	cbz	r2, 8002f9c <_svfiprintf_r+0x5c>
 8002f98:	2a25      	cmp	r2, #37	; 0x25
 8002f9a:	d1f9      	bne.n	8002f90 <_svfiprintf_r+0x50>
 8002f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8002fa0:	d00b      	beq.n	8002fba <_svfiprintf_r+0x7a>
 8002fa2:	465b      	mov	r3, fp
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	4638      	mov	r0, r7
 8002faa:	f7ff ff6d 	bl	8002e88 <__ssputs_r>
 8002fae:	3001      	adds	r0, #1
 8002fb0:	f000 80aa 	beq.w	8003108 <_svfiprintf_r+0x1c8>
 8002fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fb6:	445a      	add	r2, fp
 8002fb8:	9209      	str	r2, [sp, #36]	; 0x24
 8002fba:	f89a 3000 	ldrb.w	r3, [sl]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80a2 	beq.w	8003108 <_svfiprintf_r+0x1c8>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fce:	f10a 0a01 	add.w	sl, sl, #1
 8002fd2:	9304      	str	r3, [sp, #16]
 8002fd4:	9307      	str	r3, [sp, #28]
 8002fd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fda:	931a      	str	r3, [sp, #104]	; 0x68
 8002fdc:	4654      	mov	r4, sl
 8002fde:	2205      	movs	r2, #5
 8002fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fe4:	4851      	ldr	r0, [pc, #324]	; (800312c <_svfiprintf_r+0x1ec>)
 8002fe6:	f7fd f90b 	bl	8000200 <memchr>
 8002fea:	9a04      	ldr	r2, [sp, #16]
 8002fec:	b9d8      	cbnz	r0, 8003026 <_svfiprintf_r+0xe6>
 8002fee:	06d0      	lsls	r0, r2, #27
 8002ff0:	bf44      	itt	mi
 8002ff2:	2320      	movmi	r3, #32
 8002ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ff8:	0711      	lsls	r1, r2, #28
 8002ffa:	bf44      	itt	mi
 8002ffc:	232b      	movmi	r3, #43	; 0x2b
 8002ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003002:	f89a 3000 	ldrb.w	r3, [sl]
 8003006:	2b2a      	cmp	r3, #42	; 0x2a
 8003008:	d015      	beq.n	8003036 <_svfiprintf_r+0xf6>
 800300a:	9a07      	ldr	r2, [sp, #28]
 800300c:	4654      	mov	r4, sl
 800300e:	2000      	movs	r0, #0
 8003010:	f04f 0c0a 	mov.w	ip, #10
 8003014:	4621      	mov	r1, r4
 8003016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800301a:	3b30      	subs	r3, #48	; 0x30
 800301c:	2b09      	cmp	r3, #9
 800301e:	d94e      	bls.n	80030be <_svfiprintf_r+0x17e>
 8003020:	b1b0      	cbz	r0, 8003050 <_svfiprintf_r+0x110>
 8003022:	9207      	str	r2, [sp, #28]
 8003024:	e014      	b.n	8003050 <_svfiprintf_r+0x110>
 8003026:	eba0 0308 	sub.w	r3, r0, r8
 800302a:	fa09 f303 	lsl.w	r3, r9, r3
 800302e:	4313      	orrs	r3, r2
 8003030:	9304      	str	r3, [sp, #16]
 8003032:	46a2      	mov	sl, r4
 8003034:	e7d2      	b.n	8002fdc <_svfiprintf_r+0x9c>
 8003036:	9b03      	ldr	r3, [sp, #12]
 8003038:	1d19      	adds	r1, r3, #4
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	9103      	str	r1, [sp, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	bfbb      	ittet	lt
 8003042:	425b      	neglt	r3, r3
 8003044:	f042 0202 	orrlt.w	r2, r2, #2
 8003048:	9307      	strge	r3, [sp, #28]
 800304a:	9307      	strlt	r3, [sp, #28]
 800304c:	bfb8      	it	lt
 800304e:	9204      	strlt	r2, [sp, #16]
 8003050:	7823      	ldrb	r3, [r4, #0]
 8003052:	2b2e      	cmp	r3, #46	; 0x2e
 8003054:	d10c      	bne.n	8003070 <_svfiprintf_r+0x130>
 8003056:	7863      	ldrb	r3, [r4, #1]
 8003058:	2b2a      	cmp	r3, #42	; 0x2a
 800305a:	d135      	bne.n	80030c8 <_svfiprintf_r+0x188>
 800305c:	9b03      	ldr	r3, [sp, #12]
 800305e:	1d1a      	adds	r2, r3, #4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	9203      	str	r2, [sp, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	bfb8      	it	lt
 8003068:	f04f 33ff 	movlt.w	r3, #4294967295
 800306c:	3402      	adds	r4, #2
 800306e:	9305      	str	r3, [sp, #20]
 8003070:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800313c <_svfiprintf_r+0x1fc>
 8003074:	7821      	ldrb	r1, [r4, #0]
 8003076:	2203      	movs	r2, #3
 8003078:	4650      	mov	r0, sl
 800307a:	f7fd f8c1 	bl	8000200 <memchr>
 800307e:	b140      	cbz	r0, 8003092 <_svfiprintf_r+0x152>
 8003080:	2340      	movs	r3, #64	; 0x40
 8003082:	eba0 000a 	sub.w	r0, r0, sl
 8003086:	fa03 f000 	lsl.w	r0, r3, r0
 800308a:	9b04      	ldr	r3, [sp, #16]
 800308c:	4303      	orrs	r3, r0
 800308e:	3401      	adds	r4, #1
 8003090:	9304      	str	r3, [sp, #16]
 8003092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003096:	4826      	ldr	r0, [pc, #152]	; (8003130 <_svfiprintf_r+0x1f0>)
 8003098:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800309c:	2206      	movs	r2, #6
 800309e:	f7fd f8af 	bl	8000200 <memchr>
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d038      	beq.n	8003118 <_svfiprintf_r+0x1d8>
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <_svfiprintf_r+0x1f4>)
 80030a8:	bb1b      	cbnz	r3, 80030f2 <_svfiprintf_r+0x1b2>
 80030aa:	9b03      	ldr	r3, [sp, #12]
 80030ac:	3307      	adds	r3, #7
 80030ae:	f023 0307 	bic.w	r3, r3, #7
 80030b2:	3308      	adds	r3, #8
 80030b4:	9303      	str	r3, [sp, #12]
 80030b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030b8:	4433      	add	r3, r6
 80030ba:	9309      	str	r3, [sp, #36]	; 0x24
 80030bc:	e767      	b.n	8002f8e <_svfiprintf_r+0x4e>
 80030be:	fb0c 3202 	mla	r2, ip, r2, r3
 80030c2:	460c      	mov	r4, r1
 80030c4:	2001      	movs	r0, #1
 80030c6:	e7a5      	b.n	8003014 <_svfiprintf_r+0xd4>
 80030c8:	2300      	movs	r3, #0
 80030ca:	3401      	adds	r4, #1
 80030cc:	9305      	str	r3, [sp, #20]
 80030ce:	4619      	mov	r1, r3
 80030d0:	f04f 0c0a 	mov.w	ip, #10
 80030d4:	4620      	mov	r0, r4
 80030d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030da:	3a30      	subs	r2, #48	; 0x30
 80030dc:	2a09      	cmp	r2, #9
 80030de:	d903      	bls.n	80030e8 <_svfiprintf_r+0x1a8>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0c5      	beq.n	8003070 <_svfiprintf_r+0x130>
 80030e4:	9105      	str	r1, [sp, #20]
 80030e6:	e7c3      	b.n	8003070 <_svfiprintf_r+0x130>
 80030e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80030ec:	4604      	mov	r4, r0
 80030ee:	2301      	movs	r3, #1
 80030f0:	e7f0      	b.n	80030d4 <_svfiprintf_r+0x194>
 80030f2:	ab03      	add	r3, sp, #12
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	462a      	mov	r2, r5
 80030f8:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <_svfiprintf_r+0x1f8>)
 80030fa:	a904      	add	r1, sp, #16
 80030fc:	4638      	mov	r0, r7
 80030fe:	f3af 8000 	nop.w
 8003102:	1c42      	adds	r2, r0, #1
 8003104:	4606      	mov	r6, r0
 8003106:	d1d6      	bne.n	80030b6 <_svfiprintf_r+0x176>
 8003108:	89ab      	ldrh	r3, [r5, #12]
 800310a:	065b      	lsls	r3, r3, #25
 800310c:	f53f af2c 	bmi.w	8002f68 <_svfiprintf_r+0x28>
 8003110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003112:	b01d      	add	sp, #116	; 0x74
 8003114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003118:	ab03      	add	r3, sp, #12
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	462a      	mov	r2, r5
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <_svfiprintf_r+0x1f8>)
 8003120:	a904      	add	r1, sp, #16
 8003122:	4638      	mov	r0, r7
 8003124:	f000 f87a 	bl	800321c <_printf_i>
 8003128:	e7eb      	b.n	8003102 <_svfiprintf_r+0x1c2>
 800312a:	bf00      	nop
 800312c:	080037d4 	.word	0x080037d4
 8003130:	080037de 	.word	0x080037de
 8003134:	00000000 	.word	0x00000000
 8003138:	08002e89 	.word	0x08002e89
 800313c:	080037da 	.word	0x080037da

08003140 <_printf_common>:
 8003140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003144:	4616      	mov	r6, r2
 8003146:	4699      	mov	r9, r3
 8003148:	688a      	ldr	r2, [r1, #8]
 800314a:	690b      	ldr	r3, [r1, #16]
 800314c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003150:	4293      	cmp	r3, r2
 8003152:	bfb8      	it	lt
 8003154:	4613      	movlt	r3, r2
 8003156:	6033      	str	r3, [r6, #0]
 8003158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800315c:	4607      	mov	r7, r0
 800315e:	460c      	mov	r4, r1
 8003160:	b10a      	cbz	r2, 8003166 <_printf_common+0x26>
 8003162:	3301      	adds	r3, #1
 8003164:	6033      	str	r3, [r6, #0]
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	0699      	lsls	r1, r3, #26
 800316a:	bf42      	ittt	mi
 800316c:	6833      	ldrmi	r3, [r6, #0]
 800316e:	3302      	addmi	r3, #2
 8003170:	6033      	strmi	r3, [r6, #0]
 8003172:	6825      	ldr	r5, [r4, #0]
 8003174:	f015 0506 	ands.w	r5, r5, #6
 8003178:	d106      	bne.n	8003188 <_printf_common+0x48>
 800317a:	f104 0a19 	add.w	sl, r4, #25
 800317e:	68e3      	ldr	r3, [r4, #12]
 8003180:	6832      	ldr	r2, [r6, #0]
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	42ab      	cmp	r3, r5
 8003186:	dc26      	bgt.n	80031d6 <_printf_common+0x96>
 8003188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800318c:	1e13      	subs	r3, r2, #0
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	bf18      	it	ne
 8003192:	2301      	movne	r3, #1
 8003194:	0692      	lsls	r2, r2, #26
 8003196:	d42b      	bmi.n	80031f0 <_printf_common+0xb0>
 8003198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800319c:	4649      	mov	r1, r9
 800319e:	4638      	mov	r0, r7
 80031a0:	47c0      	blx	r8
 80031a2:	3001      	adds	r0, #1
 80031a4:	d01e      	beq.n	80031e4 <_printf_common+0xa4>
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	68e5      	ldr	r5, [r4, #12]
 80031aa:	6832      	ldr	r2, [r6, #0]
 80031ac:	f003 0306 	and.w	r3, r3, #6
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	bf08      	it	eq
 80031b4:	1aad      	subeq	r5, r5, r2
 80031b6:	68a3      	ldr	r3, [r4, #8]
 80031b8:	6922      	ldr	r2, [r4, #16]
 80031ba:	bf0c      	ite	eq
 80031bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031c0:	2500      	movne	r5, #0
 80031c2:	4293      	cmp	r3, r2
 80031c4:	bfc4      	itt	gt
 80031c6:	1a9b      	subgt	r3, r3, r2
 80031c8:	18ed      	addgt	r5, r5, r3
 80031ca:	2600      	movs	r6, #0
 80031cc:	341a      	adds	r4, #26
 80031ce:	42b5      	cmp	r5, r6
 80031d0:	d11a      	bne.n	8003208 <_printf_common+0xc8>
 80031d2:	2000      	movs	r0, #0
 80031d4:	e008      	b.n	80031e8 <_printf_common+0xa8>
 80031d6:	2301      	movs	r3, #1
 80031d8:	4652      	mov	r2, sl
 80031da:	4649      	mov	r1, r9
 80031dc:	4638      	mov	r0, r7
 80031de:	47c0      	blx	r8
 80031e0:	3001      	adds	r0, #1
 80031e2:	d103      	bne.n	80031ec <_printf_common+0xac>
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ec:	3501      	adds	r5, #1
 80031ee:	e7c6      	b.n	800317e <_printf_common+0x3e>
 80031f0:	18e1      	adds	r1, r4, r3
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	2030      	movs	r0, #48	; 0x30
 80031f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031fa:	4422      	add	r2, r4
 80031fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003204:	3302      	adds	r3, #2
 8003206:	e7c7      	b.n	8003198 <_printf_common+0x58>
 8003208:	2301      	movs	r3, #1
 800320a:	4622      	mov	r2, r4
 800320c:	4649      	mov	r1, r9
 800320e:	4638      	mov	r0, r7
 8003210:	47c0      	blx	r8
 8003212:	3001      	adds	r0, #1
 8003214:	d0e6      	beq.n	80031e4 <_printf_common+0xa4>
 8003216:	3601      	adds	r6, #1
 8003218:	e7d9      	b.n	80031ce <_printf_common+0x8e>
	...

0800321c <_printf_i>:
 800321c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003220:	7e0f      	ldrb	r7, [r1, #24]
 8003222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003224:	2f78      	cmp	r7, #120	; 0x78
 8003226:	4691      	mov	r9, r2
 8003228:	4680      	mov	r8, r0
 800322a:	460c      	mov	r4, r1
 800322c:	469a      	mov	sl, r3
 800322e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003232:	d807      	bhi.n	8003244 <_printf_i+0x28>
 8003234:	2f62      	cmp	r7, #98	; 0x62
 8003236:	d80a      	bhi.n	800324e <_printf_i+0x32>
 8003238:	2f00      	cmp	r7, #0
 800323a:	f000 80d8 	beq.w	80033ee <_printf_i+0x1d2>
 800323e:	2f58      	cmp	r7, #88	; 0x58
 8003240:	f000 80a3 	beq.w	800338a <_printf_i+0x16e>
 8003244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800324c:	e03a      	b.n	80032c4 <_printf_i+0xa8>
 800324e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003252:	2b15      	cmp	r3, #21
 8003254:	d8f6      	bhi.n	8003244 <_printf_i+0x28>
 8003256:	a101      	add	r1, pc, #4	; (adr r1, 800325c <_printf_i+0x40>)
 8003258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800325c:	080032b5 	.word	0x080032b5
 8003260:	080032c9 	.word	0x080032c9
 8003264:	08003245 	.word	0x08003245
 8003268:	08003245 	.word	0x08003245
 800326c:	08003245 	.word	0x08003245
 8003270:	08003245 	.word	0x08003245
 8003274:	080032c9 	.word	0x080032c9
 8003278:	08003245 	.word	0x08003245
 800327c:	08003245 	.word	0x08003245
 8003280:	08003245 	.word	0x08003245
 8003284:	08003245 	.word	0x08003245
 8003288:	080033d5 	.word	0x080033d5
 800328c:	080032f9 	.word	0x080032f9
 8003290:	080033b7 	.word	0x080033b7
 8003294:	08003245 	.word	0x08003245
 8003298:	08003245 	.word	0x08003245
 800329c:	080033f7 	.word	0x080033f7
 80032a0:	08003245 	.word	0x08003245
 80032a4:	080032f9 	.word	0x080032f9
 80032a8:	08003245 	.word	0x08003245
 80032ac:	08003245 	.word	0x08003245
 80032b0:	080033bf 	.word	0x080033bf
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	1d1a      	adds	r2, r3, #4
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	602a      	str	r2, [r5, #0]
 80032bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0a3      	b.n	8003410 <_printf_i+0x1f4>
 80032c8:	6820      	ldr	r0, [r4, #0]
 80032ca:	6829      	ldr	r1, [r5, #0]
 80032cc:	0606      	lsls	r6, r0, #24
 80032ce:	f101 0304 	add.w	r3, r1, #4
 80032d2:	d50a      	bpl.n	80032ea <_printf_i+0xce>
 80032d4:	680e      	ldr	r6, [r1, #0]
 80032d6:	602b      	str	r3, [r5, #0]
 80032d8:	2e00      	cmp	r6, #0
 80032da:	da03      	bge.n	80032e4 <_printf_i+0xc8>
 80032dc:	232d      	movs	r3, #45	; 0x2d
 80032de:	4276      	negs	r6, r6
 80032e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032e4:	485e      	ldr	r0, [pc, #376]	; (8003460 <_printf_i+0x244>)
 80032e6:	230a      	movs	r3, #10
 80032e8:	e019      	b.n	800331e <_printf_i+0x102>
 80032ea:	680e      	ldr	r6, [r1, #0]
 80032ec:	602b      	str	r3, [r5, #0]
 80032ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032f2:	bf18      	it	ne
 80032f4:	b236      	sxthne	r6, r6
 80032f6:	e7ef      	b.n	80032d8 <_printf_i+0xbc>
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	6820      	ldr	r0, [r4, #0]
 80032fc:	1d19      	adds	r1, r3, #4
 80032fe:	6029      	str	r1, [r5, #0]
 8003300:	0601      	lsls	r1, r0, #24
 8003302:	d501      	bpl.n	8003308 <_printf_i+0xec>
 8003304:	681e      	ldr	r6, [r3, #0]
 8003306:	e002      	b.n	800330e <_printf_i+0xf2>
 8003308:	0646      	lsls	r6, r0, #25
 800330a:	d5fb      	bpl.n	8003304 <_printf_i+0xe8>
 800330c:	881e      	ldrh	r6, [r3, #0]
 800330e:	4854      	ldr	r0, [pc, #336]	; (8003460 <_printf_i+0x244>)
 8003310:	2f6f      	cmp	r7, #111	; 0x6f
 8003312:	bf0c      	ite	eq
 8003314:	2308      	moveq	r3, #8
 8003316:	230a      	movne	r3, #10
 8003318:	2100      	movs	r1, #0
 800331a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800331e:	6865      	ldr	r5, [r4, #4]
 8003320:	60a5      	str	r5, [r4, #8]
 8003322:	2d00      	cmp	r5, #0
 8003324:	bfa2      	ittt	ge
 8003326:	6821      	ldrge	r1, [r4, #0]
 8003328:	f021 0104 	bicge.w	r1, r1, #4
 800332c:	6021      	strge	r1, [r4, #0]
 800332e:	b90e      	cbnz	r6, 8003334 <_printf_i+0x118>
 8003330:	2d00      	cmp	r5, #0
 8003332:	d04d      	beq.n	80033d0 <_printf_i+0x1b4>
 8003334:	4615      	mov	r5, r2
 8003336:	fbb6 f1f3 	udiv	r1, r6, r3
 800333a:	fb03 6711 	mls	r7, r3, r1, r6
 800333e:	5dc7      	ldrb	r7, [r0, r7]
 8003340:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003344:	4637      	mov	r7, r6
 8003346:	42bb      	cmp	r3, r7
 8003348:	460e      	mov	r6, r1
 800334a:	d9f4      	bls.n	8003336 <_printf_i+0x11a>
 800334c:	2b08      	cmp	r3, #8
 800334e:	d10b      	bne.n	8003368 <_printf_i+0x14c>
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	07de      	lsls	r6, r3, #31
 8003354:	d508      	bpl.n	8003368 <_printf_i+0x14c>
 8003356:	6923      	ldr	r3, [r4, #16]
 8003358:	6861      	ldr	r1, [r4, #4]
 800335a:	4299      	cmp	r1, r3
 800335c:	bfde      	ittt	le
 800335e:	2330      	movle	r3, #48	; 0x30
 8003360:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003364:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003368:	1b52      	subs	r2, r2, r5
 800336a:	6122      	str	r2, [r4, #16]
 800336c:	f8cd a000 	str.w	sl, [sp]
 8003370:	464b      	mov	r3, r9
 8003372:	aa03      	add	r2, sp, #12
 8003374:	4621      	mov	r1, r4
 8003376:	4640      	mov	r0, r8
 8003378:	f7ff fee2 	bl	8003140 <_printf_common>
 800337c:	3001      	adds	r0, #1
 800337e:	d14c      	bne.n	800341a <_printf_i+0x1fe>
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	b004      	add	sp, #16
 8003386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800338a:	4835      	ldr	r0, [pc, #212]	; (8003460 <_printf_i+0x244>)
 800338c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003390:	6829      	ldr	r1, [r5, #0]
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	f851 6b04 	ldr.w	r6, [r1], #4
 8003398:	6029      	str	r1, [r5, #0]
 800339a:	061d      	lsls	r5, r3, #24
 800339c:	d514      	bpl.n	80033c8 <_printf_i+0x1ac>
 800339e:	07df      	lsls	r7, r3, #31
 80033a0:	bf44      	itt	mi
 80033a2:	f043 0320 	orrmi.w	r3, r3, #32
 80033a6:	6023      	strmi	r3, [r4, #0]
 80033a8:	b91e      	cbnz	r6, 80033b2 <_printf_i+0x196>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	f023 0320 	bic.w	r3, r3, #32
 80033b0:	6023      	str	r3, [r4, #0]
 80033b2:	2310      	movs	r3, #16
 80033b4:	e7b0      	b.n	8003318 <_printf_i+0xfc>
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	f043 0320 	orr.w	r3, r3, #32
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	2378      	movs	r3, #120	; 0x78
 80033c0:	4828      	ldr	r0, [pc, #160]	; (8003464 <_printf_i+0x248>)
 80033c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033c6:	e7e3      	b.n	8003390 <_printf_i+0x174>
 80033c8:	0659      	lsls	r1, r3, #25
 80033ca:	bf48      	it	mi
 80033cc:	b2b6      	uxthmi	r6, r6
 80033ce:	e7e6      	b.n	800339e <_printf_i+0x182>
 80033d0:	4615      	mov	r5, r2
 80033d2:	e7bb      	b.n	800334c <_printf_i+0x130>
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	6826      	ldr	r6, [r4, #0]
 80033d8:	6961      	ldr	r1, [r4, #20]
 80033da:	1d18      	adds	r0, r3, #4
 80033dc:	6028      	str	r0, [r5, #0]
 80033de:	0635      	lsls	r5, r6, #24
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	d501      	bpl.n	80033e8 <_printf_i+0x1cc>
 80033e4:	6019      	str	r1, [r3, #0]
 80033e6:	e002      	b.n	80033ee <_printf_i+0x1d2>
 80033e8:	0670      	lsls	r0, r6, #25
 80033ea:	d5fb      	bpl.n	80033e4 <_printf_i+0x1c8>
 80033ec:	8019      	strh	r1, [r3, #0]
 80033ee:	2300      	movs	r3, #0
 80033f0:	6123      	str	r3, [r4, #16]
 80033f2:	4615      	mov	r5, r2
 80033f4:	e7ba      	b.n	800336c <_printf_i+0x150>
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	1d1a      	adds	r2, r3, #4
 80033fa:	602a      	str	r2, [r5, #0]
 80033fc:	681d      	ldr	r5, [r3, #0]
 80033fe:	6862      	ldr	r2, [r4, #4]
 8003400:	2100      	movs	r1, #0
 8003402:	4628      	mov	r0, r5
 8003404:	f7fc fefc 	bl	8000200 <memchr>
 8003408:	b108      	cbz	r0, 800340e <_printf_i+0x1f2>
 800340a:	1b40      	subs	r0, r0, r5
 800340c:	6060      	str	r0, [r4, #4]
 800340e:	6863      	ldr	r3, [r4, #4]
 8003410:	6123      	str	r3, [r4, #16]
 8003412:	2300      	movs	r3, #0
 8003414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003418:	e7a8      	b.n	800336c <_printf_i+0x150>
 800341a:	6923      	ldr	r3, [r4, #16]
 800341c:	462a      	mov	r2, r5
 800341e:	4649      	mov	r1, r9
 8003420:	4640      	mov	r0, r8
 8003422:	47d0      	blx	sl
 8003424:	3001      	adds	r0, #1
 8003426:	d0ab      	beq.n	8003380 <_printf_i+0x164>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	079b      	lsls	r3, r3, #30
 800342c:	d413      	bmi.n	8003456 <_printf_i+0x23a>
 800342e:	68e0      	ldr	r0, [r4, #12]
 8003430:	9b03      	ldr	r3, [sp, #12]
 8003432:	4298      	cmp	r0, r3
 8003434:	bfb8      	it	lt
 8003436:	4618      	movlt	r0, r3
 8003438:	e7a4      	b.n	8003384 <_printf_i+0x168>
 800343a:	2301      	movs	r3, #1
 800343c:	4632      	mov	r2, r6
 800343e:	4649      	mov	r1, r9
 8003440:	4640      	mov	r0, r8
 8003442:	47d0      	blx	sl
 8003444:	3001      	adds	r0, #1
 8003446:	d09b      	beq.n	8003380 <_printf_i+0x164>
 8003448:	3501      	adds	r5, #1
 800344a:	68e3      	ldr	r3, [r4, #12]
 800344c:	9903      	ldr	r1, [sp, #12]
 800344e:	1a5b      	subs	r3, r3, r1
 8003450:	42ab      	cmp	r3, r5
 8003452:	dcf2      	bgt.n	800343a <_printf_i+0x21e>
 8003454:	e7eb      	b.n	800342e <_printf_i+0x212>
 8003456:	2500      	movs	r5, #0
 8003458:	f104 0619 	add.w	r6, r4, #25
 800345c:	e7f5      	b.n	800344a <_printf_i+0x22e>
 800345e:	bf00      	nop
 8003460:	080037e5 	.word	0x080037e5
 8003464:	080037f6 	.word	0x080037f6

08003468 <memcpy>:
 8003468:	440a      	add	r2, r1
 800346a:	4291      	cmp	r1, r2
 800346c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003470:	d100      	bne.n	8003474 <memcpy+0xc>
 8003472:	4770      	bx	lr
 8003474:	b510      	push	{r4, lr}
 8003476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800347a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800347e:	4291      	cmp	r1, r2
 8003480:	d1f9      	bne.n	8003476 <memcpy+0xe>
 8003482:	bd10      	pop	{r4, pc}

08003484 <memmove>:
 8003484:	4288      	cmp	r0, r1
 8003486:	b510      	push	{r4, lr}
 8003488:	eb01 0402 	add.w	r4, r1, r2
 800348c:	d902      	bls.n	8003494 <memmove+0x10>
 800348e:	4284      	cmp	r4, r0
 8003490:	4623      	mov	r3, r4
 8003492:	d807      	bhi.n	80034a4 <memmove+0x20>
 8003494:	1e43      	subs	r3, r0, #1
 8003496:	42a1      	cmp	r1, r4
 8003498:	d008      	beq.n	80034ac <memmove+0x28>
 800349a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800349e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034a2:	e7f8      	b.n	8003496 <memmove+0x12>
 80034a4:	4402      	add	r2, r0
 80034a6:	4601      	mov	r1, r0
 80034a8:	428a      	cmp	r2, r1
 80034aa:	d100      	bne.n	80034ae <memmove+0x2a>
 80034ac:	bd10      	pop	{r4, pc}
 80034ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034b6:	e7f7      	b.n	80034a8 <memmove+0x24>

080034b8 <_free_r>:
 80034b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034ba:	2900      	cmp	r1, #0
 80034bc:	d044      	beq.n	8003548 <_free_r+0x90>
 80034be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034c2:	9001      	str	r0, [sp, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f1a1 0404 	sub.w	r4, r1, #4
 80034ca:	bfb8      	it	lt
 80034cc:	18e4      	addlt	r4, r4, r3
 80034ce:	f000 f913 	bl	80036f8 <__malloc_lock>
 80034d2:	4a1e      	ldr	r2, [pc, #120]	; (800354c <_free_r+0x94>)
 80034d4:	9801      	ldr	r0, [sp, #4]
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	b933      	cbnz	r3, 80034e8 <_free_r+0x30>
 80034da:	6063      	str	r3, [r4, #4]
 80034dc:	6014      	str	r4, [r2, #0]
 80034de:	b003      	add	sp, #12
 80034e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034e4:	f000 b90e 	b.w	8003704 <__malloc_unlock>
 80034e8:	42a3      	cmp	r3, r4
 80034ea:	d908      	bls.n	80034fe <_free_r+0x46>
 80034ec:	6825      	ldr	r5, [r4, #0]
 80034ee:	1961      	adds	r1, r4, r5
 80034f0:	428b      	cmp	r3, r1
 80034f2:	bf01      	itttt	eq
 80034f4:	6819      	ldreq	r1, [r3, #0]
 80034f6:	685b      	ldreq	r3, [r3, #4]
 80034f8:	1949      	addeq	r1, r1, r5
 80034fa:	6021      	streq	r1, [r4, #0]
 80034fc:	e7ed      	b.n	80034da <_free_r+0x22>
 80034fe:	461a      	mov	r2, r3
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	b10b      	cbz	r3, 8003508 <_free_r+0x50>
 8003504:	42a3      	cmp	r3, r4
 8003506:	d9fa      	bls.n	80034fe <_free_r+0x46>
 8003508:	6811      	ldr	r1, [r2, #0]
 800350a:	1855      	adds	r5, r2, r1
 800350c:	42a5      	cmp	r5, r4
 800350e:	d10b      	bne.n	8003528 <_free_r+0x70>
 8003510:	6824      	ldr	r4, [r4, #0]
 8003512:	4421      	add	r1, r4
 8003514:	1854      	adds	r4, r2, r1
 8003516:	42a3      	cmp	r3, r4
 8003518:	6011      	str	r1, [r2, #0]
 800351a:	d1e0      	bne.n	80034de <_free_r+0x26>
 800351c:	681c      	ldr	r4, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	6053      	str	r3, [r2, #4]
 8003522:	4421      	add	r1, r4
 8003524:	6011      	str	r1, [r2, #0]
 8003526:	e7da      	b.n	80034de <_free_r+0x26>
 8003528:	d902      	bls.n	8003530 <_free_r+0x78>
 800352a:	230c      	movs	r3, #12
 800352c:	6003      	str	r3, [r0, #0]
 800352e:	e7d6      	b.n	80034de <_free_r+0x26>
 8003530:	6825      	ldr	r5, [r4, #0]
 8003532:	1961      	adds	r1, r4, r5
 8003534:	428b      	cmp	r3, r1
 8003536:	bf04      	itt	eq
 8003538:	6819      	ldreq	r1, [r3, #0]
 800353a:	685b      	ldreq	r3, [r3, #4]
 800353c:	6063      	str	r3, [r4, #4]
 800353e:	bf04      	itt	eq
 8003540:	1949      	addeq	r1, r1, r5
 8003542:	6021      	streq	r1, [r4, #0]
 8003544:	6054      	str	r4, [r2, #4]
 8003546:	e7ca      	b.n	80034de <_free_r+0x26>
 8003548:	b003      	add	sp, #12
 800354a:	bd30      	pop	{r4, r5, pc}
 800354c:	2000016c 	.word	0x2000016c

08003550 <sbrk_aligned>:
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	4e0e      	ldr	r6, [pc, #56]	; (800358c <sbrk_aligned+0x3c>)
 8003554:	460c      	mov	r4, r1
 8003556:	6831      	ldr	r1, [r6, #0]
 8003558:	4605      	mov	r5, r0
 800355a:	b911      	cbnz	r1, 8003562 <sbrk_aligned+0x12>
 800355c:	f000 f8bc 	bl	80036d8 <_sbrk_r>
 8003560:	6030      	str	r0, [r6, #0]
 8003562:	4621      	mov	r1, r4
 8003564:	4628      	mov	r0, r5
 8003566:	f000 f8b7 	bl	80036d8 <_sbrk_r>
 800356a:	1c43      	adds	r3, r0, #1
 800356c:	d00a      	beq.n	8003584 <sbrk_aligned+0x34>
 800356e:	1cc4      	adds	r4, r0, #3
 8003570:	f024 0403 	bic.w	r4, r4, #3
 8003574:	42a0      	cmp	r0, r4
 8003576:	d007      	beq.n	8003588 <sbrk_aligned+0x38>
 8003578:	1a21      	subs	r1, r4, r0
 800357a:	4628      	mov	r0, r5
 800357c:	f000 f8ac 	bl	80036d8 <_sbrk_r>
 8003580:	3001      	adds	r0, #1
 8003582:	d101      	bne.n	8003588 <sbrk_aligned+0x38>
 8003584:	f04f 34ff 	mov.w	r4, #4294967295
 8003588:	4620      	mov	r0, r4
 800358a:	bd70      	pop	{r4, r5, r6, pc}
 800358c:	20000170 	.word	0x20000170

08003590 <_malloc_r>:
 8003590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003594:	1ccd      	adds	r5, r1, #3
 8003596:	f025 0503 	bic.w	r5, r5, #3
 800359a:	3508      	adds	r5, #8
 800359c:	2d0c      	cmp	r5, #12
 800359e:	bf38      	it	cc
 80035a0:	250c      	movcc	r5, #12
 80035a2:	2d00      	cmp	r5, #0
 80035a4:	4607      	mov	r7, r0
 80035a6:	db01      	blt.n	80035ac <_malloc_r+0x1c>
 80035a8:	42a9      	cmp	r1, r5
 80035aa:	d905      	bls.n	80035b8 <_malloc_r+0x28>
 80035ac:	230c      	movs	r3, #12
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	2600      	movs	r6, #0
 80035b2:	4630      	mov	r0, r6
 80035b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035b8:	4e2e      	ldr	r6, [pc, #184]	; (8003674 <_malloc_r+0xe4>)
 80035ba:	f000 f89d 	bl	80036f8 <__malloc_lock>
 80035be:	6833      	ldr	r3, [r6, #0]
 80035c0:	461c      	mov	r4, r3
 80035c2:	bb34      	cbnz	r4, 8003612 <_malloc_r+0x82>
 80035c4:	4629      	mov	r1, r5
 80035c6:	4638      	mov	r0, r7
 80035c8:	f7ff ffc2 	bl	8003550 <sbrk_aligned>
 80035cc:	1c43      	adds	r3, r0, #1
 80035ce:	4604      	mov	r4, r0
 80035d0:	d14d      	bne.n	800366e <_malloc_r+0xde>
 80035d2:	6834      	ldr	r4, [r6, #0]
 80035d4:	4626      	mov	r6, r4
 80035d6:	2e00      	cmp	r6, #0
 80035d8:	d140      	bne.n	800365c <_malloc_r+0xcc>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	4631      	mov	r1, r6
 80035de:	4638      	mov	r0, r7
 80035e0:	eb04 0803 	add.w	r8, r4, r3
 80035e4:	f000 f878 	bl	80036d8 <_sbrk_r>
 80035e8:	4580      	cmp	r8, r0
 80035ea:	d13a      	bne.n	8003662 <_malloc_r+0xd2>
 80035ec:	6821      	ldr	r1, [r4, #0]
 80035ee:	3503      	adds	r5, #3
 80035f0:	1a6d      	subs	r5, r5, r1
 80035f2:	f025 0503 	bic.w	r5, r5, #3
 80035f6:	3508      	adds	r5, #8
 80035f8:	2d0c      	cmp	r5, #12
 80035fa:	bf38      	it	cc
 80035fc:	250c      	movcc	r5, #12
 80035fe:	4629      	mov	r1, r5
 8003600:	4638      	mov	r0, r7
 8003602:	f7ff ffa5 	bl	8003550 <sbrk_aligned>
 8003606:	3001      	adds	r0, #1
 8003608:	d02b      	beq.n	8003662 <_malloc_r+0xd2>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	442b      	add	r3, r5
 800360e:	6023      	str	r3, [r4, #0]
 8003610:	e00e      	b.n	8003630 <_malloc_r+0xa0>
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	1b52      	subs	r2, r2, r5
 8003616:	d41e      	bmi.n	8003656 <_malloc_r+0xc6>
 8003618:	2a0b      	cmp	r2, #11
 800361a:	d916      	bls.n	800364a <_malloc_r+0xba>
 800361c:	1961      	adds	r1, r4, r5
 800361e:	42a3      	cmp	r3, r4
 8003620:	6025      	str	r5, [r4, #0]
 8003622:	bf18      	it	ne
 8003624:	6059      	strne	r1, [r3, #4]
 8003626:	6863      	ldr	r3, [r4, #4]
 8003628:	bf08      	it	eq
 800362a:	6031      	streq	r1, [r6, #0]
 800362c:	5162      	str	r2, [r4, r5]
 800362e:	604b      	str	r3, [r1, #4]
 8003630:	4638      	mov	r0, r7
 8003632:	f104 060b 	add.w	r6, r4, #11
 8003636:	f000 f865 	bl	8003704 <__malloc_unlock>
 800363a:	f026 0607 	bic.w	r6, r6, #7
 800363e:	1d23      	adds	r3, r4, #4
 8003640:	1af2      	subs	r2, r6, r3
 8003642:	d0b6      	beq.n	80035b2 <_malloc_r+0x22>
 8003644:	1b9b      	subs	r3, r3, r6
 8003646:	50a3      	str	r3, [r4, r2]
 8003648:	e7b3      	b.n	80035b2 <_malloc_r+0x22>
 800364a:	6862      	ldr	r2, [r4, #4]
 800364c:	42a3      	cmp	r3, r4
 800364e:	bf0c      	ite	eq
 8003650:	6032      	streq	r2, [r6, #0]
 8003652:	605a      	strne	r2, [r3, #4]
 8003654:	e7ec      	b.n	8003630 <_malloc_r+0xa0>
 8003656:	4623      	mov	r3, r4
 8003658:	6864      	ldr	r4, [r4, #4]
 800365a:	e7b2      	b.n	80035c2 <_malloc_r+0x32>
 800365c:	4634      	mov	r4, r6
 800365e:	6876      	ldr	r6, [r6, #4]
 8003660:	e7b9      	b.n	80035d6 <_malloc_r+0x46>
 8003662:	230c      	movs	r3, #12
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	4638      	mov	r0, r7
 8003668:	f000 f84c 	bl	8003704 <__malloc_unlock>
 800366c:	e7a1      	b.n	80035b2 <_malloc_r+0x22>
 800366e:	6025      	str	r5, [r4, #0]
 8003670:	e7de      	b.n	8003630 <_malloc_r+0xa0>
 8003672:	bf00      	nop
 8003674:	2000016c 	.word	0x2000016c

08003678 <_realloc_r>:
 8003678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800367c:	4680      	mov	r8, r0
 800367e:	4614      	mov	r4, r2
 8003680:	460e      	mov	r6, r1
 8003682:	b921      	cbnz	r1, 800368e <_realloc_r+0x16>
 8003684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003688:	4611      	mov	r1, r2
 800368a:	f7ff bf81 	b.w	8003590 <_malloc_r>
 800368e:	b92a      	cbnz	r2, 800369c <_realloc_r+0x24>
 8003690:	f7ff ff12 	bl	80034b8 <_free_r>
 8003694:	4625      	mov	r5, r4
 8003696:	4628      	mov	r0, r5
 8003698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800369c:	f000 f838 	bl	8003710 <_malloc_usable_size_r>
 80036a0:	4284      	cmp	r4, r0
 80036a2:	4607      	mov	r7, r0
 80036a4:	d802      	bhi.n	80036ac <_realloc_r+0x34>
 80036a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036aa:	d812      	bhi.n	80036d2 <_realloc_r+0x5a>
 80036ac:	4621      	mov	r1, r4
 80036ae:	4640      	mov	r0, r8
 80036b0:	f7ff ff6e 	bl	8003590 <_malloc_r>
 80036b4:	4605      	mov	r5, r0
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d0ed      	beq.n	8003696 <_realloc_r+0x1e>
 80036ba:	42bc      	cmp	r4, r7
 80036bc:	4622      	mov	r2, r4
 80036be:	4631      	mov	r1, r6
 80036c0:	bf28      	it	cs
 80036c2:	463a      	movcs	r2, r7
 80036c4:	f7ff fed0 	bl	8003468 <memcpy>
 80036c8:	4631      	mov	r1, r6
 80036ca:	4640      	mov	r0, r8
 80036cc:	f7ff fef4 	bl	80034b8 <_free_r>
 80036d0:	e7e1      	b.n	8003696 <_realloc_r+0x1e>
 80036d2:	4635      	mov	r5, r6
 80036d4:	e7df      	b.n	8003696 <_realloc_r+0x1e>
	...

080036d8 <_sbrk_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	4d06      	ldr	r5, [pc, #24]	; (80036f4 <_sbrk_r+0x1c>)
 80036dc:	2300      	movs	r3, #0
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	602b      	str	r3, [r5, #0]
 80036e4:	f7fd fe36 	bl	8001354 <_sbrk>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_sbrk_r+0x1a>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_sbrk_r+0x1a>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	20000174 	.word	0x20000174

080036f8 <__malloc_lock>:
 80036f8:	4801      	ldr	r0, [pc, #4]	; (8003700 <__malloc_lock+0x8>)
 80036fa:	f000 b811 	b.w	8003720 <__retarget_lock_acquire_recursive>
 80036fe:	bf00      	nop
 8003700:	20000178 	.word	0x20000178

08003704 <__malloc_unlock>:
 8003704:	4801      	ldr	r0, [pc, #4]	; (800370c <__malloc_unlock+0x8>)
 8003706:	f000 b80c 	b.w	8003722 <__retarget_lock_release_recursive>
 800370a:	bf00      	nop
 800370c:	20000178 	.word	0x20000178

08003710 <_malloc_usable_size_r>:
 8003710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003714:	1f18      	subs	r0, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	bfbc      	itt	lt
 800371a:	580b      	ldrlt	r3, [r1, r0]
 800371c:	18c0      	addlt	r0, r0, r3
 800371e:	4770      	bx	lr

08003720 <__retarget_lock_acquire_recursive>:
 8003720:	4770      	bx	lr

08003722 <__retarget_lock_release_recursive>:
 8003722:	4770      	bx	lr

08003724 <_init>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	bf00      	nop
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr

08003730 <_fini>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	bf00      	nop
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr
