
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003144  08003144  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800314c  0800314c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08003154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
 10 .bss          0000008c  200000c0  200000c0  000200c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009199  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ae2  00000000  00000000  00029289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  0002ad70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e8  00000000  00000000  0002b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000262bf  00000000  00000000  0002bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc23  00000000  00000000  00051ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e200a  00000000  00000000  0005fafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141b04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020a8  00000000  00000000  00141b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003060 	.word	0x08003060

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	08003060 	.word	0x08003060

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <debounceFSM_init>:

/*debounceFSM_init
 *Se encarga de asignar el estado inicial en la MEF utilizada para validación de pulsaciones
 *Por defecto, se asigna estado BUTTON_UP como inicial
 *Se inicializa la estructura para toma de tiempo y validación de pulsaciones*/
void debounceFSM_init(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	buttonState=BUTTON_UP;
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <debounceFSM_init+0x18>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
	delayInit(&delayButton,TIME_VALID_PUSH);
 80005ae:	2128      	movs	r1, #40	; 0x28
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <debounceFSM_init+0x1c>)
 80005b2:	f000 f8af 	bl	8000714 <delayInit>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000ec 	.word	0x200000ec
 80005c0:	200000e0 	.word	0x200000e0

080005c4 <debounceFSM_update>:

/*debounceFSM_update
 *Verifica el estado del pulsador y actualiza el estado de la MEF*/
void debounceFSM_update(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

	switch (buttonState){
 80005c8:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <debounceFSM_update+0xdc>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d861      	bhi.n	8000694 <debounceFSM_update+0xd0>
 80005d0:	a201      	add	r2, pc, #4	; (adr r2, 80005d8 <debounceFSM_update+0x14>)
 80005d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d6:	bf00      	nop
 80005d8:	080005e9 	.word	0x080005e9
 80005dc:	0800060b 	.word	0x0800060b
 80005e0:	0800063f 	.word	0x0800063f
 80005e4:	08000661 	.word	0x08000661
		/*Estado BUTTON_UP:
		 * Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_FALLING.
		 * En estas condiciones, inicia al contador para validación.
		 * Si detecta que el pulsador no se encuentra presionado, mantiene la MEF en estado BUTTON_UP. */
		case BUTTON_UP:
			if(BSP_PB_GetState(BUTTON_USER)){
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fa8b 	bl	8000b04 <BSP_PB_GetState>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d006      	beq.n	8000602 <debounceFSM_update+0x3e>
				delayRead(&delayButton);
 80005f4:	482b      	ldr	r0, [pc, #172]	; (80006a4 <debounceFSM_update+0xe0>)
 80005f6:	f000 f8ab 	bl	8000750 <delayRead>
				buttonState=BUTTON_FALLING;
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <debounceFSM_update+0xdc>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
			}
			else{
				buttonState=BUTTON_UP;
			}
		break;
 8000600:	e04b      	b.n	800069a <debounceFSM_update+0xd6>
				buttonState=BUTTON_UP;
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <debounceFSM_update+0xdc>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
		break;
 8000608:	e047      	b.n	800069a <debounceFSM_update+0xd6>
		* Verifica que se cumpla el retardo de tiempo para validar una pulsación.
		* Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_DOWN (pulsación detectada).
		* A su vez, llama a la funcion buttonPressed para togglear LED 1 y, a su vez, enviar mensaje por UART.
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_UP (pulsación no válida). */
		case BUTTON_FALLING:
			if (delayRead(&delayButton) == true){
 800060a:	4826      	ldr	r0, [pc, #152]	; (80006a4 <debounceFSM_update+0xe0>)
 800060c:	f000 f8a0 	bl	8000750 <delayRead>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d00f      	beq.n	8000636 <debounceFSM_update+0x72>
				if(BSP_PB_GetState(BUTTON_USER)){
 8000616:	2000      	movs	r0, #0
 8000618:	f000 fa74 	bl	8000b04 <BSP_PB_GetState>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d005      	beq.n	800062e <debounceFSM_update+0x6a>
					buttonState=BUTTON_DOWN;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <debounceFSM_update+0xdc>)
 8000624:	2202      	movs	r2, #2
 8000626:	701a      	strb	r2, [r3, #0]
					buttonPressed();
 8000628:	f000 f83e 	bl	80006a8 <buttonPressed>
				}
			}
			else{
				buttonState=BUTTON_FALLING;
			}
		break;
 800062c:	e035      	b.n	800069a <debounceFSM_update+0xd6>
					buttonState=BUTTON_UP;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <debounceFSM_update+0xdc>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
		break;
 8000634:	e031      	b.n	800069a <debounceFSM_update+0xd6>
				buttonState=BUTTON_FALLING;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <debounceFSM_update+0xdc>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
		break;
 800063c:	e02d      	b.n	800069a <debounceFSM_update+0xd6>
		/*Estado BUTTON_DOWN:
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_RAISING.
		* En estas condiciones, inicia al contador para validación.
		* Si detecta que el pulsador se encuentra presionado, mantiene la MEF en estado BUTTON_DOWN. */
		case BUTTON_DOWN:
			if(!BSP_PB_GetState(BUTTON_USER)){
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fa60 	bl	8000b04 <BSP_PB_GetState>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d106      	bne.n	8000658 <debounceFSM_update+0x94>
				delayRead(&delayButton);
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <debounceFSM_update+0xe0>)
 800064c:	f000 f880 	bl	8000750 <delayRead>
				buttonState=BUTTON_RAISING;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <debounceFSM_update+0xdc>)
 8000652:	2203      	movs	r2, #3
 8000654:	701a      	strb	r2, [r3, #0]
			}
			else{
				buttonState=BUTTON_DOWN;
			}
		break;
 8000656:	e020      	b.n	800069a <debounceFSM_update+0xd6>
				buttonState=BUTTON_DOWN;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <debounceFSM_update+0xdc>)
 800065a:	2202      	movs	r2, #2
 800065c:	701a      	strb	r2, [r3, #0]
		break;
 800065e:	e01c      	b.n	800069a <debounceFSM_update+0xd6>
		* Verifica que se cumpla el retardo de tiempo para validar una pulsación.
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_UP (pulsador liberado).
		* A su vez, llama a la funcion buttonReleased para togglear LED 3 y, a su vez, enviar mensaje por UART.
		* Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_DOWN (liberación no válida). */
		case BUTTON_RAISING:
			if (delayRead(&delayButton) == true){
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <debounceFSM_update+0xe0>)
 8000662:	f000 f875 	bl	8000750 <delayRead>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00f      	beq.n	800068c <debounceFSM_update+0xc8>
				if(!BSP_PB_GetState(BUTTON_USER)){
 800066c:	2000      	movs	r0, #0
 800066e:	f000 fa49 	bl	8000b04 <BSP_PB_GetState>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d105      	bne.n	8000684 <debounceFSM_update+0xc0>
					buttonState=BUTTON_UP;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <debounceFSM_update+0xdc>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
					buttonReleased();
 800067e:	f000 f825 	bl	80006cc <buttonReleased>
				}
			}
			else{
				buttonState=BUTTON_RAISING;
			}
		break;
 8000682:	e00a      	b.n	800069a <debounceFSM_update+0xd6>
					buttonState=BUTTON_DOWN;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <debounceFSM_update+0xdc>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
		break;
 800068a:	e006      	b.n	800069a <debounceFSM_update+0xd6>
				buttonState=BUTTON_RAISING;
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <debounceFSM_update+0xdc>)
 800068e:	2203      	movs	r2, #3
 8000690:	701a      	strb	r2, [r3, #0]
		break;
 8000692:	e002      	b.n	800069a <debounceFSM_update+0xd6>

		/*Por default, vuelve al estado inicial*/
		default:
			debounceFSM_init();
 8000694:	f7ff ff86 	bl	80005a4 <debounceFSM_init>
		break;
 8000698:	bf00      	nop
	}

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000ec 	.word	0x200000ec
 80006a4:	200000e0 	.word	0x200000e0

080006a8 <buttonPressed>:

/*buttonPressed
 *Función que togglea LED1. Tambien comunica por UART la pulsacion detectada.
 *A su vez, asigna valor logico TRUE a la variable buttonPress */
static void buttonPressed(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED1);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 f9b9 	bl	8000a24 <BSP_LED_Toggle>
	uartSendString((uint8_t*)flancoDesc);
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <buttonPressed+0x1c>)
 80006b4:	f000 f936 	bl	8000924 <uartSendString>
	buttonPress=true;
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <buttonPressed+0x20>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000
 80006c8:	200000dc 	.word	0x200000dc

080006cc <buttonReleased>:

/*buttonReleased
 *Función que togglea LED3. Tambien comunica por UART la liberacion detectada. */
static void buttonReleased(void){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	uartSendString((uint8_t*)flancoAsc);
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <buttonReleased+0x14>)
 80006d2:	f000 f927 	bl	8000924 <uartSendString>
	BSP_LED_Toggle(LED3);
 80006d6:	2002      	movs	r0, #2
 80006d8:	f000 f9a4 	bl	8000a24 <BSP_LED_Toggle>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000020 	.word	0x20000020

080006e4 <readKey>:

/*readKey
 *Función booleana que devuelve una copia del valor de la variable buttonPress.
 *Si dicha variable posee valor lógico TRUE, la reinicializa a FALSE.*/
bool_t readKey(void){
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
	bool_t buttonStateAux;

	if (buttonPress==true){
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <readKey+0x2c>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d005      	beq.n	80006fe <readKey+0x1a>
		buttonStateAux=true;
 80006f2:	2301      	movs	r3, #1
 80006f4:	71fb      	strb	r3, [r7, #7]
		buttonPress=false;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <readKey+0x2c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	e001      	b.n	8000702 <readKey+0x1e>
	}
	else{
		buttonStateAux=false;
 80006fe:	2300      	movs	r3, #0
 8000700:	71fb      	strb	r3, [r7, #7]
	}
	return buttonStateAux;
 8000702:	79fb      	ldrb	r3, [r7, #7]
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	200000dc 	.word	0x200000dc

08000714 <delayInit>:
 */

#include "API_delay.h"

/*Defino las funciones*/
void delayInit( delay_t * delay, tick_t duration ){
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	//Verifica si los parametros introducidos son los adecuados
	if (delay!=NULL && duration>0 && duration<MAX_DURATION){
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00e      	beq.n	8000742 <delayInit+0x2e>
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00b      	beq.n	8000742 <delayInit+0x2e>
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	f247 522f 	movw	r2, #29999	; 0x752f
 8000730:	4293      	cmp	r3, r2
 8000732:	d806      	bhi.n	8000742 <delayInit+0x2e>
		delay->duration=duration;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	605a      	str	r2, [r3, #4]
		delay->running=false;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	721a      	strb	r2, [r3, #8]
	//En caso de error, enciende LED1 de manera permanente
		while(1){
			BSP_LED_On(LED1);
		}
	}
}
 8000740:	e003      	b.n	800074a <delayInit+0x36>
			BSP_LED_On(LED1);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 f954 	bl	80009f0 <BSP_LED_On>
 8000748:	e7fb      	b.n	8000742 <delayInit+0x2e>
}
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <delayRead>:

bool_t delayRead( delay_t * delay ){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	tick_t currentTime;
	bool_t toggleLED=false;
 8000758:	2300      	movs	r3, #0
 800075a:	73fb      	strb	r3, [r7, #15]

	//Verifica si los parametros introducidos son los adecuados
	if (delay != NULL){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d024      	beq.n	80007ac <delayRead+0x5c>
		if (delay->running==false){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7a1b      	ldrb	r3, [r3, #8]
 8000766:	f083 0301 	eor.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d00a      	beq.n	8000786 <delayRead+0x36>
			delay->startTime=HAL_GetTick();
 8000770:	f000 fad8 	bl	8000d24 <HAL_GetTick>
 8000774:	4602      	mov	r2, r0
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
			delay->running=true;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	721a      	strb	r2, [r3, #8]
			toggleLED=false;
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
 8000784:	e012      	b.n	80007ac <delayRead+0x5c>
		}
		else{
			currentTime=HAL_GetTick();
 8000786:	f000 facd 	bl	8000d24 <HAL_GetTick>
 800078a:	60b8      	str	r0, [r7, #8]
			if (currentTime - delay->startTime >= delay->duration){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	68ba      	ldr	r2, [r7, #8]
 8000792:	1ad2      	subs	r2, r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	429a      	cmp	r2, r3
 800079a:	d305      	bcc.n	80007a8 <delayRead+0x58>
				toggleLED=true;
 800079c:	2301      	movs	r3, #1
 800079e:	73fb      	strb	r3, [r7, #15]
				delay->running=false;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	721a      	strb	r2, [r3, #8]
 80007a6:	e001      	b.n	80007ac <delayRead+0x5c>
			}
			else{
				toggleLED=false;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	return toggleLED;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration ){
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
	//Verifica si los parametros introducidos son los adecuados
	if (delay!=NULL && duration>0 && duration<MAX_DURATION){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <delayWrite+0x28>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d008      	beq.n	80007de <delayWrite+0x28>
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	f247 522f 	movw	r2, #29999	; 0x752f
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d803      	bhi.n	80007de <delayWrite+0x28>
		delay->duration=duration;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	605a      	str	r2, [r3, #4]
		while(1){
	//En caso de error, enciende LED1 de manera permanente
			BSP_LED_On(LED1);
		}
	}
}
 80007dc:	e003      	b.n	80007e6 <delayWrite+0x30>
			BSP_LED_On(LED1);
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 f906 	bl	80009f0 <BSP_LED_On>
 80007e4:	e7fb      	b.n	80007de <delayWrite+0x28>
}
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <uartInit>:


/* Inicia la comunicación UART.
 * Envía mensaje indicando los parametros de su configuración.
 * Devuelve valor booleano TRUE si la iniciación fue exitosa.*/
bool_t uartInit(void){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
	 bool_t successfulInitialization=true;
 80007f2:	2301      	movs	r3, #1
 80007f4:	77fb      	strb	r3, [r7, #31]
	 char baudRateValue[5]={};
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
 80007fa:	2300      	movs	r3, #0
 80007fc:	773b      	strb	r3, [r7, #28]
	 char wordLengthValue[5]={};
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	2300      	movs	r3, #0
 8000804:	753b      	strb	r3, [r7, #20]
	 char StopBitsValue[5]={};
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	2300      	movs	r3, #0
 800080c:	733b      	strb	r3, [r7, #12]
	 char parityValue[5]={};
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	2300      	movs	r3, #0
 8000814:	713b      	strb	r3, [r7, #4]
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8000816:	4b39      	ldr	r3, [pc, #228]	; (80008fc <uartInit+0x110>)
 8000818:	4a39      	ldr	r2, [pc, #228]	; (8000900 <uartInit+0x114>)
 800081a:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = 9600;
 800081c:	4b37      	ldr	r3, [pc, #220]	; (80008fc <uartInit+0x110>)
 800081e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000822:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000824:	4b35      	ldr	r3, [pc, #212]	; (80008fc <uartInit+0x110>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800082a:	4b34      	ldr	r3, [pc, #208]	; (80008fc <uartInit+0x110>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000830:	4b32      	ldr	r3, [pc, #200]	; (80008fc <uartInit+0x110>)
 8000832:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000836:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000838:	4b30      	ldr	r3, [pc, #192]	; (80008fc <uartInit+0x110>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800083e:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <uartInit+0x110>)
 8000840:	220c      	movs	r2, #12
 8000842:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <uartInit+0x110>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800084a:	482c      	ldr	r0, [pc, #176]	; (80008fc <uartInit+0x110>)
 800084c:	f001 fac2 	bl	8001dd4 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <uartInit+0x70>
	  {
	    /* Initialization Error */
		successfulInitialization=false;
 8000856:	2300      	movs	r3, #0
 8000858:	77fb      	strb	r3, [r7, #31]
	    while(1){
 800085a:	e7fe      	b.n	800085a <uartInit+0x6e>
	    }

	  }

	  //Funcion que convierte valor numerico a char
	  sprintf((char*) baudRateValue, "%d",(int) UartHandle.Init.BaudRate);
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <uartInit+0x110>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	461a      	mov	r2, r3
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	4927      	ldr	r1, [pc, #156]	; (8000904 <uartInit+0x118>)
 8000868:	4618      	mov	r0, r3
 800086a:	f001 ff8b 	bl	8002784 <siprintf>
	  sprintf((char*) wordLengthValue, "%d",(int) UartHandle.Init.WordLength);
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <uartInit+0x110>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	461a      	mov	r2, r3
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4922      	ldr	r1, [pc, #136]	; (8000904 <uartInit+0x118>)
 800087a:	4618      	mov	r0, r3
 800087c:	f001 ff82 	bl	8002784 <siprintf>
	  sprintf((char*) StopBitsValue, "%d",(int) UartHandle.Init.StopBits);
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <uartInit+0x110>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	461a      	mov	r2, r3
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	491e      	ldr	r1, [pc, #120]	; (8000904 <uartInit+0x118>)
 800088c:	4618      	mov	r0, r3
 800088e:	f001 ff79 	bl	8002784 <siprintf>
	  sprintf((char*) parityValue, "%d",(int) UartHandle.Init.Parity);
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <uartInit+0x110>)
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	461a      	mov	r2, r3
 8000898:	463b      	mov	r3, r7
 800089a:	491a      	ldr	r1, [pc, #104]	; (8000904 <uartInit+0x118>)
 800089c:	4618      	mov	r0, r3
 800089e:	f001 ff71 	bl	8002784 <siprintf>

	  uartSendString((uint8_t*)"Uart Iniciada\n\r");
 80008a2:	4819      	ldr	r0, [pc, #100]	; (8000908 <uartInit+0x11c>)
 80008a4:	f000 f83e 	bl	8000924 <uartSendString>
	  uartSendString((uint8_t*)"-----Parametros UART-----\n\r");
 80008a8:	4818      	ldr	r0, [pc, #96]	; (800090c <uartInit+0x120>)
 80008aa:	f000 f83b 	bl	8000924 <uartSendString>
	  uartSendString((uint8_t*)"\n\rBaud rate: ");
 80008ae:	4818      	ldr	r0, [pc, #96]	; (8000910 <uartInit+0x124>)
 80008b0:	f000 f838 	bl	8000924 <uartSendString>
	  uartSendString((uint8_t*)baudRateValue);
 80008b4:	f107 0318 	add.w	r3, r7, #24
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f833 	bl	8000924 <uartSendString>
	  uartSendString((uint8_t*)"\n\rWord Length: ");
 80008be:	4815      	ldr	r0, [pc, #84]	; (8000914 <uartInit+0x128>)
 80008c0:	f000 f830 	bl	8000924 <uartSendString>
	  uartSendString((uint8_t*)wordLengthValue);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f82b 	bl	8000924 <uartSendString>
	  uartSendString((uint8_t*)"\n\rStop Bits: ");
 80008ce:	4812      	ldr	r0, [pc, #72]	; (8000918 <uartInit+0x12c>)
 80008d0:	f000 f828 	bl	8000924 <uartSendString>
	  uartSendString((uint8_t*)StopBitsValue);
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f823 	bl	8000924 <uartSendString>
	  uartSendString((uint8_t*)"\n\rParity: ");
 80008de:	480f      	ldr	r0, [pc, #60]	; (800091c <uartInit+0x130>)
 80008e0:	f000 f820 	bl	8000924 <uartSendString>
	  uartSendString((uint8_t*)parityValue);
 80008e4:	463b      	mov	r3, r7
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f81c 	bl	8000924 <uartSendString>
	  uartSendString((uint8_t*)"\n\r");
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <uartInit+0x134>)
 80008ee:	f000 f819 	bl	8000924 <uartSendString>

	  return successfulInitialization;
 80008f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000f0 	.word	0x200000f0
 8000900:	40004800 	.word	0x40004800
 8000904:	08003078 	.word	0x08003078
 8000908:	0800307c 	.word	0x0800307c
 800090c:	0800308c 	.word	0x0800308c
 8000910:	080030a8 	.word	0x080030a8
 8000914:	080030b8 	.word	0x080030b8
 8000918:	080030c8 	.word	0x080030c8
 800091c:	080030d8 	.word	0x080030d8
 8000920:	080030e4 	.word	0x080030e4

08000924 <uartSendString>:

/* Función que envia un mensaje por UART.
 * Recibe un punto a array como parametro, el cual contiene el mensaje a enviar.*/
void uartSendString(uint8_t * pstring){
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UartHandle,(uint8_t*) pstring,strlen((const char*) pstring), 1000);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fc5f 	bl	80001f0 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	b29a      	uxth	r2, r3
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <uartSendString+0x28>)
 800093e:	f001 fa96 	bl	8001e6e <HAL_UART_Transmit>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000f0 	.word	0x200000f0

08000950 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d10e      	bne.n	800097e <BSP_LED_Init+0x2e>
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <BSP_LED_Init+0x94>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <BSP_LED_Init+0x94>)
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <BSP_LED_Init+0x94>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	e00d      	b.n	800099a <BSP_LED_Init+0x4a>
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <BSP_LED_Init+0x94>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <BSP_LED_Init+0x94>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <BSP_LED_Init+0x94>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <BSP_LED_Init+0x98>)
 800099e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <BSP_LED_Init+0x9c>)
 80009b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b8:	f107 0214 	add.w	r2, r7, #20
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 face 	bl	8000f60 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4a09      	ldr	r2, [pc, #36]	; (80009ec <BSP_LED_Init+0x9c>)
 80009c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <BSP_LED_Init+0x98>)
 80009d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d4:	2200      	movs	r2, #0
 80009d6:	4619      	mov	r1, r3
 80009d8:	f000 fc86 	bl	80012e8 <HAL_GPIO_WritePin>
}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	080030f0 	.word	0x080030f0
 80009ec:	20000040 	.word	0x20000040

080009f0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <BSP_LED_On+0x2c>)
 80009fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <BSP_LED_On+0x30>)
 8000a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f000 fc6b 	bl	80012e8 <HAL_GPIO_WritePin>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000040 	.word	0x20000040
 8000a20:	080030f0 	.word	0x080030f0

08000a24 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <BSP_LED_Toggle+0x2c>)
 8000a32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4906      	ldr	r1, [pc, #24]	; (8000a54 <BSP_LED_Toggle+0x30>)
 8000a3a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4610      	mov	r0, r2
 8000a42:	f000 fc6a 	bl	800131a <HAL_GPIO_TogglePin>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000040 	.word	0x20000040
 8000a54:	080030f0 	.word	0x080030f0

08000a58 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	460a      	mov	r2, r1
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	4613      	mov	r3, r2
 8000a66:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <BSP_PB_Init+0xa4>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a22      	ldr	r2, [pc, #136]	; (8000afc <BSP_PB_Init+0xa4>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <BSP_PB_Init+0xa4>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d112      	bne.n	8000ab0 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a94:	2302      	movs	r3, #2
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <BSP_PB_Init+0xa8>)
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	f107 020c 	add.w	r2, r7, #12
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fa58 	bl	8000f60 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d11d      	bne.n	8000af2 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000ac0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ac4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <BSP_PB_Init+0xa8>)
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	f107 020c 	add.w	r2, r7, #12
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa43 	bl	8000f60 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000ada:	2328      	movs	r3, #40	; 0x28
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fa05 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000ae8:	2328      	movs	r3, #40	; 0x28
 8000aea:	b25b      	sxtb	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fa1c 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	2000004c 	.word	0x2000004c

08000b04 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <BSP_PB_GetState+0x28>)
 8000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fbcb 	bl	80012b8 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2000004c 	.word	0x2000004c

08000b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <SystemInit+0x60>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <SystemInit+0x60>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x64>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <SystemInit+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <SystemInit+0x64>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <SystemInit+0x64>)
 8000b5c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <SystemInit+0x64>)
 8000b68:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <SystemInit+0x68>)
 8000b6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <SystemInit+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <SystemInit+0x64>)
 8000b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SystemInit+0x60>)
 8000b80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b84:	609a      	str	r2, [r3, #8]
#endif
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00
 8000b94:	40023800 	.word	0x40023800
 8000b98:	24003010 	.word	0x24003010

08000b9c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000bf0:	f000 f884 	bl	8000cfc <HAL_IncTick>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f001 fd82 	bl	8002730 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20030000 	.word	0x20030000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	20000134 	.word	0x20000134
 8000c60:	20000150 	.word	0x20000150

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_Init+0x34>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_Init+0x34>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_Init+0x34>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_Init+0x34>)
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f92b 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	200f      	movs	r0, #15
 8000c88:	f000 f808 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f000 fbb2 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x54>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f943 	bl	8000f46 <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00e      	b.n	8000ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d80a      	bhi.n	8000ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f90b 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_InitTick+0x5c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000050 	.word	0x20000050
 8000cf4:	20000058 	.word	0x20000058
 8000cf8:	20000054 	.word	0x20000054

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000058 	.word	0x20000058
 8000d20:	20000138 	.word	0x20000138

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000138 	.word	0x20000138

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff29 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff3e 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff8e 	bl	8000e30 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff31 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffa2 	bl	8000e98 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e177      	b.n	800126c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8166 	bne.w	8001266 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d005      	beq.n	8000fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d130      	bne.n	8001014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b03      	cmp	r3, #3
 800101e:	d017      	beq.n	8001050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d123      	bne.n	80010a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0203 	and.w	r2, r3, #3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80c0 	beq.w	8001266 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b66      	ldr	r3, [pc, #408]	; (8001284 <HAL_GPIO_Init+0x324>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a65      	ldr	r2, [pc, #404]	; (8001284 <HAL_GPIO_Init+0x324>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b63      	ldr	r3, [pc, #396]	; (8001284 <HAL_GPIO_Init+0x324>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001102:	4a61      	ldr	r2, [pc, #388]	; (8001288 <HAL_GPIO_Init+0x328>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a58      	ldr	r2, [pc, #352]	; (800128c <HAL_GPIO_Init+0x32c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d037      	beq.n	800119e <HAL_GPIO_Init+0x23e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a57      	ldr	r2, [pc, #348]	; (8001290 <HAL_GPIO_Init+0x330>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d031      	beq.n	800119a <HAL_GPIO_Init+0x23a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a56      	ldr	r2, [pc, #344]	; (8001294 <HAL_GPIO_Init+0x334>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d02b      	beq.n	8001196 <HAL_GPIO_Init+0x236>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a55      	ldr	r2, [pc, #340]	; (8001298 <HAL_GPIO_Init+0x338>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_Init+0x232>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a54      	ldr	r2, [pc, #336]	; (800129c <HAL_GPIO_Init+0x33c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x22e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a53      	ldr	r2, [pc, #332]	; (80012a0 <HAL_GPIO_Init+0x340>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x22a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a52      	ldr	r2, [pc, #328]	; (80012a4 <HAL_GPIO_Init+0x344>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x226>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <HAL_GPIO_Init+0x348>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x222>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a50      	ldr	r2, [pc, #320]	; (80012ac <HAL_GPIO_Init+0x34c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x21e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <HAL_GPIO_Init+0x350>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x21a>
 8001176:	2309      	movs	r3, #9
 8001178:	e012      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800117a:	230a      	movs	r3, #10
 800117c:	e010      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800117e:	2308      	movs	r3, #8
 8001180:	e00e      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 8001182:	2307      	movs	r3, #7
 8001184:	e00c      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 8001186:	2306      	movs	r3, #6
 8001188:	e00a      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800118a:	2305      	movs	r3, #5
 800118c:	e008      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800118e:	2304      	movs	r3, #4
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 8001192:	2303      	movs	r3, #3
 8001194:	e004      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 8001196:	2302      	movs	r3, #2
 8001198:	e002      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x240>
 800119e:	2300      	movs	r3, #0
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	f002 0203 	and.w	r2, r2, #3
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	4093      	lsls	r3, r2
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b0:	4935      	ldr	r1, [pc, #212]	; (8001288 <HAL_GPIO_Init+0x328>)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011be:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <HAL_GPIO_Init+0x354>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e2:	4a34      	ldr	r2, [pc, #208]	; (80012b4 <HAL_GPIO_Init+0x354>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <HAL_GPIO_Init+0x354>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120c:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <HAL_GPIO_Init+0x354>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_GPIO_Init+0x354>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001236:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <HAL_GPIO_Init+0x354>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_GPIO_Init+0x354>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <HAL_GPIO_Init+0x354>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	f67f ae84 	bls.w	8000f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40013800 	.word	0x40013800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	40020800 	.word	0x40020800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40021000 	.word	0x40021000
 80012a0:	40021400 	.word	0x40021400
 80012a4:	40021800 	.word	0x40021800
 80012a8:	40021c00 	.word	0x40021c00
 80012ac:	40022000 	.word	0x40022000
 80012b0:	40022400 	.word	0x40022400
 80012b4:	40013c00 	.word	0x40013c00

080012b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e001      	b.n	80012da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001304:	e003      	b.n	800130e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800131a:	b480      	push	{r7}
 800131c:	b085      	sub	sp, #20
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800132c:	887a      	ldrh	r2, [r7, #2]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	041a      	lsls	r2, r3, #16
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43d9      	mvns	r1, r3
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	400b      	ands	r3, r1
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <HAL_UART_MspInit+0x9c>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <HAL_UART_MspInit+0x9c>)
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_UART_MspInit+0x9c>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <HAL_UART_MspInit+0x9c>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <HAL_UART_MspInit+0x9c>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	6313      	str	r3, [r2, #48]	; 0x30
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_UART_MspInit+0x9c>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_UART_MspInit+0x9c>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_UART_MspInit+0x9c>)
 800139a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139e:	6413      	str	r3, [r2, #64]	; 0x40
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_UART_MspInit+0x9c>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80013be:	2307      	movs	r3, #7
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <HAL_UART_MspInit+0xa0>)
 80013ca:	f7ff fdc9 	bl	8000f60 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80013ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80013d4:	2307      	movs	r3, #7
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <HAL_UART_MspInit+0xa0>)
 80013e0:	f7ff fdbe 	bl	8000f60 <HAL_GPIO_Init>
}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	; 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_PWREx_EnableOverDrive+0x90>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a1f      	ldr	r2, [pc, #124]	; (8001494 <HAL_PWREx_EnableOverDrive+0x90>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_PWREx_EnableOverDrive+0x90>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_PWREx_EnableOverDrive+0x94>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001430:	f7ff fc78 	bl	8000d24 <HAL_GetTick>
 8001434:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001436:	e009      	b.n	800144c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001438:	f7ff fc74 	bl	8000d24 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001446:	d901      	bls.n	800144c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e01f      	b.n	800148c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_PWREx_EnableOverDrive+0x98>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d1ee      	bne.n	8001438 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001460:	f7ff fc60 	bl	8000d24 <HAL_GetTick>
 8001464:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001466:	e009      	b.n	800147c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001468:	f7ff fc5c 	bl	8000d24 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001476:	d901      	bls.n	800147c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e007      	b.n	800148c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_PWREx_EnableOverDrive+0x98>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001488:	d1ee      	bne.n	8001468 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	420e0040 	.word	0x420e0040
 800149c:	40007000 	.word	0x40007000
 80014a0:	420e0044 	.word	0x420e0044

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e267      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d075      	beq.n	80015ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c2:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d00c      	beq.n	80014e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ce:	4b85      	ldr	r3, [pc, #532]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d112      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014da:	4b82      	ldr	r3, [pc, #520]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014e6:	d10b      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d05b      	beq.n	80015ac <HAL_RCC_OscConfig+0x108>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d157      	bne.n	80015ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e242      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001508:	d106      	bne.n	8001518 <HAL_RCC_OscConfig+0x74>
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a75      	ldr	r2, [pc, #468]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e01d      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x98>
 8001522:	4b70      	ldr	r3, [pc, #448]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a6f      	ldr	r2, [pc, #444]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b6d      	ldr	r3, [pc, #436]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6c      	ldr	r2, [pc, #432]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 800153c:	4b69      	ldr	r3, [pc, #420]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a68      	ldr	r2, [pc, #416]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b66      	ldr	r3, [pc, #408]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a65      	ldr	r2, [pc, #404]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d013      	beq.n	8001584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fbe2 	bl	8000d24 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fbde 	bl	8000d24 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e207      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	4b5b      	ldr	r3, [pc, #364]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0xc0>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fbce 	bl	8000d24 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fbca 	bl	8000d24 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1f3      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0xe8>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d063      	beq.n	8001682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d11c      	bne.n	800160c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d2:	4b44      	ldr	r3, [pc, #272]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d116      	bne.n	800160c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x152>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e1c7      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4937      	ldr	r1, [pc, #220]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	e03a      	b.n	8001682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d020      	beq.n	8001656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001614:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <HAL_RCC_OscConfig+0x244>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7ff fb83 	bl	8000d24 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fb7f 	bl	8000d24 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1a8      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4925      	ldr	r1, [pc, #148]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
 8001654:	e015      	b.n	8001682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_RCC_OscConfig+0x244>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fb62 	bl	8000d24 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fb5e 	bl	8000d24 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e187      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d036      	beq.n	80016fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d016      	beq.n	80016c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_RCC_OscConfig+0x248>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fb42 	bl	8000d24 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fb3e 	bl	8000d24 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e167      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_OscConfig+0x240>)
 80016b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x200>
 80016c2:	e01b      	b.n	80016fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_OscConfig+0x248>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb2b 	bl	8000d24 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d0:	e00e      	b.n	80016f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fb27 	bl	8000d24 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d907      	bls.n	80016f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e150      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
 80016e4:	40023800 	.word	0x40023800
 80016e8:	42470000 	.word	0x42470000
 80016ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	4b88      	ldr	r3, [pc, #544]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80016f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1ea      	bne.n	80016d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 8097 	beq.w	8001838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170e:	4b81      	ldr	r3, [pc, #516]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10f      	bne.n	800173a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	4b7d      	ldr	r3, [pc, #500]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a7c      	ldr	r2, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001736:	2301      	movs	r3, #1
 8001738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b77      	ldr	r3, [pc, #476]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d118      	bne.n	8001778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001746:	4b74      	ldr	r3, [pc, #464]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a73      	ldr	r2, [pc, #460]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001752:	f7ff fae7 	bl	8000d24 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175a:	f7ff fae3 	bl	8000d24 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e10c      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x474>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x2ea>
 8001780:	4b64      	ldr	r3, [pc, #400]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	4a63      	ldr	r2, [pc, #396]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6713      	str	r3, [r2, #112]	; 0x70
 800178c:	e01c      	b.n	80017c8 <HAL_RCC_OscConfig+0x324>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x30c>
 8001796:	4b5f      	ldr	r3, [pc, #380]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	4a5e      	ldr	r2, [pc, #376]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	6713      	str	r3, [r2, #112]	; 0x70
 80017a2:	4b5c      	ldr	r3, [pc, #368]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	4a5b      	ldr	r2, [pc, #364]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6713      	str	r3, [r2, #112]	; 0x70
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0x324>
 80017b0:	4b58      	ldr	r3, [pc, #352]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	4a57      	ldr	r2, [pc, #348]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	6713      	str	r3, [r2, #112]	; 0x70
 80017bc:	4b55      	ldr	r3, [pc, #340]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a54      	ldr	r2, [pc, #336]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 0304 	bic.w	r3, r3, #4
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d015      	beq.n	80017fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff faa8 	bl	8000d24 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff faa4 	bl	8000d24 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e0cb      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ee:	4b49      	ldr	r3, [pc, #292]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0ee      	beq.n	80017d8 <HAL_RCC_OscConfig+0x334>
 80017fa:	e014      	b.n	8001826 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fc:	f7ff fa92 	bl	8000d24 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001802:	e00a      	b.n	800181a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7ff fa8e 	bl	8000d24 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0b5      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181a:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ee      	bne.n	8001804 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	4a38      	ldr	r2, [pc, #224]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001836:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80a1 	beq.w	8001984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001842:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b08      	cmp	r3, #8
 800184c:	d05c      	beq.n	8001908 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d141      	bne.n	80018da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_RCC_OscConfig+0x478>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fa62 	bl	8000d24 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff fa5e 	bl	8000d24 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e087      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	019b      	lsls	r3, r3, #6
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	3b01      	subs	r3, #1
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	491b      	ldr	r1, [pc, #108]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x478>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fa37 	bl	8000d24 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff fa33 	bl	8000d24 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e05c      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x416>
 80018d8:	e054      	b.n	8001984 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x478>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fa20 	bl	8000d24 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fa1c 	bl	8000d24 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e045      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_OscConfig+0x470>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x444>
 8001906:	e03d      	b.n	8001984 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d107      	bne.n	8001920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e038      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
 8001914:	40023800 	.word	0x40023800
 8001918:	40007000 	.word	0x40007000
 800191c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x4ec>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d028      	beq.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d121      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d11a      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001950:	4013      	ands	r3, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001958:	4293      	cmp	r3, r2
 800195a:	d111      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	085b      	lsrs	r3, r3, #1
 8001968:	3b01      	subs	r3, #1
 800196a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d107      	bne.n	8001980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0cc      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d90c      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0b8      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d020      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a52      	ldr	r2, [pc, #328]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	494d      	ldr	r1, [pc, #308]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d044      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d119      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e07f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e06f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e067      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f023 0203 	bic.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4934      	ldr	r1, [pc, #208]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7ff f94e 	bl	8000d24 <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7ff f94a 	bl	8000d24 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e04f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 020c 	and.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1eb      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d20c      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e032      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4916      	ldr	r1, [pc, #88]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	490e      	ldr	r1, [pc, #56]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b1a:	f000 f821 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	490a      	ldr	r1, [pc, #40]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	5ccb      	ldrb	r3, [r1, r3]
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f8ae 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00
 8001b50:	40023800 	.word	0x40023800
 8001b54:	080030f8 	.word	0x080030f8
 8001b58:	20000050 	.word	0x20000050
 8001b5c:	20000054 	.word	0x20000054

08001b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b64:	b094      	sub	sp, #80	; 0x50
 8001b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b70:	2300      	movs	r3, #0
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b78:	4b79      	ldr	r3, [pc, #484]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d00d      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	f200 80e1 	bhi.w	8001d4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x34>
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b92:	e0db      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b94:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b98:	e0db      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b9a:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9e:	e0d8      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba0:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001baa:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d063      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb6:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	099b      	lsrs	r3, r3, #6
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bca:	2300      	movs	r3, #0
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	f04f 0000 	mov.w	r0, #0
 8001bda:	f04f 0100 	mov.w	r1, #0
 8001bde:	0159      	lsls	r1, r3, #5
 8001be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be4:	0150      	lsls	r0, r2, #5
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4621      	mov	r1, r4
 8001bec:	1a51      	subs	r1, r2, r1
 8001bee:	6139      	str	r1, [r7, #16]
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c04:	4659      	mov	r1, fp
 8001c06:	018b      	lsls	r3, r1, #6
 8001c08:	4651      	mov	r1, sl
 8001c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c0e:	4651      	mov	r1, sl
 8001c10:	018a      	lsls	r2, r1, #6
 8001c12:	4651      	mov	r1, sl
 8001c14:	ebb2 0801 	subs.w	r8, r2, r1
 8001c18:	4659      	mov	r1, fp
 8001c1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c32:	4690      	mov	r8, r2
 8001c34:	4699      	mov	r9, r3
 8001c36:	4623      	mov	r3, r4
 8001c38:	eb18 0303 	adds.w	r3, r8, r3
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	462b      	mov	r3, r5
 8001c40:	eb49 0303 	adc.w	r3, r9, r3
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c52:	4629      	mov	r1, r5
 8001c54:	024b      	lsls	r3, r1, #9
 8001c56:	4621      	mov	r1, r4
 8001c58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	024a      	lsls	r2, r1, #9
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c66:	2200      	movs	r2, #0
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c70:	f7fe fb16 	bl	80002a0 <__aeabi_uldivmod>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c7c:	e058      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	099b      	lsrs	r3, r3, #6
 8001c84:	2200      	movs	r2, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	4611      	mov	r1, r2
 8001c8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c8e:	623b      	str	r3, [r7, #32]
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
 8001c94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c98:	4642      	mov	r2, r8
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	f04f 0000 	mov.w	r0, #0
 8001ca0:	f04f 0100 	mov.w	r1, #0
 8001ca4:	0159      	lsls	r1, r3, #5
 8001ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001caa:	0150      	lsls	r0, r2, #5
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ccc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	00eb      	lsls	r3, r5, #3
 8001ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce6:	00e2      	lsls	r2, r4, #3
 8001ce8:	4614      	mov	r4, r2
 8001cea:	461d      	mov	r5, r3
 8001cec:	4643      	mov	r3, r8
 8001cee:	18e3      	adds	r3, r4, r3
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	eb45 0303 	adc.w	r3, r5, r3
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d06:	4629      	mov	r1, r5
 8001d08:	028b      	lsls	r3, r1, #10
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d10:	4621      	mov	r1, r4
 8001d12:	028a      	lsls	r2, r1, #10
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	61fa      	str	r2, [r7, #28]
 8001d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d24:	f7fe fabc 	bl	80002a0 <__aeabi_uldivmod>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d4a:	e002      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3750      	adds	r7, #80	; 0x50
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	00f42400 	.word	0x00f42400
 8001d68:	007a1200 	.word	0x007a1200

08001d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000050 	.word	0x20000050

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d88:	f7ff fff0 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0a9b      	lsrs	r3, r3, #10
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	08003108 	.word	0x08003108

08001dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001db0:	f7ff ffdc 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0b5b      	lsrs	r3, r3, #13
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4903      	ldr	r1, [pc, #12]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	08003108 	.word	0x08003108

08001dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e03f      	b.n	8001e66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff faa8 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2224      	movs	r2, #36	; 0x24
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f929 	bl	8002070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b08a      	sub	sp, #40	; 0x28
 8001e72:	af02      	add	r7, sp, #8
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d17c      	bne.n	8001f88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_UART_Transmit+0x2c>
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e075      	b.n	8001f8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_UART_Transmit+0x3e>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e06e      	b.n	8001f8a <HAL_UART_Transmit+0x11c>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2221      	movs	r2, #33	; 0x21
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ec2:	f7fe ff2f 	bl	8000d24 <HAL_GetTick>
 8001ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	88fa      	ldrh	r2, [r7, #6]
 8001ecc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001edc:	d108      	bne.n	8001ef0 <HAL_UART_Transmit+0x82>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d104      	bne.n	8001ef0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	e003      	b.n	8001ef8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f00:	e02a      	b.n	8001f58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f840 	bl	8001f92 <UART_WaitOnFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e036      	b.n	8001f8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10b      	bne.n	8001f3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	3302      	adds	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	e007      	b.n	8001f4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1cf      	bne.n	8001f02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2140      	movs	r1, #64	; 0x40
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f810 	bl	8001f92 <UART_WaitOnFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e006      	b.n	8001f8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e000      	b.n	8001f8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f88:	2302      	movs	r3, #2
  }
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b090      	sub	sp, #64	; 0x40
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa2:	e050      	b.n	8002046 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001faa:	d04c      	beq.n	8002046 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fb2:	f7fe feb7 	bl	8000d24 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d241      	bcs.n	8002046 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	e853 3f00 	ldrex	r3, [r3]
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	330c      	adds	r3, #12
 8001fe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fe2:	637a      	str	r2, [r7, #52]	; 0x34
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fea:	e841 2300 	strex	r3, r2, [r1]
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1e5      	bne.n	8001fc2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3314      	adds	r3, #20
 8001ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	e853 3f00 	ldrex	r3, [r3]
 8002004:	613b      	str	r3, [r7, #16]
   return(result);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3314      	adds	r3, #20
 8002014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002016:	623a      	str	r2, [r7, #32]
 8002018:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201a:	69f9      	ldr	r1, [r7, #28]
 800201c:	6a3a      	ldr	r2, [r7, #32]
 800201e:	e841 2300 	strex	r3, r2, [r1]
 8002022:	61bb      	str	r3, [r7, #24]
   return(result);
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1e5      	bne.n	8001ff6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e00f      	b.n	8002066 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4013      	ands	r3, r2
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	429a      	cmp	r2, r3
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	429a      	cmp	r2, r3
 8002062:	d09f      	beq.n	8001fa4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3740      	adds	r7, #64	; 0x40
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002074:	b0c0      	sub	sp, #256	; 0x100
 8002076:	af00      	add	r7, sp, #0
 8002078:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	ea40 0301 	orr.w	r3, r0, r1
 8002098:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800209a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020c8:	f021 010c 	bic.w	r1, r1, #12
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020d6:	430b      	orrs	r3, r1
 80020d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ea:	6999      	ldr	r1, [r3, #24]
 80020ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	ea40 0301 	orr.w	r3, r0, r1
 80020f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b8f      	ldr	r3, [pc, #572]	; (800233c <UART_SetConfig+0x2cc>)
 8002100:	429a      	cmp	r2, r3
 8002102:	d005      	beq.n	8002110 <UART_SetConfig+0xa0>
 8002104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b8d      	ldr	r3, [pc, #564]	; (8002340 <UART_SetConfig+0x2d0>)
 800210c:	429a      	cmp	r2, r3
 800210e:	d104      	bne.n	800211a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002110:	f7ff fe4c 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 8002114:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002118:	e003      	b.n	8002122 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800211a:	f7ff fe33 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 800211e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800212c:	f040 810c 	bne.w	8002348 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002134:	2200      	movs	r2, #0
 8002136:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800213a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800213e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002142:	4622      	mov	r2, r4
 8002144:	462b      	mov	r3, r5
 8002146:	1891      	adds	r1, r2, r2
 8002148:	65b9      	str	r1, [r7, #88]	; 0x58
 800214a:	415b      	adcs	r3, r3
 800214c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800214e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002152:	4621      	mov	r1, r4
 8002154:	eb12 0801 	adds.w	r8, r2, r1
 8002158:	4629      	mov	r1, r5
 800215a:	eb43 0901 	adc.w	r9, r3, r1
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800216a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800216e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002172:	4690      	mov	r8, r2
 8002174:	4699      	mov	r9, r3
 8002176:	4623      	mov	r3, r4
 8002178:	eb18 0303 	adds.w	r3, r8, r3
 800217c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002180:	462b      	mov	r3, r5
 8002182:	eb49 0303 	adc.w	r3, r9, r3
 8002186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800218a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002196:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800219a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800219e:	460b      	mov	r3, r1
 80021a0:	18db      	adds	r3, r3, r3
 80021a2:	653b      	str	r3, [r7, #80]	; 0x50
 80021a4:	4613      	mov	r3, r2
 80021a6:	eb42 0303 	adc.w	r3, r2, r3
 80021aa:	657b      	str	r3, [r7, #84]	; 0x54
 80021ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021b4:	f7fe f874 	bl	80002a0 <__aeabi_uldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4b61      	ldr	r3, [pc, #388]	; (8002344 <UART_SetConfig+0x2d4>)
 80021be:	fba3 2302 	umull	r2, r3, r3, r2
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	011c      	lsls	r4, r3, #4
 80021c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ca:	2200      	movs	r2, #0
 80021cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021d8:	4642      	mov	r2, r8
 80021da:	464b      	mov	r3, r9
 80021dc:	1891      	adds	r1, r2, r2
 80021de:	64b9      	str	r1, [r7, #72]	; 0x48
 80021e0:	415b      	adcs	r3, r3
 80021e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021e8:	4641      	mov	r1, r8
 80021ea:	eb12 0a01 	adds.w	sl, r2, r1
 80021ee:	4649      	mov	r1, r9
 80021f0:	eb43 0b01 	adc.w	fp, r3, r1
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002200:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002208:	4692      	mov	sl, r2
 800220a:	469b      	mov	fp, r3
 800220c:	4643      	mov	r3, r8
 800220e:	eb1a 0303 	adds.w	r3, sl, r3
 8002212:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002216:	464b      	mov	r3, r9
 8002218:	eb4b 0303 	adc.w	r3, fp, r3
 800221c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800222c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002230:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002234:	460b      	mov	r3, r1
 8002236:	18db      	adds	r3, r3, r3
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
 800223a:	4613      	mov	r3, r2
 800223c:	eb42 0303 	adc.w	r3, r2, r3
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
 8002242:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002246:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800224a:	f7fe f829 	bl	80002a0 <__aeabi_uldivmod>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4611      	mov	r1, r2
 8002254:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <UART_SetConfig+0x2d4>)
 8002256:	fba3 2301 	umull	r2, r3, r3, r1
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2264      	movs	r2, #100	; 0x64
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	1acb      	subs	r3, r1, r3
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800226a:	4b36      	ldr	r3, [pc, #216]	; (8002344 <UART_SetConfig+0x2d4>)
 800226c:	fba3 2302 	umull	r2, r3, r3, r2
 8002270:	095b      	lsrs	r3, r3, #5
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002278:	441c      	add	r4, r3
 800227a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800227e:	2200      	movs	r2, #0
 8002280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002284:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002288:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800228c:	4642      	mov	r2, r8
 800228e:	464b      	mov	r3, r9
 8002290:	1891      	adds	r1, r2, r2
 8002292:	63b9      	str	r1, [r7, #56]	; 0x38
 8002294:	415b      	adcs	r3, r3
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002298:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800229c:	4641      	mov	r1, r8
 800229e:	1851      	adds	r1, r2, r1
 80022a0:	6339      	str	r1, [r7, #48]	; 0x30
 80022a2:	4649      	mov	r1, r9
 80022a4:	414b      	adcs	r3, r1
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022b4:	4659      	mov	r1, fp
 80022b6:	00cb      	lsls	r3, r1, #3
 80022b8:	4651      	mov	r1, sl
 80022ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022be:	4651      	mov	r1, sl
 80022c0:	00ca      	lsls	r2, r1, #3
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	4642      	mov	r2, r8
 80022ca:	189b      	adds	r3, r3, r2
 80022cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022d0:	464b      	mov	r3, r9
 80022d2:	460a      	mov	r2, r1
 80022d4:	eb42 0303 	adc.w	r3, r2, r3
 80022d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022f0:	460b      	mov	r3, r1
 80022f2:	18db      	adds	r3, r3, r3
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f6:	4613      	mov	r3, r2
 80022f8:	eb42 0303 	adc.w	r3, r2, r3
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002302:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002306:	f7fd ffcb 	bl	80002a0 <__aeabi_uldivmod>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <UART_SetConfig+0x2d4>)
 8002310:	fba3 1302 	umull	r1, r3, r3, r2
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	2164      	movs	r1, #100	; 0x64
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	3332      	adds	r3, #50	; 0x32
 8002322:	4a08      	ldr	r2, [pc, #32]	; (8002344 <UART_SetConfig+0x2d4>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	f003 0207 	and.w	r2, r3, #7
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4422      	add	r2, r4
 8002336:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002338:	e105      	b.n	8002546 <UART_SetConfig+0x4d6>
 800233a:	bf00      	nop
 800233c:	40011000 	.word	0x40011000
 8002340:	40011400 	.word	0x40011400
 8002344:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800234c:	2200      	movs	r2, #0
 800234e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002352:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002356:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800235a:	4642      	mov	r2, r8
 800235c:	464b      	mov	r3, r9
 800235e:	1891      	adds	r1, r2, r2
 8002360:	6239      	str	r1, [r7, #32]
 8002362:	415b      	adcs	r3, r3
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800236a:	4641      	mov	r1, r8
 800236c:	1854      	adds	r4, r2, r1
 800236e:	4649      	mov	r1, r9
 8002370:	eb43 0501 	adc.w	r5, r3, r1
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	00eb      	lsls	r3, r5, #3
 800237e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002382:	00e2      	lsls	r2, r4, #3
 8002384:	4614      	mov	r4, r2
 8002386:	461d      	mov	r5, r3
 8002388:	4643      	mov	r3, r8
 800238a:	18e3      	adds	r3, r4, r3
 800238c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002390:	464b      	mov	r3, r9
 8002392:	eb45 0303 	adc.w	r3, r5, r3
 8002396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800239a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023b6:	4629      	mov	r1, r5
 80023b8:	008b      	lsls	r3, r1, #2
 80023ba:	4621      	mov	r1, r4
 80023bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023c0:	4621      	mov	r1, r4
 80023c2:	008a      	lsls	r2, r1, #2
 80023c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023c8:	f7fd ff6a 	bl	80002a0 <__aeabi_uldivmod>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4b60      	ldr	r3, [pc, #384]	; (8002554 <UART_SetConfig+0x4e4>)
 80023d2:	fba3 2302 	umull	r2, r3, r3, r2
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	011c      	lsls	r4, r3, #4
 80023da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023de:	2200      	movs	r2, #0
 80023e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023ec:	4642      	mov	r2, r8
 80023ee:	464b      	mov	r3, r9
 80023f0:	1891      	adds	r1, r2, r2
 80023f2:	61b9      	str	r1, [r7, #24]
 80023f4:	415b      	adcs	r3, r3
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023fc:	4641      	mov	r1, r8
 80023fe:	1851      	adds	r1, r2, r1
 8002400:	6139      	str	r1, [r7, #16]
 8002402:	4649      	mov	r1, r9
 8002404:	414b      	adcs	r3, r1
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002414:	4659      	mov	r1, fp
 8002416:	00cb      	lsls	r3, r1, #3
 8002418:	4651      	mov	r1, sl
 800241a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800241e:	4651      	mov	r1, sl
 8002420:	00ca      	lsls	r2, r1, #3
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	4603      	mov	r3, r0
 8002428:	4642      	mov	r2, r8
 800242a:	189b      	adds	r3, r3, r2
 800242c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002430:	464b      	mov	r3, r9
 8002432:	460a      	mov	r2, r1
 8002434:	eb42 0303 	adc.w	r3, r2, r3
 8002438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	67bb      	str	r3, [r7, #120]	; 0x78
 8002446:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002454:	4649      	mov	r1, r9
 8002456:	008b      	lsls	r3, r1, #2
 8002458:	4641      	mov	r1, r8
 800245a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800245e:	4641      	mov	r1, r8
 8002460:	008a      	lsls	r2, r1, #2
 8002462:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002466:	f7fd ff1b 	bl	80002a0 <__aeabi_uldivmod>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4b39      	ldr	r3, [pc, #228]	; (8002554 <UART_SetConfig+0x4e4>)
 8002470:	fba3 1302 	umull	r1, r3, r3, r2
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	2164      	movs	r1, #100	; 0x64
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	3332      	adds	r3, #50	; 0x32
 8002482:	4a34      	ldr	r2, [pc, #208]	; (8002554 <UART_SetConfig+0x4e4>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800248e:	441c      	add	r4, r3
 8002490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002494:	2200      	movs	r2, #0
 8002496:	673b      	str	r3, [r7, #112]	; 0x70
 8002498:	677a      	str	r2, [r7, #116]	; 0x74
 800249a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800249e:	4642      	mov	r2, r8
 80024a0:	464b      	mov	r3, r9
 80024a2:	1891      	adds	r1, r2, r2
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	415b      	adcs	r3, r3
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ae:	4641      	mov	r1, r8
 80024b0:	1851      	adds	r1, r2, r1
 80024b2:	6039      	str	r1, [r7, #0]
 80024b4:	4649      	mov	r1, r9
 80024b6:	414b      	adcs	r3, r1
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024c6:	4659      	mov	r1, fp
 80024c8:	00cb      	lsls	r3, r1, #3
 80024ca:	4651      	mov	r1, sl
 80024cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024d0:	4651      	mov	r1, sl
 80024d2:	00ca      	lsls	r2, r1, #3
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	4603      	mov	r3, r0
 80024da:	4642      	mov	r2, r8
 80024dc:	189b      	adds	r3, r3, r2
 80024de:	66bb      	str	r3, [r7, #104]	; 0x68
 80024e0:	464b      	mov	r3, r9
 80024e2:	460a      	mov	r2, r1
 80024e4:	eb42 0303 	adc.w	r3, r2, r3
 80024e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	663b      	str	r3, [r7, #96]	; 0x60
 80024f4:	667a      	str	r2, [r7, #100]	; 0x64
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002502:	4649      	mov	r1, r9
 8002504:	008b      	lsls	r3, r1, #2
 8002506:	4641      	mov	r1, r8
 8002508:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800250c:	4641      	mov	r1, r8
 800250e:	008a      	lsls	r2, r1, #2
 8002510:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002514:	f7fd fec4 	bl	80002a0 <__aeabi_uldivmod>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <UART_SetConfig+0x4e4>)
 800251e:	fba3 1302 	umull	r1, r3, r3, r2
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	2164      	movs	r1, #100	; 0x64
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	3332      	adds	r3, #50	; 0x32
 8002530:	4a08      	ldr	r2, [pc, #32]	; (8002554 <UART_SetConfig+0x4e4>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	f003 020f 	and.w	r2, r3, #15
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4422      	add	r2, r4
 8002544:	609a      	str	r2, [r3, #8]
}
 8002546:	bf00      	nop
 8002548:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800254c:	46bd      	mov	sp, r7
 800254e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002552:	bf00      	nop
 8002554:	51eb851f 	.word	0x51eb851f

08002558 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800255e:	f7fe fb81 	bl	8000c64 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8002562:	f000 f853 	bl	800260c <SystemClock_Config>

  /* Initialize BSP Led for LED1, LED2 and LED3 */
  	BSP_LED_Init(LED1);
 8002566:	2000      	movs	r0, #0
 8002568:	f7fe f9f2 	bl	8000950 <BSP_LED_Init>
  	BSP_LED_Init(LED2);
 800256c:	2001      	movs	r0, #1
 800256e:	f7fe f9ef 	bl	8000950 <BSP_LED_Init>
  	BSP_LED_Init(LED3);
 8002572:	2002      	movs	r0, #2
 8002574:	f7fe f9ec 	bl	8000950 <BSP_LED_Init>

  /* Initialize BSP PB for BUTTON_USER */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002578:	2100      	movs	r1, #0
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe fa6c 	bl	8000a58 <BSP_PB_Init>

  /*Defino estructura para led*/
  delay_t delayLed;
 /*Arreglo que contiene las distinas frecuencias a utilizar*/
  uint32_t frecuencia[]={100,500};
 8002580:	4a21      	ldr	r2, [pc, #132]	; (8002608 <main+0xb0>)
 8002582:	463b      	mov	r3, r7
 8002584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002588:	e883 0003 	stmia.w	r3, {r0, r1}

  /*Variable que contiene el tamaño de array frecuencia*/
  uint8_t sizeFrecuencia=sizeof(frecuencia)/sizeof(frecuencia[0]);
 800258c:	2302      	movs	r3, #2
 800258e:	75bb      	strb	r3, [r7, #22]

  /*Indice para recorrer array de frecuencias*/
  uint8_t  indiceFrecuencia=0;
 8002590:	2300      	movs	r3, #0
 8002592:	75fb      	strb	r3, [r7, #23]
  /*Estado de uart*/
  bool_t estado;

  /*Inicializo configuracion a utilizar en led*/
  delayInit(&delayLed,frecuencia[indiceFrecuencia]);
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	3318      	adds	r3, #24
 800259a:	443b      	add	r3, r7
 800259c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80025a0:	f107 0308 	add.w	r3, r7, #8
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe f8b4 	bl	8000714 <delayInit>
  /*Inicializo configuracion para algoritmo de validación de pulsaciones*/
  debounceFSM_init();
 80025ac:	f7fd fffa 	bl	80005a4 <debounceFSM_init>


  estado=uartInit();
 80025b0:	f7fe f91c 	bl	80007ec <uartInit>
 80025b4:	4603      	mov	r3, r0
 80025b6:	757b      	strb	r3, [r7, #21]

  /* Infinite loop */
  while (1)
  {
	  	  //Actualizar MEF para validacion de pulsaciones
	  		debounceFSM_update();
 80025b8:	f7fe f804 	bl	80005c4 <debounceFSM_update>

	  		//Si hubo una pulsación detectada, se actualiza indice de array de frecuencias
	  		if (readKey()){
 80025bc:	f7fe f892 	bl	80006e4 <readKey>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d014      	beq.n	80025f0 <main+0x98>
	  			indiceFrecuencia++;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	3301      	adds	r3, #1
 80025ca:	75fb      	strb	r3, [r7, #23]

	  			if (indiceFrecuencia>=sizeFrecuencia){
 80025cc:	7dfa      	ldrb	r2, [r7, #23]
 80025ce:	7dbb      	ldrb	r3, [r7, #22]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d301      	bcc.n	80025d8 <main+0x80>
	  				indiceFrecuencia=0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	75fb      	strb	r3, [r7, #23]
	  			}

	  			//Se actualiza tiempo de Toggle de led
	  			delayWrite(&delayLed,frecuencia[indiceFrecuencia]);
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	3318      	adds	r3, #24
 80025de:	443b      	add	r3, r7
 80025e0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe f8e3 	bl	80007b6 <delayWrite>
	  		}

	  		//Cuando se cumpla el tiempo de duración, se ejecuta Toggle de led
	  		if (delayRead(&delayLed) == true){
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe f8ab 	bl	8000750 <delayRead>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0db      	beq.n	80025b8 <main+0x60>
	  			BSP_LED_Toggle(LED2);
 8002600:	2001      	movs	r0, #1
 8002602:	f7fe fa0f 	bl	8000a24 <BSP_LED_Toggle>
	  		debounceFSM_update();
 8002606:	e7d7      	b.n	80025b8 <main+0x60>
 8002608:	080030e8 	.word	0x080030e8

0800260c <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b094      	sub	sp, #80	; 0x50
 8002610:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <SystemClock_Config+0xbc>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a2b      	ldr	r2, [pc, #172]	; (80026c8 <SystemClock_Config+0xbc>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <SystemClock_Config+0xbc>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <SystemClock_Config+0xc0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a25      	ldr	r2, [pc, #148]	; (80026cc <SystemClock_Config+0xc0>)
 8002638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <SystemClock_Config+0xc0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800264a:	2301      	movs	r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800264e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002652:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002654:	2302      	movs	r3, #2
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800265e:	2308      	movs	r3, #8
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002662:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002668:	2302      	movs	r3, #2
 800266a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800266c:	2307      	movs	r3, #7
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe ff15 	bl	80014a4 <HAL_RCC_OscConfig>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002680:	f000 f826 	bl	80026d0 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002684:	f7fe febe 	bl	8001404 <HAL_PWREx_EnableOverDrive>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 800268e:	f000 f81f 	bl	80026d0 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002692:	230f      	movs	r3, #15
 8002694:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002696:	2302      	movs	r3, #2
 8002698:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800269a:	2300      	movs	r3, #0
 800269c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800269e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80026a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026ae:	2105      	movs	r1, #5
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff f96f 	bl	8001994 <HAL_RCC_ClockConfig>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 80026bc:	f000 f808 	bl	80026d0 <Error_Handler>
  }
}
 80026c0:	bf00      	nop
 80026c2:	3750      	adds	r7, #80	; 0x50
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40007000 	.word	0x40007000

080026d0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7fe f98b 	bl	80009f0 <BSP_LED_On>
  while (1)
 80026da:	e7fe      	b.n	80026da <Error_Handler+0xa>

080026dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80026dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002714 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026e2:	e003      	b.n	80026ec <LoopCopyDataInit>

080026e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026ea:	3104      	adds	r1, #4

080026ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026ec:	480b      	ldr	r0, [pc, #44]	; (800271c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026f4:	d3f6      	bcc.n	80026e4 <CopyDataInit>
  ldr  r2, =_sbss
 80026f6:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026f8:	e002      	b.n	8002700 <LoopFillZerobss>

080026fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026fc:	f842 3b04 	str.w	r3, [r2], #4

08002700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002704:	d3f9      	bcc.n	80026fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002706:	f7fe fa13 	bl	8000b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270a:	f000 f817 	bl	800273c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800270e:	f7ff ff23 	bl	8002558 <main>
  bx  lr    
 8002712:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002714:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002718:	08003154 	.word	0x08003154
  ldr  r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002720:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8002724:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8002728:	2000014c 	.word	0x2000014c

0800272c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC_IRQHandler>
	...

08002730 <__errno>:
 8002730:	4b01      	ldr	r3, [pc, #4]	; (8002738 <__errno+0x8>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	2000005c 	.word	0x2000005c

0800273c <__libc_init_array>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	4d0d      	ldr	r5, [pc, #52]	; (8002774 <__libc_init_array+0x38>)
 8002740:	4c0d      	ldr	r4, [pc, #52]	; (8002778 <__libc_init_array+0x3c>)
 8002742:	1b64      	subs	r4, r4, r5
 8002744:	10a4      	asrs	r4, r4, #2
 8002746:	2600      	movs	r6, #0
 8002748:	42a6      	cmp	r6, r4
 800274a:	d109      	bne.n	8002760 <__libc_init_array+0x24>
 800274c:	4d0b      	ldr	r5, [pc, #44]	; (800277c <__libc_init_array+0x40>)
 800274e:	4c0c      	ldr	r4, [pc, #48]	; (8002780 <__libc_init_array+0x44>)
 8002750:	f000 fc86 	bl	8003060 <_init>
 8002754:	1b64      	subs	r4, r4, r5
 8002756:	10a4      	asrs	r4, r4, #2
 8002758:	2600      	movs	r6, #0
 800275a:	42a6      	cmp	r6, r4
 800275c:	d105      	bne.n	800276a <__libc_init_array+0x2e>
 800275e:	bd70      	pop	{r4, r5, r6, pc}
 8002760:	f855 3b04 	ldr.w	r3, [r5], #4
 8002764:	4798      	blx	r3
 8002766:	3601      	adds	r6, #1
 8002768:	e7ee      	b.n	8002748 <__libc_init_array+0xc>
 800276a:	f855 3b04 	ldr.w	r3, [r5], #4
 800276e:	4798      	blx	r3
 8002770:	3601      	adds	r6, #1
 8002772:	e7f2      	b.n	800275a <__libc_init_array+0x1e>
 8002774:	0800314c 	.word	0x0800314c
 8002778:	0800314c 	.word	0x0800314c
 800277c:	0800314c 	.word	0x0800314c
 8002780:	08003150 	.word	0x08003150

08002784 <siprintf>:
 8002784:	b40e      	push	{r1, r2, r3}
 8002786:	b500      	push	{lr}
 8002788:	b09c      	sub	sp, #112	; 0x70
 800278a:	ab1d      	add	r3, sp, #116	; 0x74
 800278c:	9002      	str	r0, [sp, #8]
 800278e:	9006      	str	r0, [sp, #24]
 8002790:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002794:	4809      	ldr	r0, [pc, #36]	; (80027bc <siprintf+0x38>)
 8002796:	9107      	str	r1, [sp, #28]
 8002798:	9104      	str	r1, [sp, #16]
 800279a:	4909      	ldr	r1, [pc, #36]	; (80027c0 <siprintf+0x3c>)
 800279c:	f853 2b04 	ldr.w	r2, [r3], #4
 80027a0:	9105      	str	r1, [sp, #20]
 80027a2:	6800      	ldr	r0, [r0, #0]
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	a902      	add	r1, sp, #8
 80027a8:	f000 f868 	bl	800287c <_svfiprintf_r>
 80027ac:	9b02      	ldr	r3, [sp, #8]
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	b01c      	add	sp, #112	; 0x70
 80027b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80027b8:	b003      	add	sp, #12
 80027ba:	4770      	bx	lr
 80027bc:	2000005c 	.word	0x2000005c
 80027c0:	ffff0208 	.word	0xffff0208

080027c4 <__ssputs_r>:
 80027c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c8:	688e      	ldr	r6, [r1, #8]
 80027ca:	429e      	cmp	r6, r3
 80027cc:	4682      	mov	sl, r0
 80027ce:	460c      	mov	r4, r1
 80027d0:	4690      	mov	r8, r2
 80027d2:	461f      	mov	r7, r3
 80027d4:	d838      	bhi.n	8002848 <__ssputs_r+0x84>
 80027d6:	898a      	ldrh	r2, [r1, #12]
 80027d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027dc:	d032      	beq.n	8002844 <__ssputs_r+0x80>
 80027de:	6825      	ldr	r5, [r4, #0]
 80027e0:	6909      	ldr	r1, [r1, #16]
 80027e2:	eba5 0901 	sub.w	r9, r5, r1
 80027e6:	6965      	ldr	r5, [r4, #20]
 80027e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027f0:	3301      	adds	r3, #1
 80027f2:	444b      	add	r3, r9
 80027f4:	106d      	asrs	r5, r5, #1
 80027f6:	429d      	cmp	r5, r3
 80027f8:	bf38      	it	cc
 80027fa:	461d      	movcc	r5, r3
 80027fc:	0553      	lsls	r3, r2, #21
 80027fe:	d531      	bpl.n	8002864 <__ssputs_r+0xa0>
 8002800:	4629      	mov	r1, r5
 8002802:	f000 fb63 	bl	8002ecc <_malloc_r>
 8002806:	4606      	mov	r6, r0
 8002808:	b950      	cbnz	r0, 8002820 <__ssputs_r+0x5c>
 800280a:	230c      	movs	r3, #12
 800280c:	f8ca 3000 	str.w	r3, [sl]
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002816:	81a3      	strh	r3, [r4, #12]
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002820:	6921      	ldr	r1, [r4, #16]
 8002822:	464a      	mov	r2, r9
 8002824:	f000 fabe 	bl	8002da4 <memcpy>
 8002828:	89a3      	ldrh	r3, [r4, #12]
 800282a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800282e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002832:	81a3      	strh	r3, [r4, #12]
 8002834:	6126      	str	r6, [r4, #16]
 8002836:	6165      	str	r5, [r4, #20]
 8002838:	444e      	add	r6, r9
 800283a:	eba5 0509 	sub.w	r5, r5, r9
 800283e:	6026      	str	r6, [r4, #0]
 8002840:	60a5      	str	r5, [r4, #8]
 8002842:	463e      	mov	r6, r7
 8002844:	42be      	cmp	r6, r7
 8002846:	d900      	bls.n	800284a <__ssputs_r+0x86>
 8002848:	463e      	mov	r6, r7
 800284a:	6820      	ldr	r0, [r4, #0]
 800284c:	4632      	mov	r2, r6
 800284e:	4641      	mov	r1, r8
 8002850:	f000 fab6 	bl	8002dc0 <memmove>
 8002854:	68a3      	ldr	r3, [r4, #8]
 8002856:	1b9b      	subs	r3, r3, r6
 8002858:	60a3      	str	r3, [r4, #8]
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	4433      	add	r3, r6
 800285e:	6023      	str	r3, [r4, #0]
 8002860:	2000      	movs	r0, #0
 8002862:	e7db      	b.n	800281c <__ssputs_r+0x58>
 8002864:	462a      	mov	r2, r5
 8002866:	f000 fba5 	bl	8002fb4 <_realloc_r>
 800286a:	4606      	mov	r6, r0
 800286c:	2800      	cmp	r0, #0
 800286e:	d1e1      	bne.n	8002834 <__ssputs_r+0x70>
 8002870:	6921      	ldr	r1, [r4, #16]
 8002872:	4650      	mov	r0, sl
 8002874:	f000 fabe 	bl	8002df4 <_free_r>
 8002878:	e7c7      	b.n	800280a <__ssputs_r+0x46>
	...

0800287c <_svfiprintf_r>:
 800287c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002880:	4698      	mov	r8, r3
 8002882:	898b      	ldrh	r3, [r1, #12]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	b09d      	sub	sp, #116	; 0x74
 8002888:	4607      	mov	r7, r0
 800288a:	460d      	mov	r5, r1
 800288c:	4614      	mov	r4, r2
 800288e:	d50e      	bpl.n	80028ae <_svfiprintf_r+0x32>
 8002890:	690b      	ldr	r3, [r1, #16]
 8002892:	b963      	cbnz	r3, 80028ae <_svfiprintf_r+0x32>
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	f000 fb19 	bl	8002ecc <_malloc_r>
 800289a:	6028      	str	r0, [r5, #0]
 800289c:	6128      	str	r0, [r5, #16]
 800289e:	b920      	cbnz	r0, 80028aa <_svfiprintf_r+0x2e>
 80028a0:	230c      	movs	r3, #12
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	f04f 30ff 	mov.w	r0, #4294967295
 80028a8:	e0d1      	b.n	8002a4e <_svfiprintf_r+0x1d2>
 80028aa:	2340      	movs	r3, #64	; 0x40
 80028ac:	616b      	str	r3, [r5, #20]
 80028ae:	2300      	movs	r3, #0
 80028b0:	9309      	str	r3, [sp, #36]	; 0x24
 80028b2:	2320      	movs	r3, #32
 80028b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80028bc:	2330      	movs	r3, #48	; 0x30
 80028be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002a68 <_svfiprintf_r+0x1ec>
 80028c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028c6:	f04f 0901 	mov.w	r9, #1
 80028ca:	4623      	mov	r3, r4
 80028cc:	469a      	mov	sl, r3
 80028ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028d2:	b10a      	cbz	r2, 80028d8 <_svfiprintf_r+0x5c>
 80028d4:	2a25      	cmp	r2, #37	; 0x25
 80028d6:	d1f9      	bne.n	80028cc <_svfiprintf_r+0x50>
 80028d8:	ebba 0b04 	subs.w	fp, sl, r4
 80028dc:	d00b      	beq.n	80028f6 <_svfiprintf_r+0x7a>
 80028de:	465b      	mov	r3, fp
 80028e0:	4622      	mov	r2, r4
 80028e2:	4629      	mov	r1, r5
 80028e4:	4638      	mov	r0, r7
 80028e6:	f7ff ff6d 	bl	80027c4 <__ssputs_r>
 80028ea:	3001      	adds	r0, #1
 80028ec:	f000 80aa 	beq.w	8002a44 <_svfiprintf_r+0x1c8>
 80028f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028f2:	445a      	add	r2, fp
 80028f4:	9209      	str	r2, [sp, #36]	; 0x24
 80028f6:	f89a 3000 	ldrb.w	r3, [sl]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80a2 	beq.w	8002a44 <_svfiprintf_r+0x1c8>
 8002900:	2300      	movs	r3, #0
 8002902:	f04f 32ff 	mov.w	r2, #4294967295
 8002906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800290a:	f10a 0a01 	add.w	sl, sl, #1
 800290e:	9304      	str	r3, [sp, #16]
 8002910:	9307      	str	r3, [sp, #28]
 8002912:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002916:	931a      	str	r3, [sp, #104]	; 0x68
 8002918:	4654      	mov	r4, sl
 800291a:	2205      	movs	r2, #5
 800291c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002920:	4851      	ldr	r0, [pc, #324]	; (8002a68 <_svfiprintf_r+0x1ec>)
 8002922:	f7fd fc6d 	bl	8000200 <memchr>
 8002926:	9a04      	ldr	r2, [sp, #16]
 8002928:	b9d8      	cbnz	r0, 8002962 <_svfiprintf_r+0xe6>
 800292a:	06d0      	lsls	r0, r2, #27
 800292c:	bf44      	itt	mi
 800292e:	2320      	movmi	r3, #32
 8002930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002934:	0711      	lsls	r1, r2, #28
 8002936:	bf44      	itt	mi
 8002938:	232b      	movmi	r3, #43	; 0x2b
 800293a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800293e:	f89a 3000 	ldrb.w	r3, [sl]
 8002942:	2b2a      	cmp	r3, #42	; 0x2a
 8002944:	d015      	beq.n	8002972 <_svfiprintf_r+0xf6>
 8002946:	9a07      	ldr	r2, [sp, #28]
 8002948:	4654      	mov	r4, sl
 800294a:	2000      	movs	r0, #0
 800294c:	f04f 0c0a 	mov.w	ip, #10
 8002950:	4621      	mov	r1, r4
 8002952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002956:	3b30      	subs	r3, #48	; 0x30
 8002958:	2b09      	cmp	r3, #9
 800295a:	d94e      	bls.n	80029fa <_svfiprintf_r+0x17e>
 800295c:	b1b0      	cbz	r0, 800298c <_svfiprintf_r+0x110>
 800295e:	9207      	str	r2, [sp, #28]
 8002960:	e014      	b.n	800298c <_svfiprintf_r+0x110>
 8002962:	eba0 0308 	sub.w	r3, r0, r8
 8002966:	fa09 f303 	lsl.w	r3, r9, r3
 800296a:	4313      	orrs	r3, r2
 800296c:	9304      	str	r3, [sp, #16]
 800296e:	46a2      	mov	sl, r4
 8002970:	e7d2      	b.n	8002918 <_svfiprintf_r+0x9c>
 8002972:	9b03      	ldr	r3, [sp, #12]
 8002974:	1d19      	adds	r1, r3, #4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	9103      	str	r1, [sp, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	bfbb      	ittet	lt
 800297e:	425b      	neglt	r3, r3
 8002980:	f042 0202 	orrlt.w	r2, r2, #2
 8002984:	9307      	strge	r3, [sp, #28]
 8002986:	9307      	strlt	r3, [sp, #28]
 8002988:	bfb8      	it	lt
 800298a:	9204      	strlt	r2, [sp, #16]
 800298c:	7823      	ldrb	r3, [r4, #0]
 800298e:	2b2e      	cmp	r3, #46	; 0x2e
 8002990:	d10c      	bne.n	80029ac <_svfiprintf_r+0x130>
 8002992:	7863      	ldrb	r3, [r4, #1]
 8002994:	2b2a      	cmp	r3, #42	; 0x2a
 8002996:	d135      	bne.n	8002a04 <_svfiprintf_r+0x188>
 8002998:	9b03      	ldr	r3, [sp, #12]
 800299a:	1d1a      	adds	r2, r3, #4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	9203      	str	r2, [sp, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bfb8      	it	lt
 80029a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80029a8:	3402      	adds	r4, #2
 80029aa:	9305      	str	r3, [sp, #20]
 80029ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002a78 <_svfiprintf_r+0x1fc>
 80029b0:	7821      	ldrb	r1, [r4, #0]
 80029b2:	2203      	movs	r2, #3
 80029b4:	4650      	mov	r0, sl
 80029b6:	f7fd fc23 	bl	8000200 <memchr>
 80029ba:	b140      	cbz	r0, 80029ce <_svfiprintf_r+0x152>
 80029bc:	2340      	movs	r3, #64	; 0x40
 80029be:	eba0 000a 	sub.w	r0, r0, sl
 80029c2:	fa03 f000 	lsl.w	r0, r3, r0
 80029c6:	9b04      	ldr	r3, [sp, #16]
 80029c8:	4303      	orrs	r3, r0
 80029ca:	3401      	adds	r4, #1
 80029cc:	9304      	str	r3, [sp, #16]
 80029ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029d2:	4826      	ldr	r0, [pc, #152]	; (8002a6c <_svfiprintf_r+0x1f0>)
 80029d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029d8:	2206      	movs	r2, #6
 80029da:	f7fd fc11 	bl	8000200 <memchr>
 80029de:	2800      	cmp	r0, #0
 80029e0:	d038      	beq.n	8002a54 <_svfiprintf_r+0x1d8>
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <_svfiprintf_r+0x1f4>)
 80029e4:	bb1b      	cbnz	r3, 8002a2e <_svfiprintf_r+0x1b2>
 80029e6:	9b03      	ldr	r3, [sp, #12]
 80029e8:	3307      	adds	r3, #7
 80029ea:	f023 0307 	bic.w	r3, r3, #7
 80029ee:	3308      	adds	r3, #8
 80029f0:	9303      	str	r3, [sp, #12]
 80029f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029f4:	4433      	add	r3, r6
 80029f6:	9309      	str	r3, [sp, #36]	; 0x24
 80029f8:	e767      	b.n	80028ca <_svfiprintf_r+0x4e>
 80029fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80029fe:	460c      	mov	r4, r1
 8002a00:	2001      	movs	r0, #1
 8002a02:	e7a5      	b.n	8002950 <_svfiprintf_r+0xd4>
 8002a04:	2300      	movs	r3, #0
 8002a06:	3401      	adds	r4, #1
 8002a08:	9305      	str	r3, [sp, #20]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f04f 0c0a 	mov.w	ip, #10
 8002a10:	4620      	mov	r0, r4
 8002a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a16:	3a30      	subs	r2, #48	; 0x30
 8002a18:	2a09      	cmp	r2, #9
 8002a1a:	d903      	bls.n	8002a24 <_svfiprintf_r+0x1a8>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0c5      	beq.n	80029ac <_svfiprintf_r+0x130>
 8002a20:	9105      	str	r1, [sp, #20]
 8002a22:	e7c3      	b.n	80029ac <_svfiprintf_r+0x130>
 8002a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a28:	4604      	mov	r4, r0
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e7f0      	b.n	8002a10 <_svfiprintf_r+0x194>
 8002a2e:	ab03      	add	r3, sp, #12
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	462a      	mov	r2, r5
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <_svfiprintf_r+0x1f8>)
 8002a36:	a904      	add	r1, sp, #16
 8002a38:	4638      	mov	r0, r7
 8002a3a:	f3af 8000 	nop.w
 8002a3e:	1c42      	adds	r2, r0, #1
 8002a40:	4606      	mov	r6, r0
 8002a42:	d1d6      	bne.n	80029f2 <_svfiprintf_r+0x176>
 8002a44:	89ab      	ldrh	r3, [r5, #12]
 8002a46:	065b      	lsls	r3, r3, #25
 8002a48:	f53f af2c 	bmi.w	80028a4 <_svfiprintf_r+0x28>
 8002a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a4e:	b01d      	add	sp, #116	; 0x74
 8002a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a54:	ab03      	add	r3, sp, #12
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	462a      	mov	r2, r5
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <_svfiprintf_r+0x1f8>)
 8002a5c:	a904      	add	r1, sp, #16
 8002a5e:	4638      	mov	r0, r7
 8002a60:	f000 f87a 	bl	8002b58 <_printf_i>
 8002a64:	e7eb      	b.n	8002a3e <_svfiprintf_r+0x1c2>
 8002a66:	bf00      	nop
 8002a68:	08003110 	.word	0x08003110
 8002a6c:	0800311a 	.word	0x0800311a
 8002a70:	00000000 	.word	0x00000000
 8002a74:	080027c5 	.word	0x080027c5
 8002a78:	08003116 	.word	0x08003116

08002a7c <_printf_common>:
 8002a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a80:	4616      	mov	r6, r2
 8002a82:	4699      	mov	r9, r3
 8002a84:	688a      	ldr	r2, [r1, #8]
 8002a86:	690b      	ldr	r3, [r1, #16]
 8002a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	bfb8      	it	lt
 8002a90:	4613      	movlt	r3, r2
 8002a92:	6033      	str	r3, [r6, #0]
 8002a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a98:	4607      	mov	r7, r0
 8002a9a:	460c      	mov	r4, r1
 8002a9c:	b10a      	cbz	r2, 8002aa2 <_printf_common+0x26>
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	6033      	str	r3, [r6, #0]
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	0699      	lsls	r1, r3, #26
 8002aa6:	bf42      	ittt	mi
 8002aa8:	6833      	ldrmi	r3, [r6, #0]
 8002aaa:	3302      	addmi	r3, #2
 8002aac:	6033      	strmi	r3, [r6, #0]
 8002aae:	6825      	ldr	r5, [r4, #0]
 8002ab0:	f015 0506 	ands.w	r5, r5, #6
 8002ab4:	d106      	bne.n	8002ac4 <_printf_common+0x48>
 8002ab6:	f104 0a19 	add.w	sl, r4, #25
 8002aba:	68e3      	ldr	r3, [r4, #12]
 8002abc:	6832      	ldr	r2, [r6, #0]
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	42ab      	cmp	r3, r5
 8002ac2:	dc26      	bgt.n	8002b12 <_printf_common+0x96>
 8002ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ac8:	1e13      	subs	r3, r2, #0
 8002aca:	6822      	ldr	r2, [r4, #0]
 8002acc:	bf18      	it	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	0692      	lsls	r2, r2, #26
 8002ad2:	d42b      	bmi.n	8002b2c <_printf_common+0xb0>
 8002ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ad8:	4649      	mov	r1, r9
 8002ada:	4638      	mov	r0, r7
 8002adc:	47c0      	blx	r8
 8002ade:	3001      	adds	r0, #1
 8002ae0:	d01e      	beq.n	8002b20 <_printf_common+0xa4>
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	68e5      	ldr	r5, [r4, #12]
 8002ae6:	6832      	ldr	r2, [r6, #0]
 8002ae8:	f003 0306 	and.w	r3, r3, #6
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	bf08      	it	eq
 8002af0:	1aad      	subeq	r5, r5, r2
 8002af2:	68a3      	ldr	r3, [r4, #8]
 8002af4:	6922      	ldr	r2, [r4, #16]
 8002af6:	bf0c      	ite	eq
 8002af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002afc:	2500      	movne	r5, #0
 8002afe:	4293      	cmp	r3, r2
 8002b00:	bfc4      	itt	gt
 8002b02:	1a9b      	subgt	r3, r3, r2
 8002b04:	18ed      	addgt	r5, r5, r3
 8002b06:	2600      	movs	r6, #0
 8002b08:	341a      	adds	r4, #26
 8002b0a:	42b5      	cmp	r5, r6
 8002b0c:	d11a      	bne.n	8002b44 <_printf_common+0xc8>
 8002b0e:	2000      	movs	r0, #0
 8002b10:	e008      	b.n	8002b24 <_printf_common+0xa8>
 8002b12:	2301      	movs	r3, #1
 8002b14:	4652      	mov	r2, sl
 8002b16:	4649      	mov	r1, r9
 8002b18:	4638      	mov	r0, r7
 8002b1a:	47c0      	blx	r8
 8002b1c:	3001      	adds	r0, #1
 8002b1e:	d103      	bne.n	8002b28 <_printf_common+0xac>
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b28:	3501      	adds	r5, #1
 8002b2a:	e7c6      	b.n	8002aba <_printf_common+0x3e>
 8002b2c:	18e1      	adds	r1, r4, r3
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	2030      	movs	r0, #48	; 0x30
 8002b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b36:	4422      	add	r2, r4
 8002b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b40:	3302      	adds	r3, #2
 8002b42:	e7c7      	b.n	8002ad4 <_printf_common+0x58>
 8002b44:	2301      	movs	r3, #1
 8002b46:	4622      	mov	r2, r4
 8002b48:	4649      	mov	r1, r9
 8002b4a:	4638      	mov	r0, r7
 8002b4c:	47c0      	blx	r8
 8002b4e:	3001      	adds	r0, #1
 8002b50:	d0e6      	beq.n	8002b20 <_printf_common+0xa4>
 8002b52:	3601      	adds	r6, #1
 8002b54:	e7d9      	b.n	8002b0a <_printf_common+0x8e>
	...

08002b58 <_printf_i>:
 8002b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b5c:	7e0f      	ldrb	r7, [r1, #24]
 8002b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b60:	2f78      	cmp	r7, #120	; 0x78
 8002b62:	4691      	mov	r9, r2
 8002b64:	4680      	mov	r8, r0
 8002b66:	460c      	mov	r4, r1
 8002b68:	469a      	mov	sl, r3
 8002b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b6e:	d807      	bhi.n	8002b80 <_printf_i+0x28>
 8002b70:	2f62      	cmp	r7, #98	; 0x62
 8002b72:	d80a      	bhi.n	8002b8a <_printf_i+0x32>
 8002b74:	2f00      	cmp	r7, #0
 8002b76:	f000 80d8 	beq.w	8002d2a <_printf_i+0x1d2>
 8002b7a:	2f58      	cmp	r7, #88	; 0x58
 8002b7c:	f000 80a3 	beq.w	8002cc6 <_printf_i+0x16e>
 8002b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b88:	e03a      	b.n	8002c00 <_printf_i+0xa8>
 8002b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b8e:	2b15      	cmp	r3, #21
 8002b90:	d8f6      	bhi.n	8002b80 <_printf_i+0x28>
 8002b92:	a101      	add	r1, pc, #4	; (adr r1, 8002b98 <_printf_i+0x40>)
 8002b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b98:	08002bf1 	.word	0x08002bf1
 8002b9c:	08002c05 	.word	0x08002c05
 8002ba0:	08002b81 	.word	0x08002b81
 8002ba4:	08002b81 	.word	0x08002b81
 8002ba8:	08002b81 	.word	0x08002b81
 8002bac:	08002b81 	.word	0x08002b81
 8002bb0:	08002c05 	.word	0x08002c05
 8002bb4:	08002b81 	.word	0x08002b81
 8002bb8:	08002b81 	.word	0x08002b81
 8002bbc:	08002b81 	.word	0x08002b81
 8002bc0:	08002b81 	.word	0x08002b81
 8002bc4:	08002d11 	.word	0x08002d11
 8002bc8:	08002c35 	.word	0x08002c35
 8002bcc:	08002cf3 	.word	0x08002cf3
 8002bd0:	08002b81 	.word	0x08002b81
 8002bd4:	08002b81 	.word	0x08002b81
 8002bd8:	08002d33 	.word	0x08002d33
 8002bdc:	08002b81 	.word	0x08002b81
 8002be0:	08002c35 	.word	0x08002c35
 8002be4:	08002b81 	.word	0x08002b81
 8002be8:	08002b81 	.word	0x08002b81
 8002bec:	08002cfb 	.word	0x08002cfb
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	1d1a      	adds	r2, r3, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	602a      	str	r2, [r5, #0]
 8002bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0a3      	b.n	8002d4c <_printf_i+0x1f4>
 8002c04:	6820      	ldr	r0, [r4, #0]
 8002c06:	6829      	ldr	r1, [r5, #0]
 8002c08:	0606      	lsls	r6, r0, #24
 8002c0a:	f101 0304 	add.w	r3, r1, #4
 8002c0e:	d50a      	bpl.n	8002c26 <_printf_i+0xce>
 8002c10:	680e      	ldr	r6, [r1, #0]
 8002c12:	602b      	str	r3, [r5, #0]
 8002c14:	2e00      	cmp	r6, #0
 8002c16:	da03      	bge.n	8002c20 <_printf_i+0xc8>
 8002c18:	232d      	movs	r3, #45	; 0x2d
 8002c1a:	4276      	negs	r6, r6
 8002c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c20:	485e      	ldr	r0, [pc, #376]	; (8002d9c <_printf_i+0x244>)
 8002c22:	230a      	movs	r3, #10
 8002c24:	e019      	b.n	8002c5a <_printf_i+0x102>
 8002c26:	680e      	ldr	r6, [r1, #0]
 8002c28:	602b      	str	r3, [r5, #0]
 8002c2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c2e:	bf18      	it	ne
 8002c30:	b236      	sxthne	r6, r6
 8002c32:	e7ef      	b.n	8002c14 <_printf_i+0xbc>
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	6820      	ldr	r0, [r4, #0]
 8002c38:	1d19      	adds	r1, r3, #4
 8002c3a:	6029      	str	r1, [r5, #0]
 8002c3c:	0601      	lsls	r1, r0, #24
 8002c3e:	d501      	bpl.n	8002c44 <_printf_i+0xec>
 8002c40:	681e      	ldr	r6, [r3, #0]
 8002c42:	e002      	b.n	8002c4a <_printf_i+0xf2>
 8002c44:	0646      	lsls	r6, r0, #25
 8002c46:	d5fb      	bpl.n	8002c40 <_printf_i+0xe8>
 8002c48:	881e      	ldrh	r6, [r3, #0]
 8002c4a:	4854      	ldr	r0, [pc, #336]	; (8002d9c <_printf_i+0x244>)
 8002c4c:	2f6f      	cmp	r7, #111	; 0x6f
 8002c4e:	bf0c      	ite	eq
 8002c50:	2308      	moveq	r3, #8
 8002c52:	230a      	movne	r3, #10
 8002c54:	2100      	movs	r1, #0
 8002c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c5a:	6865      	ldr	r5, [r4, #4]
 8002c5c:	60a5      	str	r5, [r4, #8]
 8002c5e:	2d00      	cmp	r5, #0
 8002c60:	bfa2      	ittt	ge
 8002c62:	6821      	ldrge	r1, [r4, #0]
 8002c64:	f021 0104 	bicge.w	r1, r1, #4
 8002c68:	6021      	strge	r1, [r4, #0]
 8002c6a:	b90e      	cbnz	r6, 8002c70 <_printf_i+0x118>
 8002c6c:	2d00      	cmp	r5, #0
 8002c6e:	d04d      	beq.n	8002d0c <_printf_i+0x1b4>
 8002c70:	4615      	mov	r5, r2
 8002c72:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c76:	fb03 6711 	mls	r7, r3, r1, r6
 8002c7a:	5dc7      	ldrb	r7, [r0, r7]
 8002c7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c80:	4637      	mov	r7, r6
 8002c82:	42bb      	cmp	r3, r7
 8002c84:	460e      	mov	r6, r1
 8002c86:	d9f4      	bls.n	8002c72 <_printf_i+0x11a>
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d10b      	bne.n	8002ca4 <_printf_i+0x14c>
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	07de      	lsls	r6, r3, #31
 8002c90:	d508      	bpl.n	8002ca4 <_printf_i+0x14c>
 8002c92:	6923      	ldr	r3, [r4, #16]
 8002c94:	6861      	ldr	r1, [r4, #4]
 8002c96:	4299      	cmp	r1, r3
 8002c98:	bfde      	ittt	le
 8002c9a:	2330      	movle	r3, #48	; 0x30
 8002c9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ca0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ca4:	1b52      	subs	r2, r2, r5
 8002ca6:	6122      	str	r2, [r4, #16]
 8002ca8:	f8cd a000 	str.w	sl, [sp]
 8002cac:	464b      	mov	r3, r9
 8002cae:	aa03      	add	r2, sp, #12
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	4640      	mov	r0, r8
 8002cb4:	f7ff fee2 	bl	8002a7c <_printf_common>
 8002cb8:	3001      	adds	r0, #1
 8002cba:	d14c      	bne.n	8002d56 <_printf_i+0x1fe>
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	b004      	add	sp, #16
 8002cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc6:	4835      	ldr	r0, [pc, #212]	; (8002d9c <_printf_i+0x244>)
 8002cc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ccc:	6829      	ldr	r1, [r5, #0]
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8002cd4:	6029      	str	r1, [r5, #0]
 8002cd6:	061d      	lsls	r5, r3, #24
 8002cd8:	d514      	bpl.n	8002d04 <_printf_i+0x1ac>
 8002cda:	07df      	lsls	r7, r3, #31
 8002cdc:	bf44      	itt	mi
 8002cde:	f043 0320 	orrmi.w	r3, r3, #32
 8002ce2:	6023      	strmi	r3, [r4, #0]
 8002ce4:	b91e      	cbnz	r6, 8002cee <_printf_i+0x196>
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	f023 0320 	bic.w	r3, r3, #32
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	2310      	movs	r3, #16
 8002cf0:	e7b0      	b.n	8002c54 <_printf_i+0xfc>
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	f043 0320 	orr.w	r3, r3, #32
 8002cf8:	6023      	str	r3, [r4, #0]
 8002cfa:	2378      	movs	r3, #120	; 0x78
 8002cfc:	4828      	ldr	r0, [pc, #160]	; (8002da0 <_printf_i+0x248>)
 8002cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d02:	e7e3      	b.n	8002ccc <_printf_i+0x174>
 8002d04:	0659      	lsls	r1, r3, #25
 8002d06:	bf48      	it	mi
 8002d08:	b2b6      	uxthmi	r6, r6
 8002d0a:	e7e6      	b.n	8002cda <_printf_i+0x182>
 8002d0c:	4615      	mov	r5, r2
 8002d0e:	e7bb      	b.n	8002c88 <_printf_i+0x130>
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	6826      	ldr	r6, [r4, #0]
 8002d14:	6961      	ldr	r1, [r4, #20]
 8002d16:	1d18      	adds	r0, r3, #4
 8002d18:	6028      	str	r0, [r5, #0]
 8002d1a:	0635      	lsls	r5, r6, #24
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	d501      	bpl.n	8002d24 <_printf_i+0x1cc>
 8002d20:	6019      	str	r1, [r3, #0]
 8002d22:	e002      	b.n	8002d2a <_printf_i+0x1d2>
 8002d24:	0670      	lsls	r0, r6, #25
 8002d26:	d5fb      	bpl.n	8002d20 <_printf_i+0x1c8>
 8002d28:	8019      	strh	r1, [r3, #0]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	6123      	str	r3, [r4, #16]
 8002d2e:	4615      	mov	r5, r2
 8002d30:	e7ba      	b.n	8002ca8 <_printf_i+0x150>
 8002d32:	682b      	ldr	r3, [r5, #0]
 8002d34:	1d1a      	adds	r2, r3, #4
 8002d36:	602a      	str	r2, [r5, #0]
 8002d38:	681d      	ldr	r5, [r3, #0]
 8002d3a:	6862      	ldr	r2, [r4, #4]
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4628      	mov	r0, r5
 8002d40:	f7fd fa5e 	bl	8000200 <memchr>
 8002d44:	b108      	cbz	r0, 8002d4a <_printf_i+0x1f2>
 8002d46:	1b40      	subs	r0, r0, r5
 8002d48:	6060      	str	r0, [r4, #4]
 8002d4a:	6863      	ldr	r3, [r4, #4]
 8002d4c:	6123      	str	r3, [r4, #16]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d54:	e7a8      	b.n	8002ca8 <_printf_i+0x150>
 8002d56:	6923      	ldr	r3, [r4, #16]
 8002d58:	462a      	mov	r2, r5
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	4640      	mov	r0, r8
 8002d5e:	47d0      	blx	sl
 8002d60:	3001      	adds	r0, #1
 8002d62:	d0ab      	beq.n	8002cbc <_printf_i+0x164>
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	079b      	lsls	r3, r3, #30
 8002d68:	d413      	bmi.n	8002d92 <_printf_i+0x23a>
 8002d6a:	68e0      	ldr	r0, [r4, #12]
 8002d6c:	9b03      	ldr	r3, [sp, #12]
 8002d6e:	4298      	cmp	r0, r3
 8002d70:	bfb8      	it	lt
 8002d72:	4618      	movlt	r0, r3
 8002d74:	e7a4      	b.n	8002cc0 <_printf_i+0x168>
 8002d76:	2301      	movs	r3, #1
 8002d78:	4632      	mov	r2, r6
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	4640      	mov	r0, r8
 8002d7e:	47d0      	blx	sl
 8002d80:	3001      	adds	r0, #1
 8002d82:	d09b      	beq.n	8002cbc <_printf_i+0x164>
 8002d84:	3501      	adds	r5, #1
 8002d86:	68e3      	ldr	r3, [r4, #12]
 8002d88:	9903      	ldr	r1, [sp, #12]
 8002d8a:	1a5b      	subs	r3, r3, r1
 8002d8c:	42ab      	cmp	r3, r5
 8002d8e:	dcf2      	bgt.n	8002d76 <_printf_i+0x21e>
 8002d90:	e7eb      	b.n	8002d6a <_printf_i+0x212>
 8002d92:	2500      	movs	r5, #0
 8002d94:	f104 0619 	add.w	r6, r4, #25
 8002d98:	e7f5      	b.n	8002d86 <_printf_i+0x22e>
 8002d9a:	bf00      	nop
 8002d9c:	08003121 	.word	0x08003121
 8002da0:	08003132 	.word	0x08003132

08002da4 <memcpy>:
 8002da4:	440a      	add	r2, r1
 8002da6:	4291      	cmp	r1, r2
 8002da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002dac:	d100      	bne.n	8002db0 <memcpy+0xc>
 8002dae:	4770      	bx	lr
 8002db0:	b510      	push	{r4, lr}
 8002db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dba:	4291      	cmp	r1, r2
 8002dbc:	d1f9      	bne.n	8002db2 <memcpy+0xe>
 8002dbe:	bd10      	pop	{r4, pc}

08002dc0 <memmove>:
 8002dc0:	4288      	cmp	r0, r1
 8002dc2:	b510      	push	{r4, lr}
 8002dc4:	eb01 0402 	add.w	r4, r1, r2
 8002dc8:	d902      	bls.n	8002dd0 <memmove+0x10>
 8002dca:	4284      	cmp	r4, r0
 8002dcc:	4623      	mov	r3, r4
 8002dce:	d807      	bhi.n	8002de0 <memmove+0x20>
 8002dd0:	1e43      	subs	r3, r0, #1
 8002dd2:	42a1      	cmp	r1, r4
 8002dd4:	d008      	beq.n	8002de8 <memmove+0x28>
 8002dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002dde:	e7f8      	b.n	8002dd2 <memmove+0x12>
 8002de0:	4402      	add	r2, r0
 8002de2:	4601      	mov	r1, r0
 8002de4:	428a      	cmp	r2, r1
 8002de6:	d100      	bne.n	8002dea <memmove+0x2a>
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002df2:	e7f7      	b.n	8002de4 <memmove+0x24>

08002df4 <_free_r>:
 8002df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002df6:	2900      	cmp	r1, #0
 8002df8:	d044      	beq.n	8002e84 <_free_r+0x90>
 8002dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dfe:	9001      	str	r0, [sp, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f1a1 0404 	sub.w	r4, r1, #4
 8002e06:	bfb8      	it	lt
 8002e08:	18e4      	addlt	r4, r4, r3
 8002e0a:	f000 f913 	bl	8003034 <__malloc_lock>
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <_free_r+0x94>)
 8002e10:	9801      	ldr	r0, [sp, #4]
 8002e12:	6813      	ldr	r3, [r2, #0]
 8002e14:	b933      	cbnz	r3, 8002e24 <_free_r+0x30>
 8002e16:	6063      	str	r3, [r4, #4]
 8002e18:	6014      	str	r4, [r2, #0]
 8002e1a:	b003      	add	sp, #12
 8002e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e20:	f000 b90e 	b.w	8003040 <__malloc_unlock>
 8002e24:	42a3      	cmp	r3, r4
 8002e26:	d908      	bls.n	8002e3a <_free_r+0x46>
 8002e28:	6825      	ldr	r5, [r4, #0]
 8002e2a:	1961      	adds	r1, r4, r5
 8002e2c:	428b      	cmp	r3, r1
 8002e2e:	bf01      	itttt	eq
 8002e30:	6819      	ldreq	r1, [r3, #0]
 8002e32:	685b      	ldreq	r3, [r3, #4]
 8002e34:	1949      	addeq	r1, r1, r5
 8002e36:	6021      	streq	r1, [r4, #0]
 8002e38:	e7ed      	b.n	8002e16 <_free_r+0x22>
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	b10b      	cbz	r3, 8002e44 <_free_r+0x50>
 8002e40:	42a3      	cmp	r3, r4
 8002e42:	d9fa      	bls.n	8002e3a <_free_r+0x46>
 8002e44:	6811      	ldr	r1, [r2, #0]
 8002e46:	1855      	adds	r5, r2, r1
 8002e48:	42a5      	cmp	r5, r4
 8002e4a:	d10b      	bne.n	8002e64 <_free_r+0x70>
 8002e4c:	6824      	ldr	r4, [r4, #0]
 8002e4e:	4421      	add	r1, r4
 8002e50:	1854      	adds	r4, r2, r1
 8002e52:	42a3      	cmp	r3, r4
 8002e54:	6011      	str	r1, [r2, #0]
 8002e56:	d1e0      	bne.n	8002e1a <_free_r+0x26>
 8002e58:	681c      	ldr	r4, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	6053      	str	r3, [r2, #4]
 8002e5e:	4421      	add	r1, r4
 8002e60:	6011      	str	r1, [r2, #0]
 8002e62:	e7da      	b.n	8002e1a <_free_r+0x26>
 8002e64:	d902      	bls.n	8002e6c <_free_r+0x78>
 8002e66:	230c      	movs	r3, #12
 8002e68:	6003      	str	r3, [r0, #0]
 8002e6a:	e7d6      	b.n	8002e1a <_free_r+0x26>
 8002e6c:	6825      	ldr	r5, [r4, #0]
 8002e6e:	1961      	adds	r1, r4, r5
 8002e70:	428b      	cmp	r3, r1
 8002e72:	bf04      	itt	eq
 8002e74:	6819      	ldreq	r1, [r3, #0]
 8002e76:	685b      	ldreq	r3, [r3, #4]
 8002e78:	6063      	str	r3, [r4, #4]
 8002e7a:	bf04      	itt	eq
 8002e7c:	1949      	addeq	r1, r1, r5
 8002e7e:	6021      	streq	r1, [r4, #0]
 8002e80:	6054      	str	r4, [r2, #4]
 8002e82:	e7ca      	b.n	8002e1a <_free_r+0x26>
 8002e84:	b003      	add	sp, #12
 8002e86:	bd30      	pop	{r4, r5, pc}
 8002e88:	2000013c 	.word	0x2000013c

08002e8c <sbrk_aligned>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	4e0e      	ldr	r6, [pc, #56]	; (8002ec8 <sbrk_aligned+0x3c>)
 8002e90:	460c      	mov	r4, r1
 8002e92:	6831      	ldr	r1, [r6, #0]
 8002e94:	4605      	mov	r5, r0
 8002e96:	b911      	cbnz	r1, 8002e9e <sbrk_aligned+0x12>
 8002e98:	f000 f8bc 	bl	8003014 <_sbrk_r>
 8002e9c:	6030      	str	r0, [r6, #0]
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	f000 f8b7 	bl	8003014 <_sbrk_r>
 8002ea6:	1c43      	adds	r3, r0, #1
 8002ea8:	d00a      	beq.n	8002ec0 <sbrk_aligned+0x34>
 8002eaa:	1cc4      	adds	r4, r0, #3
 8002eac:	f024 0403 	bic.w	r4, r4, #3
 8002eb0:	42a0      	cmp	r0, r4
 8002eb2:	d007      	beq.n	8002ec4 <sbrk_aligned+0x38>
 8002eb4:	1a21      	subs	r1, r4, r0
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	f000 f8ac 	bl	8003014 <_sbrk_r>
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	d101      	bne.n	8002ec4 <sbrk_aligned+0x38>
 8002ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	20000140 	.word	0x20000140

08002ecc <_malloc_r>:
 8002ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed0:	1ccd      	adds	r5, r1, #3
 8002ed2:	f025 0503 	bic.w	r5, r5, #3
 8002ed6:	3508      	adds	r5, #8
 8002ed8:	2d0c      	cmp	r5, #12
 8002eda:	bf38      	it	cc
 8002edc:	250c      	movcc	r5, #12
 8002ede:	2d00      	cmp	r5, #0
 8002ee0:	4607      	mov	r7, r0
 8002ee2:	db01      	blt.n	8002ee8 <_malloc_r+0x1c>
 8002ee4:	42a9      	cmp	r1, r5
 8002ee6:	d905      	bls.n	8002ef4 <_malloc_r+0x28>
 8002ee8:	230c      	movs	r3, #12
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	2600      	movs	r6, #0
 8002eee:	4630      	mov	r0, r6
 8002ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ef4:	4e2e      	ldr	r6, [pc, #184]	; (8002fb0 <_malloc_r+0xe4>)
 8002ef6:	f000 f89d 	bl	8003034 <__malloc_lock>
 8002efa:	6833      	ldr	r3, [r6, #0]
 8002efc:	461c      	mov	r4, r3
 8002efe:	bb34      	cbnz	r4, 8002f4e <_malloc_r+0x82>
 8002f00:	4629      	mov	r1, r5
 8002f02:	4638      	mov	r0, r7
 8002f04:	f7ff ffc2 	bl	8002e8c <sbrk_aligned>
 8002f08:	1c43      	adds	r3, r0, #1
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	d14d      	bne.n	8002faa <_malloc_r+0xde>
 8002f0e:	6834      	ldr	r4, [r6, #0]
 8002f10:	4626      	mov	r6, r4
 8002f12:	2e00      	cmp	r6, #0
 8002f14:	d140      	bne.n	8002f98 <_malloc_r+0xcc>
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	4631      	mov	r1, r6
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	eb04 0803 	add.w	r8, r4, r3
 8002f20:	f000 f878 	bl	8003014 <_sbrk_r>
 8002f24:	4580      	cmp	r8, r0
 8002f26:	d13a      	bne.n	8002f9e <_malloc_r+0xd2>
 8002f28:	6821      	ldr	r1, [r4, #0]
 8002f2a:	3503      	adds	r5, #3
 8002f2c:	1a6d      	subs	r5, r5, r1
 8002f2e:	f025 0503 	bic.w	r5, r5, #3
 8002f32:	3508      	adds	r5, #8
 8002f34:	2d0c      	cmp	r5, #12
 8002f36:	bf38      	it	cc
 8002f38:	250c      	movcc	r5, #12
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	f7ff ffa5 	bl	8002e8c <sbrk_aligned>
 8002f42:	3001      	adds	r0, #1
 8002f44:	d02b      	beq.n	8002f9e <_malloc_r+0xd2>
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	442b      	add	r3, r5
 8002f4a:	6023      	str	r3, [r4, #0]
 8002f4c:	e00e      	b.n	8002f6c <_malloc_r+0xa0>
 8002f4e:	6822      	ldr	r2, [r4, #0]
 8002f50:	1b52      	subs	r2, r2, r5
 8002f52:	d41e      	bmi.n	8002f92 <_malloc_r+0xc6>
 8002f54:	2a0b      	cmp	r2, #11
 8002f56:	d916      	bls.n	8002f86 <_malloc_r+0xba>
 8002f58:	1961      	adds	r1, r4, r5
 8002f5a:	42a3      	cmp	r3, r4
 8002f5c:	6025      	str	r5, [r4, #0]
 8002f5e:	bf18      	it	ne
 8002f60:	6059      	strne	r1, [r3, #4]
 8002f62:	6863      	ldr	r3, [r4, #4]
 8002f64:	bf08      	it	eq
 8002f66:	6031      	streq	r1, [r6, #0]
 8002f68:	5162      	str	r2, [r4, r5]
 8002f6a:	604b      	str	r3, [r1, #4]
 8002f6c:	4638      	mov	r0, r7
 8002f6e:	f104 060b 	add.w	r6, r4, #11
 8002f72:	f000 f865 	bl	8003040 <__malloc_unlock>
 8002f76:	f026 0607 	bic.w	r6, r6, #7
 8002f7a:	1d23      	adds	r3, r4, #4
 8002f7c:	1af2      	subs	r2, r6, r3
 8002f7e:	d0b6      	beq.n	8002eee <_malloc_r+0x22>
 8002f80:	1b9b      	subs	r3, r3, r6
 8002f82:	50a3      	str	r3, [r4, r2]
 8002f84:	e7b3      	b.n	8002eee <_malloc_r+0x22>
 8002f86:	6862      	ldr	r2, [r4, #4]
 8002f88:	42a3      	cmp	r3, r4
 8002f8a:	bf0c      	ite	eq
 8002f8c:	6032      	streq	r2, [r6, #0]
 8002f8e:	605a      	strne	r2, [r3, #4]
 8002f90:	e7ec      	b.n	8002f6c <_malloc_r+0xa0>
 8002f92:	4623      	mov	r3, r4
 8002f94:	6864      	ldr	r4, [r4, #4]
 8002f96:	e7b2      	b.n	8002efe <_malloc_r+0x32>
 8002f98:	4634      	mov	r4, r6
 8002f9a:	6876      	ldr	r6, [r6, #4]
 8002f9c:	e7b9      	b.n	8002f12 <_malloc_r+0x46>
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	f000 f84c 	bl	8003040 <__malloc_unlock>
 8002fa8:	e7a1      	b.n	8002eee <_malloc_r+0x22>
 8002faa:	6025      	str	r5, [r4, #0]
 8002fac:	e7de      	b.n	8002f6c <_malloc_r+0xa0>
 8002fae:	bf00      	nop
 8002fb0:	2000013c 	.word	0x2000013c

08002fb4 <_realloc_r>:
 8002fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb8:	4680      	mov	r8, r0
 8002fba:	4614      	mov	r4, r2
 8002fbc:	460e      	mov	r6, r1
 8002fbe:	b921      	cbnz	r1, 8002fca <_realloc_r+0x16>
 8002fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	f7ff bf81 	b.w	8002ecc <_malloc_r>
 8002fca:	b92a      	cbnz	r2, 8002fd8 <_realloc_r+0x24>
 8002fcc:	f7ff ff12 	bl	8002df4 <_free_r>
 8002fd0:	4625      	mov	r5, r4
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fd8:	f000 f838 	bl	800304c <_malloc_usable_size_r>
 8002fdc:	4284      	cmp	r4, r0
 8002fde:	4607      	mov	r7, r0
 8002fe0:	d802      	bhi.n	8002fe8 <_realloc_r+0x34>
 8002fe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002fe6:	d812      	bhi.n	800300e <_realloc_r+0x5a>
 8002fe8:	4621      	mov	r1, r4
 8002fea:	4640      	mov	r0, r8
 8002fec:	f7ff ff6e 	bl	8002ecc <_malloc_r>
 8002ff0:	4605      	mov	r5, r0
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d0ed      	beq.n	8002fd2 <_realloc_r+0x1e>
 8002ff6:	42bc      	cmp	r4, r7
 8002ff8:	4622      	mov	r2, r4
 8002ffa:	4631      	mov	r1, r6
 8002ffc:	bf28      	it	cs
 8002ffe:	463a      	movcs	r2, r7
 8003000:	f7ff fed0 	bl	8002da4 <memcpy>
 8003004:	4631      	mov	r1, r6
 8003006:	4640      	mov	r0, r8
 8003008:	f7ff fef4 	bl	8002df4 <_free_r>
 800300c:	e7e1      	b.n	8002fd2 <_realloc_r+0x1e>
 800300e:	4635      	mov	r5, r6
 8003010:	e7df      	b.n	8002fd2 <_realloc_r+0x1e>
	...

08003014 <_sbrk_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	4d06      	ldr	r5, [pc, #24]	; (8003030 <_sbrk_r+0x1c>)
 8003018:	2300      	movs	r3, #0
 800301a:	4604      	mov	r4, r0
 800301c:	4608      	mov	r0, r1
 800301e:	602b      	str	r3, [r5, #0]
 8003020:	f7fd fdea 	bl	8000bf8 <_sbrk>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d102      	bne.n	800302e <_sbrk_r+0x1a>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	b103      	cbz	r3, 800302e <_sbrk_r+0x1a>
 800302c:	6023      	str	r3, [r4, #0]
 800302e:	bd38      	pop	{r3, r4, r5, pc}
 8003030:	20000144 	.word	0x20000144

08003034 <__malloc_lock>:
 8003034:	4801      	ldr	r0, [pc, #4]	; (800303c <__malloc_lock+0x8>)
 8003036:	f000 b811 	b.w	800305c <__retarget_lock_acquire_recursive>
 800303a:	bf00      	nop
 800303c:	20000148 	.word	0x20000148

08003040 <__malloc_unlock>:
 8003040:	4801      	ldr	r0, [pc, #4]	; (8003048 <__malloc_unlock+0x8>)
 8003042:	f000 b80c 	b.w	800305e <__retarget_lock_release_recursive>
 8003046:	bf00      	nop
 8003048:	20000148 	.word	0x20000148

0800304c <_malloc_usable_size_r>:
 800304c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003050:	1f18      	subs	r0, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	bfbc      	itt	lt
 8003056:	580b      	ldrlt	r3, [r1, r0]
 8003058:	18c0      	addlt	r0, r0, r3
 800305a:	4770      	bx	lr

0800305c <__retarget_lock_acquire_recursive>:
 800305c:	4770      	bx	lr

0800305e <__retarget_lock_release_recursive>:
 800305e:	4770      	bx	lr

08003060 <_init>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	bf00      	nop
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr

0800306c <_fini>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	bf00      	nop
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr
