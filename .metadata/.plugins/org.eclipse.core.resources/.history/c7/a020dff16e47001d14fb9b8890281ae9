/*
 * API_debounce.c
 *
 *  Created on: 14 sep. 2022
 *      Author: MATIAS
 */

#include "API_debounce.h"
#include "API_delay.h"
#include "API_uart.h"
#include "API_gpio.h"
#include "main.h"

//Prototipos de funciones privadas
/*buttonPressed
 *Funcion privada utilizada para la deteccion de pulsaciones
 *
 *Parametro: PULSADOR_UP/PULSADOR_DOWN*/
static void buttonPressed(uint8_t button);

//Variable global privada que adquiere estado TRUE cuando detecta una pulsación valida de BU
static bool_t buttonUPPress;
//Variable global privada que adquiere estado TRUE cuando detecta una pulsación valida de BD
static bool_t buttonDOWNPress;

//Estructuras para toma de tiempo y validación de pulsaciones
static delay_t delayButtonBU;
static delay_t delayButtonBD;

//Estructuras para definir estados de MEF a utilizar
static debounceState_t StateBU;
static debounceState_t StateBD;
static debounceState_t buttonState;

/*debounceFSM_init
 *Se encarga de asignar el estado inicial en la MEF utilizada para validación de pulsaciones.
 *Por defecto, se asigna estado BUTTON_UP como inicial
 *Se inicializa las estructuras para toma de tiempo y validación de pulsaciones*/
void debounceFSM_init(void){
	StateBU=BUTTON_UP;
	StateBD=BUTTON_UP;
	delayInit(&delayButtonBU,TIME_VALID_PUSH);
	delayInit(&delayButtonBD,TIME_VALID_PUSH);
}

/*debounceFSM_update
 *Verifica el estado del pulsador y actualiza el estado de la MEF
 *
 *Parametro: PULSADOR_UP/PULSADOR_DOWN*/
void debounceFSM_update(uint8_t pulsador){

	uint8_t buttonSel=0;
	//Verifica valor de parametro de entrada, el cual indica que pulsador se debe analizar (boton UP o boton DOWN).
	if (pulsador==PULSADOR_UP){
		buttonState=StateBU;
		buttonSel=PULSADOR_UP;
	}
	else if (pulsador==PULSADOR_DOWN){
		buttonState=StateBD;
		buttonSel=PULSADOR_DOWN;
	}
	else{
		/*En caso de error en parametro, enciende LED1 de manera permanente*/
		while(1){
			BSP_LED_On(LED1);
		}
	}

	switch (buttonState){
		/*Estado BUTTON_UP:
		 * Comprueba que pulsador se esta analizando para actualizar la estrucura que corresponda.
		 * Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_FALLING.
		 * En estas condiciones, inicia al contador para validación.
		 * Si detecta que el pulsador no se encuentra presionado, mantiene la MEF en estado BUTTON_UP. */
		case BUTTON_UP:
			if(buttonSel==PULSADOR_UP){
				if(BSP_PB_GetState(BUTTON_USER)){
					delayRead(&delayButtonBU);
					StateBU=BUTTON_FALLING;
				}
				else{
					StateBU=BUTTON_UP;
				}
			}
			else{
				if(gpioButton_Read()){
					delayRead(&delayButtonBD);
					StateBD=BUTTON_FALLING;
				}
				else{
					StateBD=BUTTON_UP;
				}
			}

		break;

		/*Estado BUTTON_FALLING:
		* Comprueba que pulsador se esta analizando para actualizar la estrucura que corresponda.
		* Verifica que se cumpla el retardo de tiempo para validar una pulsación.
		* Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_DOWN (pulsación detectada).
		* A su vez, llama a la funcion buttonPressed indicar dicha pulsacion.
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_UP (pulsación no válida). */
		case BUTTON_FALLING:
			if(buttonSel==PULSADOR_UP){
				if (delayRead(&delayButtonBU)){
					if(BSP_PB_GetState(BUTTON_USER)){
						StateBU=BUTTON_DOWN;
						buttonPressed(PULSADOR_UP);
					}
					else{
						StateBU=BUTTON_UP;
					}
				}
				else{
					StateBU=BUTTON_FALLING;
				}
			}
			else{
				if (delayRead(&delayButtonBD)){
					if(gpioButton_Read()){
						StateBD=BUTTON_DOWN;
						buttonPressed(PULSADOR_DOWN);
					}
					else{
						StateBD=BUTTON_UP;
					}
				}
				else{
					StateBD=BUTTON_FALLING;
				}
			}

		break;

		/*Estado BUTTON_DOWN:
		* Comprueba que pulsador se esta analizando para actualizar la estrucura que corresponda.
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_RAISING.
		* En estas condiciones, inicia al contador para validación.
		* Si detecta que el pulsador se encuentra presionado, mantiene la MEF en estado BUTTON_DOWN. */
		case BUTTON_DOWN:
			if(buttonSel==PULSADOR_UP){
				if(!BSP_PB_GetState(BUTTON_USER)){
					delayRead(&delayButtonBU);
					StateBU=BUTTON_RAISING;
				}
				else{
					StateBU=BUTTON_DOWN;
				}
			}
			else{
				if(!gpioButton_Read()){
					delayRead(&delayButtonBD);
					StateBD=BUTTON_RAISING;
				}
				else{
					StateBD=BUTTON_DOWN;
				}
			}

		break;

		/*Estado BUTTON_RAISING:
		* Comprueba que pulsador se esta analizando para actualizar la estrucura que corresponda.
		* Verifica que se cumpla el retardo de tiempo para validar una pulsación.
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_UP (pulsador liberado).
		* Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_DOWN (liberación no válida). */
		case BUTTON_RAISING:
			if(buttonSel==PULSADOR_UP){
				if (delayRead(&delayButtonBU)){
					if(!BSP_PB_GetState(BUTTON_USER)){
						StateBU=BUTTON_UP;
					}
					else{
						StateBU=BUTTON_DOWN;
					}
				}
				else{
					StateBU=BUTTON_RAISING;
				}
			}
			else{
				if (delayRead(&delayButtonBD)){
					if(!gpioButton_Read()){
						StateBD=BUTTON_UP;
					}
					else{
						StateBD=BUTTON_DOWN;
					}
				}
				else{
					StateBD=BUTTON_RAISING;
				}
			}
		break;

		/*Por default, vuelve al estado inicial*/
		default:
			debounceFSM_init();
		break;
	}

}

/*buttonPressed
 *Función que indica que boton fue presionado. */
static void buttonPressed(uint8_t button) {
	if(button==PULSADOR_UP){
		buttonUPPress=true;
	}
	else{
		buttonDOWNPress=true;
	}
}


/*readKeyUP
 *Función booleana que devuelve una copia del valor de la variable buttonPressUp.
 *Si dicha variable posee valor lógico TRUE, la reinicializa a FALSE.*/
bool_t readKeyUP(void){
	bool_t buttonStateAux;

	if (buttonUPPress==true){
		buttonStateAux=true;
		buttonUPPress=false;
	}
	else{
		buttonStateAux=false;
	}
	return buttonStateAux;
}

/*readKeyDOWN
 *Función booleana que devuelve una copia del valor de la variable buttonPressDown.
 *Si dicha variable posee valor lógico TRUE, la reinicializa a FALSE.*/
bool_t readKeyDOWN(void){
	bool_t buttonStateAux;

	if (buttonDOWNPress==true){
		buttonStateAux=true;
		buttonDOWNPress=false;
	}
	else{
		buttonStateAux=false;
	}
	return buttonStateAux;
}
